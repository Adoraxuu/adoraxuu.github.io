<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Advent of code 2023 —Day 01</title>
    <url>/2023/12/17/AOC-day01/</url>
    <content><![CDATA[<style>
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 solid;
margin:5px;
padding:10px 2px 2px 2px;
border-style:dashed;
}
</style>

<h3 id="關於Advent-of-code"><a href="#關於Advent-of-code" class="headerlink" title="關於Advent of code"></a>關於Advent of code</h3><blockquote>
<p><a href="https://adventofcode.com/">“Advent of code”</a>是一年一度的以聖誕節為主題的計算機程式挑戰。自2015年以來一直在運行。程式難題涵蓋各種技能集和技能級別，可以使用任何編程語言來解決。參與者還可以在全球和私人排行榜上根據速度進行競爭。該活動由軟件工程師Eric Wastl創立並維護。</p>
</blockquote>
<p>來源：<a href="https://en.wikipedia.org/wiki/Advent_of_Code">維基百科</a></p>
<h3 id="Day-1-part-1"><a href="#Day-1-part-1" class="headerlink" title="Day 1 - part.1"></a>Day 1 - part.1</h3><p>今年第一次來參與Advent of code，順便把我的解題過程也記錄下來٩(^ᴗ^)۶</p>
<p>這是第一天 Part 1的題目：</p>
<img src="/images/AOC/01.png">

<p>第一部分比較簡單，只要透過gsub就可以解決！</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_input</span>(<span class="hljs-params">input_array</span>)<br>  results = []<br><span class="hljs-comment">#設定一個空陣列</span><br><br><span class="hljs-comment"># 使用each do將陣列裡的數丟出處理並替換</span><br>  input_array.each <span class="hljs-keyword">do</span> |<span class="hljs-params">input_string</span>|<br>    digits = input_string.gsub(<span class="hljs-regexp">/\D/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    result = <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;digits[<span class="hljs-number">0</span>]&#125;</span><span class="hljs-subst">#&#123;digits[-<span class="hljs-number">1</span>]&#125;</span>&quot;</span><br><span class="hljs-comment">#利用字串將首位數+尾數串起來，如果只有一個數字則重複</span><br>    results.push(result)<br><span class="hljs-comment">#將結果推進result裡</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-comment"># 計算結果陣列中數字的總和 #利用.map(&amp;:to_i)將陣列裡的字串轉為數字才可以相加</span><br>  sum_result = results.map(&amp;<span class="hljs-symbol">:to_i</span>).sum<br><br>  <span class="hljs-comment"># 輸出結果</span><br>  puts sum_result<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<h3 id="Day1-Part-2"><a href="#Day1-Part-2" class="headerlink" title="Day1 Part.2"></a>Day1 Part.2</h3><p>第二部分我整個大卡關(ᗒᗣᗕ)՞</p>
<img src="/images/AOC/02.png">

<p>有想出說做出一個hash，將”one” &#x3D;&gt; “1”依序輸入進去，<br>接著使用each+gsub將將裡面的數字替換掉，<br>但遇到eightwothree，輸出的結果卻是eigh23….</p>
<p>最後上網找了<a href="https://www.youtube.com/@cjav_dev">CJ Avilla</a>分享的解法，<br>來源： <a href="https://www.youtube.com/watch?v=lrJfC2dF84k&list=PLS6F722u-R6KYlGyUv65EFpGKl2Esmurr&index=15">Match and Scan - Day 01 - Advent of Code 2023</a></p>
<p>原來使用match方法就可以了ʕ •̀ o •́ ʔ</p>
<p>關於match，<a href="https://rubyapi.org/3.2/o/s?q=match">Ruby API</a>是這樣解釋：<br><strong><strong><a href="https://rubyapi.org/3.2/o/string#method-i-match">String#match</a></strong></strong></p>
<div class="em-div2">

<p>Returns a MatchData object (or <code>nil</code>) based on <code>self</code> and the given <code>pattern</code>.<br>Note: also updates <a href="https://rubyapi.org/3.2/o/regexp#class-Regexp-label-Special+global+variables">Special global variables at <code>Regexp</code></a>.<br> Computes <code>regexp</code> by converting <code>pattern</code> (if not already a Regexp).</p>
</div>
match會回傳符合內容的物件，看起來像這個樣子：

<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">&#x27;foo&#x27;</span>.match(<span class="hljs-string">&#x27;f&#x27;</span>) <span class="hljs-comment"># =&gt; #&lt;MatchData &quot;f&quot;&gt;</span><br></code></pre></td></tr></table></figure>

<p>另外可以使用常規表達法轉換，所以解法可以這樣寫：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">input = <span class="hljs-string">&lt;&lt;~INPUT</span><br><span class="hljs-string">two1nine</span><br><span class="hljs-string">eightwothree</span><br><span class="hljs-string">abcone2threexyz</span><br><span class="hljs-string">xtwone3four</span><br><span class="hljs-string">4nineeightseven2</span><br><span class="hljs-string">zoneight234</span><br><span class="hljs-string">7pqrstsixteen</span><br><span class="hljs-string">INPUT</span><br><br>replacement = &#123;<br>  <span class="hljs-string">&quot;one&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;two&quot;</span> =&gt; <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-string">&quot;three&quot;</span> =&gt; <span class="hljs-string">&quot;3&quot;</span>,<br>  <span class="hljs-string">&quot;four&quot;</span> =&gt; <span class="hljs-string">&quot;4&quot;</span>,<br>  <span class="hljs-string">&quot;five&quot;</span> =&gt; <span class="hljs-string">&quot;5&quot;</span>,<br>  <span class="hljs-string">&quot;six&quot;</span> =&gt; <span class="hljs-string">&quot;6&quot;</span>,<br>  <span class="hljs-string">&quot;seven&quot;</span> =&gt; <span class="hljs-string">&quot;7&quot;</span>,<br>  <span class="hljs-string">&quot;eight&quot;</span> =&gt; <span class="hljs-string">&quot;8&quot;</span>,<br>  <span class="hljs-string">&quot;nine&quot;</span> =&gt; <span class="hljs-string">&quot;9&quot;</span>,<br>  <span class="hljs-string">&quot;1&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;2&quot;</span> =&gt; <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-string">&quot;3&quot;</span> =&gt; <span class="hljs-string">&quot;3&quot;</span>,<br>  <span class="hljs-string">&quot;4&quot;</span> =&gt; <span class="hljs-string">&quot;4&quot;</span>,<br>  <span class="hljs-string">&quot;5&quot;</span> =&gt; <span class="hljs-string">&quot;5&quot;</span>,<br>  <span class="hljs-string">&quot;6&quot;</span> =&gt; <span class="hljs-string">&quot;6&quot;</span>,<br>  <span class="hljs-string">&quot;7&quot;</span> =&gt; <span class="hljs-string">&quot;7&quot;</span>,<br>  <span class="hljs-string">&quot;8&quot;</span> =&gt; <span class="hljs-string">&quot;8&quot;</span>,<br>  <span class="hljs-string">&quot;9&quot;</span> =&gt; <span class="hljs-string">&quot;9&quot;</span>,<br>  <span class="hljs-string">&quot;0&quot;</span> =&gt; <span class="hljs-string">&quot;0&quot;</span><br>&#125;<br>result = input.each_line.map <span class="hljs-keyword">do</span> |<span class="hljs-params">line</span>|<br>  digits = line.match(<span class="hljs-regexp">/(<span class="hljs-subst">#&#123;replacement.keys.join(<span class="hljs-string">&#x27;|&#x27;</span>)&#125;</span>)/</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">#匹配hash的key，並將所有keys用|(or)隔開，一個符合即可，後面的0為從最左邊最一開始匹配</span><br>  first = replacement[digits[<span class="hljs-number">0</span>]]<br><br>  digits = line.reverse.match(<span class="hljs-regexp">/(<span class="hljs-subst">#&#123;replacement.keys.map(&amp;<span class="hljs-symbol">:reverse</span>).join(<span class="hljs-string">&#x27;|&#x27;</span>)&#125;</span>)/</span>, <span class="hljs-number">0</span>)<br>  last = replacement[digits[<span class="hljs-number">0</span>].reverse]<br><span class="hljs-comment">#使用反轉搜索最後一個數</span><br><br>  (first+last).to_i<br><span class="hljs-keyword">end</span>.sum<br><br>p result<br></code></pre></td></tr></table></figure>

<p>輸入結果最後拿到星星了(´∀&#96;)（有點心虛）</p>
<img src="/images/AOC/03.png">

<p>不過在挑戰的過程中，感覺自己又進步了一些ヾ(*´∇&#96;)ﾉ</p>
<p>最後真的很感謝<a href="https://www.youtube.com/@cjav_dev">CJ Avilla</a>大神能夠提供解法！</p>
<p>如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p><a href="https://www.youtube.com/watch?v=lrJfC2dF84k&list=PLS6F722u-R6KYlGyUv65EFpGKl2Esmurr&index=15">Match and Scan - Day 01 - Advent of Code 2023</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>AOC</tag>
        <tag>Advent of code</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails: MVC是什麼?</title>
    <url>/2023/12/02/MVC/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }

  .em-div2{
    border:2px #d4a373 solid;
    margin:5px;
    padding:10px 2px 2px 2px;
    border-style:dashed;
  }
</style>

<img src="/images/MVC/banner.png" alt="">

<h3 id="MVC-定義："><a href="#MVC-定義：" class="headerlink" title="MVC 定義："></a>MVC 定義：</h3><p>依據<a href="https://zh.wikipedia.org/zh-tw/MVC">維基百科</a>的介紹：</p>
<div class="em-div2">
MVC模式（Model–view–controller）是軟體工程中的一種軟體架構模式，
把軟體系統分為三個基本部分：模型（Model）、視圖（View）和控制器（Controller）。
</div>

<p>MVC 模式最早由 Trygve Reenskaug 在 1978 年提出，是全錄帕羅奧多研究中心（Xerox PARC）在 20 世紀 80 年代為程式語言 Smalltalk 發明的一種軟體架構。</p>
<p>我們今天使用的網站是很複雜的應用程序( ˘•ω•˘ )，為了簡化程式碼並使其更方便使用，許多工程師選擇使用<strong>MVC</strong>來佈局他們的專案。</p>
<p>將大型應用程式分解為較小的部分，再各自負責專門的事 o(<em>^▽^</em>)o</p>
<h2 id="MVC-各自負責什麼？"><a href="#MVC-各自負責什麼？" class="headerlink" title="MVC 各自負責什麼？"></a>MVC 各自負責什麼？</h2><p>理解完 MVC 的背景了，接下來看看，MVC 各自負責什麼工作內容：</p>
<ul>
<li>模型（Model） - 程式設計師編寫程式應有的功能（實現演算法等等）、資料庫專家進行資料管理和資料庫設計(可以實現具體的功能)。</li>
<li>視圖（View） - 介面設計人員進行圖形介面設計。</li>
<li>控制器（Controller）- 負責轉發請求，對請求進行處理。</li>
</ul>
<p>參考資料：<a href="https://zh.wikipedia.org/zh-tw/MVC">維基百科 MVC</a></p>
<h2 id="MVC-當前趨勢"><a href="#MVC-當前趨勢" class="headerlink" title="MVC 當前趨勢"></a>MVC 當前趨勢</h2><p>MVC 架構已經變得如此流行，以至於現在大多數流行的框架都遵循 MVC 設計模式來開發應用程式。</p>
<p>目前 MVC 設計模式的流行框架有： <img src="/images/MVC/mvcframwork2.png" alt=""></p>
<h2 id="Ruby-on-Rails-的-MVC-架構"><a href="#Ruby-on-Rails-的-MVC-架構" class="headerlink" title="Ruby on Rails 的 MVC 架構"></a>Ruby on Rails 的 MVC 架構</h2><p>看完了以上三項解釋，應該還是很難明白到底 MVC 的實際應用，以下將用 Ruby on Rails 裡的Ｍ運作流程，搭配圖片來講解 d(&#96;･∀･)b</p>
<p>可以透過以下圖片來理解： <img src="/images/MVC/01.png" alt=""></p>
<h3 id="1-Routes"><a href="#1-Routes" class="headerlink" title="1. Routes"></a>1. Routes</h3> <!-- <img src="/images/MVC/02.png" alt=""> -->

<p>當有使用者輸入網址，連到網站的時候，第一關會遇到的是 routes Rails 會根據使用者輸入的網址及參數，去尋找相對應 Controller 上的 Action。</p>
<h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2. Controller"></a>2. Controller</h3><!-- <img src="/images/MVC/03.png" alt=""> -->

<p>可以想像成控制處理中心 or 指揮官， Controller 會和 model 要資料、View 要畫面，最後提供給 routes，再讓使用者看到網頁畫面。 Controller 通常會有一個以上的 Action，這些 Action 就是 Ruby 裡的方法（method）。</p>
<h3 id="3-Model"><a href="#3-Model" class="headerlink" title="3. Model"></a>3. Model</h3><!-- <img src="/images/MVC/04.png" alt=""> -->

<p>Model 本身並不是資料庫，你可以把它想像成翻譯官，它可以幫你把你跟 Model 說的「人話」轉成資料庫看得懂的資料庫查詢語言（Structured Query Language，簡稱 SQL），透過 SQL，Model 可以跟資料庫取得你想要的資料。</p>
<h3 id="4-View"><a href="#4-View" class="headerlink" title="4. View"></a>4. View</h3><!-- <img src="/images/MVC/05.png" alt=""> -->

<p>View 為使用者最後看到的畫面，雖然 Controller&#x2F;Action 拿到資料了，但目前這包東西還沒美化、整理過，還不適合給使用者看，所以 Controller&#x2F;Action 還需要跟 View 借一下畫面，讓資料更適合使用者閱讀。</p>
<p>通常畫面的呈現會寫在這裡，使用的是<code>.html.erb</code>檔案。</p>
<p>詳細內容可以參考龍哥的<a href="https://railsbook.tw/chapters/10-mvc#mvc-flow">為你自己學 Ruby on Rails</a></p>
<hr>
<p>本篇文章是參考以下資料，透過自己繪圖+整理而成，如果有什麼問題歡迎與我討論！(<em>^▽^</em>)</p>
<div class="em-div2">
參考資料：

<p><a href="https://railsbook.tw/chapters/10-mvc#mvc-flow">為你自己學 Ruby on Rails</a></p>
<p><a href="https://zh.wikipedia.org/zh-tw/MVC">維基百科 MVC</a></p>
<p><a href="https://www.interviewbit.com/blog/mvc-architecture/">MVC Architecture – Detailed Explanation</a></p>
</div>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Rails</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails : ActiveStorage連線Amazon S3</title>
    <url>/2024/01/07/active-storage-amazon-s3/</url>
    <content><![CDATA[<img src="/images/active-storage-amazon-s3/01.avif">

<blockquote>
<p>圖片來源<a href="https://unsplash.com/photos/black-samsung-galaxy-smartphone-displaying-amazon-logo-rymh7EZPqRs">Usplash</a></p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>在使用Ruby on Rails製作網頁的時候，常常會使用Rails的 <a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Active Storage</a>來儲存圖片，<br>讓網頁內容更加豐富٩(●˙▿˙●)۶…⋆ฺ主要使用方法可以參考 <a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Rails Guide</a>的介紹</p>
<p>本篇主要介紹如何把Active Storage的資料儲存在Amazon S3，</p>
<p>因為網站常常有許多動態增長的檔案，最常見的就是使用者上傳的照片。<br>因為檔案很多很複雜，要處理這些檔案是一大難題。<br>我們可以利用上傳檔案到S3，來輕鬆的處理～<br>也能夠降低資料保存的風險（雞蛋不要放在同一個籃子的概念）</p>
<p>在找關於連接Amazon S3的資料時，其實花了一段時間，<br>這是目前覺得教學最詳細的是這個影片：<br><a href="https://www.youtube.com/watch?v=UOLpv2f8mz8">Build a Blog with Rails Part 17: Handling File Uploads with ActiveStorage &amp; Amazon S3</a></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/UOLpv2f8mz8?si=eEjG_z97PKTQvtWR" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>


<p>本篇文章也會參考此影片來編寫，好的就讓我們開始吧 (^・ω・^ )</p>
<ul>
<li><p>先到<a href="https://aws.amazon.com/tw/pm/serv-s3/">AWS S3</a>註冊帳號</p>
</li>
<li><p>接著到S3 創建存放資料的地方，點選Create Bucket</p>
<img src="/images/active-storage-amazon-s3/03.png">
</li>
<li><p>選擇Bucket的所在地＆Bucket Name</p>
<img src="/images/active-storage-amazon-s3/04.png"></li>
</ul>
<p>依個人喜好而定，通常選離大部分使用者較近的位置，讀取速度會快一咪咪</p>
<ul>
<li><p>ACLs enabled<br>這個視需求而定而勾選，意思是說此Bucket的物件可以被其他 AWS 帳戶所擁有，並且可以透過 ACLs 來指定對該Bucket及其內部物件的訪問權限。<br>這意味著可以使用 ACLs 來管理誰可以讀取、寫入或刪除該儲存桶中的檔案，以及這些權限的具體配置。</p>
</li>
<li><p>存取權限 Access Settings</p>
</li>
</ul>
<img src="/images/active-storage-amazon-s3/05.png">

<p>這部分是寫入資料的還有訪問的權限，因為能夠開放讓使用者上傳圖片，<br>所以我只勾選了下面兩項。</p>
<ul>
<li>設定CORS<br>在Bucket的頁面點選Permission拉到最下面<br>可以直接複製Rails Guids上面的資料，並將網址改成本次測試的網址，<br>如果你有正式發佈的網址，也能講網址填寫在這裡<img src="/images/active-storage-amazon-s3/CORS.png"></li>
<li>接著到<a href="https://aws.amazon.com/tw/iam/">I AM</a> 建造使用者並新增Policy，為了設置訪問的權限及得到密鑰<img src="/images/active-storage-amazon-s3/07.png"></li>
</ul>
<p>選擇S3，並在下面勾選</p>
<ul>
<li>List : ListBucket</li>
<li>Read: GetObj</li>
<li>Write: PutObj,DeleteObj</li>
<li>Permission management: PutObjAcl</li>
</ul>
<p>這部分是參考<a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Rails Guide- Active Storage Overview</a>的建議</p>
<img src="/images/active-storage-amazon-s3/08.png">

<p>Resource &gt; Bucket 點選Add ARNs，填寫你剛剛創建的Bucket Name，讓Policy發揮效用<br>這邊我填寫兩個，除了這個bucket還有這個bucket之下的檔案都發揮效用</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">adora-bucket<br><span class="hljs-strong">*adora-bucket/*</span><br></code></pre></td></tr></table></figure>

<p>接著下一頁填寫完policy名稱，按create policy，Policy就設定完成了！！🤩</p>
<ul>
<li>創建使用者，並選擇剛剛選好的Policy</li>
<li>進入使用者頁面，點選Security credential，創建Access Key，讓我們的網站能夠透過此密鑰上傳圖片到S3</li>
<li>選擇可以在AWS以外使用<img src="/images/active-storage-amazon-s3/09.png"></li>
<li>進入金鑰頁面</li>
</ul>
<p>把金鑰儲存起來（id和secret_key都要），之後就不能訪問這個頁面，<br>所以很重要一定要存，接著前置步驟就大公告成了🤗</p>
<ul>
<li><p>回到我們的專案，將storage.yml內，關於amazon的註解解掉，並輸入你的資料</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#storage.yml</span><br><span class="hljs-symbol">amazon:</span><br>  <span class="hljs-symbol">service:</span> <span class="hljs-variable constant_">S3</span><br>  <span class="hljs-symbol">access_key_id:</span> &lt;%= <span class="hljs-title class_">Rails</span>.application.credentials.dig(<span class="hljs-symbol">:aws</span>, <span class="hljs-symbol">:access_key_id</span>) %&gt;<br>  <span class="hljs-symbol">secret_access_key:</span> &lt;%= <span class="hljs-title class_">Rails</span>.application.credentials.dig(<span class="hljs-symbol">:aws</span>, <span class="hljs-symbol">:secret_access_key</span>) %&gt;<br>  <span class="hljs-symbol">region:</span> us-east-<span class="hljs-number">1</span>&lt;替換成你的區域&gt;<br>  <span class="hljs-symbol">bucket:</span> adora-bucket&lt;替換成的你的名稱&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>接著在終端機輸入</p>
</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">EDITOR</span>=<span class="hljs-string">&quot;code --wait&quot;</span> rails <span class="hljs-symbol">credentials:</span>edit<br></code></pre></td></tr></table></figure>

<p>會開啟一個檔案檔名為crendentials.yml，可以將密鑰寫在這裡，必須要有相對應的master.key才能開啟這個檔案，github設定不會將master.key上傳～如果這個更動要分享給組員，將master.key私下傳給團隊成員，請他放在config資料夾底下即可</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">aws:</span><br>  <span class="hljs-symbol">access_key_id:</span> &lt;你的key_id&gt;<br>  <span class="hljs-symbol">secret_access_key:</span> &lt;你的密鑰&gt;<br></code></pre></td></tr></table></figure>

<ul>
<li>#development.rb設定將active_storage從:local改為:amazon</li>
</ul>
<p>(如果要在正式環境使用，則需要更改production.rb)</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#development.rb</span><br>config.active_storage.service = <span class="hljs-symbol">:amazon</span><br></code></pre></td></tr></table></figure>

<p>下載AWS S3的Gem</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#gemfile</span><br>gem <span class="hljs-string">&quot;aws-sdk-s3&quot;</span>, <span class="hljs-symbol">require:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<p>執行bundle i</p>
<p>這樣就大功告成了！！！<br>試著上傳圖片，可以看到後台顯示照片傳到s3</p>
<img src="/images/active-storage-amazon-s3/12.png">

<p>看s3的後台也看到圖片檔案<br><img src="/images/active-storage-amazon-s3/11.png"></p>
<p>終於完成這篇了⸍⚙̥ꇴ⚙̥⸌應該是我史上圖片最多的一篇，<br>結果在上傳之後14張照片就消失了( ͒˃⌂˂ ͒)，<br>原來我不小心放在Public資料夾，而且下了Hexo cl指令  ◴_◶<br>可能老天爺想要我多熟練一點點，只好認命重新截圖…也刪除了一些不必要的圖片</p>
<p>最後希望這篇文章有幫助到你！有任何問題歡迎回覆，<br>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p><a href="https://www.youtube.com/watch?v=UOLpv2f8mz8">Build a Blog with Rails Part 17: Handling File Uploads with ActiveStorage &amp; Amazon S3</a></p>
</blockquote>
<blockquote>
<p><a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Rails Guide- Active Storage Overview</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Ruby on Rails</tag>
        <tag>active stroage</tag>
        <tag>amazon</tag>
        <tag>s3</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript: defer vs async</title>
    <url>/2023/11/18/async-vs-defer/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/async_vs_defer/title.png">

<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？"><a href="#瀏覽器是怎麼繪轉譯頁的呢？" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><img src="/images/async_vs_defer/1webdev.png">

<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程："><a href="#網頁的轉譯流程：" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋："><a href="#流程解釋：" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？"><a href="#JavaScript-是怎麼被引入到網頁呢？" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下： <img src="/images/async_vs_defer/2rendering-time.png"></p>
<p>這會造成什麼樣的問題？因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ 這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行"><a href="#將放在前一行" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><img src="/images/async_vs_defer/3rendering-time-endofbody.png">

<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong> 使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解： <img src="/images/async_vs_defer/4rendering-time-async.png"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer"><a href="#什麼是-defer" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<img src="/images/async_vs_defer/5rendering-time-defer.png">

<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer"><a href="#放在前-v-s-Async-v-s-Defer" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清： <img src="/images/async_vs_defer/6differ-table.png"></p>
<p>本篇文章是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum：Async vs Defer</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis：script 標籤應該放在 HTML 的什麼位置？link 呢？</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis：script 的 async 與 defer 有什麼不同？</a></p>
</blockquote>
<blockquote>
<p><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender：[JS] Async, defer attributes</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>defer</tag>
        <tag>async</tag>
        <tag>Web</tag>
        <tag>rendering</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript: 變數提升 hoisting 到底是什麼？</title>
    <url>/2023/11/18/hoisting/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }

  .em-div2{
    border:2px #d4a373 solid;
    margin:5px;
    padding:10px 2px 2px 2px;
    border-style:dashed;
  }

</style>

<img src="/images/hoisting/banner.png">
之前在<a href="https://adora-xu.com/2023/11/15/var-let-const/">使用var, let, const宣告究竟差在哪呢？</a>，裡面有談到變數提升(Hoisting)。

<p>變數提升(hoisting)是在 ECMAScript® 2015 Language Specification 裡面找不到的專有名詞，<br>它是一種釐清 JaveScript 在執行階段內文如何運行的思路（尤其是在創建和執行階段）。</p>
<p>究竟hoisting 是什麼呢？讓我們來一探究竟 ٩(๑❛ᴗ❛๑)۶</p>
<p>首先先來看看<a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN</a>解釋<strong>hoisting</strong>的重點</p>
<p>這段話裡面有幾個重點：</p>
<div class="em-div2">

<ol>
<li><p>hosting 是一種釐清 JaveScript 在執行階段內文<code>如何運行的思路</code>（尤其是在創建和執行階段）。</p>
</li>
<li><p><code>並非</code>單純地將變數和函式宣告，移動到程式的區塊頂端</p>
</li>
<li><p>變數和函數的宣告會在<code>編譯階段就被放入記憶體</code>，但實際位置和程式碼中完全一樣。</p>
</div></li>
</ol>
<h2 id="JavaScript-執行過程的兩大階段"><a href="#JavaScript-執行過程的兩大階段" class="headerlink" title="JavaScript 執行過程的兩大階段"></a>JavaScript 執行過程的兩大階段</h2><p>要理解 Hoisting，首先先知道 JavaScript 執行兩大階段：</p>
<img src="/images/hoisting/01.png">

<div class="em-div2">

<ul>
<li><p>Creation Phase</p>
<ul>
<li>註冊名稱(Declaration)</li>
<li>初始化（Initialisation）</li>
</ul>
</li>
<li><p>Execution Phase</p>
<ul>
<li>賦值(Assignment) &amp; 執行</li>
</ul>
</li>
</ul>
</div>

<hr>
<p>這樣就能夠很清楚解釋以下例子：</p>
<img src="/images/hoisting/02.png">

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>

<div class="em-div">
undefined
</div>

<p>解釋：</p>
<ul>
<li>在 Creation Phase，會進行變數的註冊名稱和 undefined 的初始化。</li>
<li>在 Execution Phase，當程式碼逐行執行時，undefined 被印出。然後賦值 a &#x3D; 1 。</li>
</ul>
<h2 id="let-const-的變數提升"><a href="#let-const-的變數提升" class="headerlink" title="let &amp; const 的變數提升"></a>let &amp; const 的變數提升</h2><p>但這個情況在 let 宣告和 const 宣告時，卻變得不一樣：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>

<div class="em-div">
ReferenceError: Cannot access 'a' before initialization
</div>
備註：const宣告的結果和let一樣

<p>這時我們來看看 let &amp; const 宣告時，JS 的兩階段圖釋： <img src="/images/hoisting/03.png"></p>
<p>解釋：</p>
<ul>
<li>在使用 let &amp; const 宣告的變數直到初始化前，都會將變數存在 TDZ 暫時死區中</li>
<li>如果在初始化＆賦值前取得此變數時，便會收到錯誤</li>
</ul>
<p>透過以上圖片解釋，應該更好地理解之前提到的狀況 ٩(●˙▿˙●)۶，本篇文章都是參考以下資料整理+自己繪圖而成，如果有任何想法，歡迎留言給我！</p>
<div class="em-div2">
參考資料：

<p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN - Hoisting</a></p>
<p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/let">MDN - let</a></p>
<p><a href="https://www.scaler.com/topics/hoisting-in-javascript/">Hoisting in Javascript</a></p>
<p><a href="https://www.youtube.com/watch?v=EvfRXyKa_GI">JavaScript Tutorial #20 | Variable &amp; Function Hoisting in JavaScript </a></p>
</div>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>hoisting</tag>
        <tag>變數提升</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript: 究竟什麼是 Event Loop？</title>
    <url>/2023/11/08/javascript-event-loop/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/eventLoop/blocks.jpg">
JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣

<p>其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。</p>
<h3 id="Call-Stack-呼叫堆疊"><a href="#Call-Stack-呼叫堆疊" class="headerlink" title="Call Stack 呼叫堆疊"></a>Call Stack 呼叫堆疊</h3><img src="/images/eventLoop/callstack.png">

<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

<h3 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h3><img src="/images/eventLoop/webapis.png">

<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

<h3 id="Event-Queue-事件佇列"><a href="#Event-Queue-事件佇列" class="headerlink" title="Event Queue 事件佇列"></a>Event Queue 事件佇列</h3><img src="/images/eventLoop/eventque.png">

<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

<h3 id="Event-Loop-事件循環"><a href="#Event-Loop-事件循環" class="headerlink" title="Event Loop 事件循環"></a>Event Loop 事件循環</h3><img src="/images/eventLoop/eventloop.png">

<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

<h3 id="範例示意"><a href="#範例示意" class="headerlink" title="範例示意"></a>範例示意</h3><p>當然，如果僅以上介紹，無法完整了解，這班準備了幾個程式碼及搭配<a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>，讓讀者能夠更了解其運行步驟</p>
<p>可以按此<a href="http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>了解 JavaScript 運行以上程式的步驟</p>
<h3 id="範例示範"><a href="#範例示範" class="headerlink" title="範例示範"></a>範例示範</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2"><a href="#範例示範-2" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<img src="/images/eventLoop/pasted-0.png">

<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop) <a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript? <a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Event Loop</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails: 串接LINE Pay API v3</title>
    <url>/2024/01/21/linepay/</url>
    <content><![CDATA[<style>
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 solid;
margin:5px;
padding:10px 2px 2px 2px;
border-style:dashed;
}
</style>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/line-pay/1.jpg">

<blockquote>
<p>圖片來源: <a href="https://pay.line.me/portal/tw/customer/press/98766?categoryId=">LINE Pay新聞</a></p>
</blockquote>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>今天來使用Ruby on Rails串接LINE Pay ฅ^•ﻌ•^ฅ</p>
<p>首先需要到<a href="https://pay.line.me/th/developers/techsupport/sandbox/creation?locale=zh_TW">LINE Pay  SandBox</a>申請一個測試帳號</p>
<img src="/images/LINE-Pay/2.png">

<p>接著到信箱收LINE Pay 發的帳號密碼，登入可以從這裡登入：<a href="https://pay.line.me/tw/developers/techsupport/sandbox/testflow?locale=zh_TW">LINE Pay測試流程</a></p>
<p>接著可以到<a href="https://sandbox-pay.line.me/zh_TW/payment/interlockKey">LINE Pay 測試環境</a>，拿所需的Channel ID ＆ Channel Secret Key</p>
<img src="/images/LINE-Pay/3.png">

<p>然後把<a href="https://pay.line.me/tw/developers/apis/onlineApis?locale=zh_TW">LINE Pay API</a>技術手冊拿緊緊，因為接下來會很需要他(ㆆᴗㆆ)</p>
<p>我先使用credientail將所需要的資料&amp;機密資料放進去</p>
<p><code>EDITOR=&quot;code --wait&quot; rails credentials:edit</code></p>
<ul>
<li>ENV</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">line:</span><br>  <span class="hljs-variable constant_">CHANNEL_ID</span>: &lt;your channel id&gt;<br>  <span class="hljs-variable constant_">SECRET_KEY</span>: &lt;your secret key&gt;<br>  <span class="hljs-variable constant_">LINEPAY_SITE</span>: <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/sandbox-api-pay.line.me</span><br><span class="hljs-regexp">  CONFIRM_URL: /orders</span><span class="hljs-regexp">/confirm</span><br><span class="hljs-regexp">  CANCEL_URL: /orders</span><span class="hljs-regexp">/cancel</span><br><span class="hljs-regexp">  DOMAIN_NAME: http:/</span><span class="hljs-regexp">/127.0.0.1:3000</span><br><span class="hljs-regexp">  VERSION: v3</span><br></code></pre></td></tr></table></figure>

<p>CHANNEL_ID ＆ SECRET_KEY 要替換成剛剛從LINE Pay SANBOX查到的ID和KEY</p>
<p>寫在credential的資料有幾個好處：</p>
<ol>
<li>高機密性：必須要有對應的key才能夠打開，此key不會跟著上傳GitHub</li>
<li>修改方便：金流的版號會不斷更新（這次是接v3），如果之後更新從crediential改就好</li>
<li>確保正確性：串接金流只要有一個東西錯誤就會失敗，將資料集中寫在這裡，確認正確性時會比較方便</li>
</ol>
<p>我使用gem <a href="https://rubygems.org/gems/faraday/versions/2.7.11?locale=zh-TW">faraday</a>向LINE Pay 發送請求，所以這邊先安裝</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">bundle add <span class="hljs-string">&quot;faraday&quot;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">bundle i<br></code></pre></td></tr></table></figure>

<p>建一個專案來做LINE Pay 串接٩(●˙▿˙●)۶…⋆ฺ</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails new project_name<br><span class="hljs-variable">$ </span>rails g scaffold product name <span class="hljs-symbol">price:</span>integer<br><span class="hljs-variable">$ </span>rails g model order<br><span class="hljs-variable">$ </span>rails g controller orders<br><span class="hljs-comment">#seed</span><br><span class="hljs-title class_">Product</span>.create(<br>  <span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;測試商品&quot;</span>,<br>  <span class="hljs-symbol">price:</span> <span class="hljs-number">500</span><br>)<br><br><span class="hljs-variable">$ </span>rails <span class="hljs-symbol">db:</span>create <span class="hljs-symbol">db:</span>migrate <span class="hljs-symbol">db:</span>seed<br></code></pre></td></tr></table></figure>

<p>本次要做：LINE Pay 的付款(create) ＆ LINE Pay 回覆的付款結果(confirm)</p>
<p>預計會寫在orders裡面，所以routes可以這樣寫：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#routes.rb</span><br>root <span class="hljs-string">&quot;products#index&quot;</span><br><br>  resources <span class="hljs-symbol">:products</span><br><br>  resources <span class="hljs-symbol">:orders</span> <span class="hljs-keyword">do</span><br>    collection <span class="hljs-keyword">do</span><br>      get <span class="hljs-symbol">:confirm</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<p>首頁建立一個送出資料的表單</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#index.html.erb</span><br>&lt;%= form_tag orders_path, <span class="hljs-symbol">method:</span> <span class="hljs-symbol">:post</span>, <span class="hljs-symbol">data:</span> &#123; <span class="hljs-symbol">turbo:</span> <span class="hljs-literal">false</span> &#125; <span class="hljs-keyword">do</span> %&gt;<br>    &lt;%= hidden_field_tag(<span class="hljs-symbol">:name</span>, <span class="hljs-variable">@product</span>.name) %&gt;<br>    &lt;%= hidden_field_tag(<span class="hljs-symbol">:price</span>, <span class="hljs-variable">@product</span>.price) %&gt;<br>    &lt;%= select_tag(<span class="hljs-symbol">:quantity</span>, options_for_select([<span class="hljs-number">1</span>])) %&gt;<br>    &lt;%= submit_tag <span class="hljs-string">&quot;送出&quot;</span>, <span class="hljs-symbol">name:</span> <span class="hljs-literal">nil</span>, <span class="hljs-symbol">class:</span> <span class="hljs-string">&quot;btn btn-primary&quot;</span> %&gt;<br>&lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure>

<p>前置作業都做好了，可以開始串啦！</p>
<p>想要串接LINE Pay 前，要先了解LINE Pay 那邊會需要什麼資料</p>
<p>可以先看到手冊裡LINE Pay request的部分，Requirement Y的部分都是LINE Pay 需要的</p>
<p>簡單來說，會需要head &amp; body（好像廢話），但裡面的內容格式定義不同</p>
<p>這是Head:</p>
<img src="/images/line-pay/4.jpg">

<p>這個是Body:</p>
<img src="/images/LINE-Pay/5.png">


<p>看完這麼多東西一定頭昏眼花，沒關係我們直接動手做ʕ •̀ o •́ ʔ</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#orders_controller</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span><br>    <span class="hljs-comment"># body</span><br>    order_id = <span class="hljs-string">&quot;order<span class="hljs-subst">#&#123;<span class="hljs-title class_">Time</span>.now.strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>)&#125;</span>&quot;</span><br>    packages_id = <span class="hljs-string">&quot;package<span class="hljs-subst">#&#123;<span class="hljs-title class_">SecureRandom</span>.uuid&#125;</span>&quot;</span><br>    amount = params[<span class="hljs-symbol">:quantity</span>].to_i * params[<span class="hljs-symbol">:price</span>].to_i<br><br>    body = &#123; <span class="hljs-symbol">amount:</span>,<br>             <span class="hljs-symbol">currency:</span> <span class="hljs-string">&#x27;TWD&#x27;</span>,<br>             <span class="hljs-symbol">orderId:</span> order_id,<br>             <span class="hljs-symbol">packages:</span> [&#123; <span class="hljs-symbol">id:</span> packages_id,<br>                          <span class="hljs-symbol">amount:</span>,<br>                          <span class="hljs-symbol">products:</span> [&#123;<br>                            <span class="hljs-symbol">name:</span> params[<span class="hljs-symbol">:name</span>],<br>                            <span class="hljs-symbol">quantity:</span> params[<span class="hljs-symbol">:quantity</span>].to_i,<br>                            <span class="hljs-symbol">price:</span> params[<span class="hljs-symbol">:price</span>].to_i,<br>                          &#125;] &#125;],<br>             <span class="hljs-symbol">redirectUrls:</span> &#123; <span class="hljs-symbol">confirmUrl:</span> <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">DOMAIN_NAME</span>&#125;</span><span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">CONFIRM_URL</span>&#125;</span>&quot;</span>,<br>                             <span class="hljs-symbol">cancelUrl:</span> <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">DOMAIN_NAME</span>&#125;</span><span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">CANCEL_URL</span>&#125;</span>&quot;</span>&#125; &#125;<br>    <span class="hljs-comment"># header</span><br>    signature_uri = <span class="hljs-string">&quot;/<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">VERSION</span>&#125;</span>/payments/request&quot;</span><br>    create_header(signature_uri, body)<br>    conn = <span class="hljs-title class_">Faraday</span>.new(<br>      <span class="hljs-symbol">url:</span> <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">LINEPAY_SITE</span>&#125;</span>/<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">VERSION</span>&#125;</span>/payments/request&quot;</span>,<br>      <span class="hljs-symbol">headers:</span> <span class="hljs-variable">@header</span><br>    )<br><br>    response = conn.post <span class="hljs-keyword">do</span> |<span class="hljs-params">req</span>|<br>      req.body = body.to_json<br>    <span class="hljs-keyword">end</span><br>    parsed_response = <span class="hljs-variable constant_">JSON</span>.parse(response.body)<br>    <span class="hljs-keyword">if</span> parsed_response[<span class="hljs-string">&#x27;returnCode&#x27;</span>] == <span class="hljs-string">&#x27;0000&#x27;</span><br>      redirect_to parsed_response[<span class="hljs-string">&#x27;info&#x27;</span>][<span class="hljs-string">&#x27;paymentUrl&#x27;</span>][<span class="hljs-string">&#x27;web&#x27;</span>], <span class="hljs-symbol">allow_other_host:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">else</span><br>      redirect_to order_path(<span class="hljs-variable">@order</span>), <span class="hljs-symbol">notice:</span> t(<span class="hljs-symbol">:payment_failed</span>, <span class="hljs-symbol">scope:</span> %i[message])<br>      puts parsed_response<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span> <br></code></pre></td></tr></table></figure>

<p>最一開始做body，其實就是把LINE Pay 技術文件裡，body有打勾為必需的項目，</p>
<p>使用他指定的格式組合，如果在一般專案order model的話，也能夠從order裡面撈資料</p>
<p>因為request和confirm的<code>signature_uri</code> 和 <code>body</code>  不同，</p>
<p>所以我沒有特別拉出去做一個方法，而是在create, confirm內個別組合，</p>
<p>然後傳出給create_header</p>
<h2 id="creat-header"><a href="#creat-header" class="headerlink" title="creat_header"></a>creat_header</h2><p>建立一個 HTTP 請求的標頭（header），以便進行身份驗證和授權。</p>
<p>因為confirm也會需要再製作一次，所以我特地拉出來另一個方法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#orders_controller</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_header</span>(<span class="hljs-params">signature_uri, body</span>)<br>    nonce = <span class="hljs-title class_">SecureRandom</span>.uuid<br>    secret = <span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">SECRET_KEY</span><br>    message = <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;secret&#125;</span><span class="hljs-subst">#&#123;signature_uri&#125;</span><span class="hljs-subst">#&#123;body.to_json&#125;</span><span class="hljs-subst">#&#123;nonce&#125;</span>&quot;</span><br>    hash = <span class="hljs-title class_">Open</span>SSL::<span class="hljs-variable constant_">HMAC</span>.digest(<span class="hljs-title class_">OpenSSL::Digest</span>.new(<span class="hljs-string">&#x27;sha256&#x27;</span>), secret, message)<br>    <span class="hljs-variable">@signature</span> = <span class="hljs-title class_">Base64</span>.strict_encode64(hash)<br>    <span class="hljs-variable">@header</span> = &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>                <span class="hljs-string">&#x27;X-LINE-ChannelId&#x27;</span>: <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line[<span class="hljs-symbol">:CHANNEL_ID</span>]&#125;</span>&quot;</span>, <span class="hljs-comment"># rubocop:disable Style/RedundantInterpolation</span><br>                <span class="hljs-string">&#x27;X-LINE-Authorization-Nonce&#x27;</span>: nonce,<br>                <span class="hljs-string">&#x27;X-LINE-Authorization&#x27;</span>: <span class="hljs-variable">@signature</span> &#125;<br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<p>其實這段做的就是手冊裡的這個步驟：</p>
<div class="em-div2">

<p><strong>HTTP Method : POST</strong></p>
<p>Signature &#x3D; Base64(HMAC-SHA256(Your ChannelSecret, (Your ChannelSecret + URI + RequestBody + nonce)))</p>
</div>

<p>這邊不用另外匯入加密套件，使用Ruby on Rails內建的即可</p>
<p>另外LINE Pay  v3因為要防止惡意攻擊，所以要求每次送header要有一個唯一的 nonce，我使用 <code>SecureRandom.uuid</code> 生成。</p>
<p>加密的部分：</p>
<ul>
<li>透過OpenSSL ，使用 HMAC和 SHA-256 加密算法，得到 <code>hash</code>。</li>
<li>使用 Base64 加密方式將 <code>hash</code> 轉換成字符串，得到 <code>@signature</code>。</li>
</ul>
<p>上面兩步做完，就可以成功跳轉到LINE PAY頁面</p>
<img src="/images/LINE-Pay/6.png">


<p>使用LINE Pay 掃描完成就會跳轉到確認頁面</p>
<p>確認頁面同時也要使用POST方法，串接confirmAPI，</p>
<p>confirm要求的body會比較少，但header的要求是一樣的，</p>
<p>所以在這裡一樣呼叫create_header，</p>
<p>因為本次是demo，所以金額固定為500，</p>
<p>如果是在專案可以利用上一步request成功後</p>
<p>LINE Pay 回傳的<code>transactionId</code> ,<code>orderId</code>來找該筆訂單</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">confirm</span> <span class="hljs-comment"># rubocop:disable Metrics/MethodLength</span><br>    transaction_id = params[<span class="hljs-symbol">:transactionId</span>]<br>    amount = <span class="hljs-number">500</span>.to_i<br><br>    body = &#123;<br>      <span class="hljs-symbol">amount:</span>,<br>      <span class="hljs-symbol">currency:</span> <span class="hljs-string">&#x27;TWD&#x27;</span><br>    &#125;<br>    signature_uri = <span class="hljs-string">&quot;/<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">VERSION</span>&#125;</span>/payments/<span class="hljs-subst">#&#123;transaction_id&#125;</span>/confirm&quot;</span><br>    create_header(signature_uri, body)<br><br>    conn = <span class="hljs-title class_">Faraday</span>.new(<br>      <span class="hljs-symbol">url:</span> <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;<span class="hljs-title class_">Rails</span>.application.credentials.line.<span class="hljs-variable constant_">LINEPAY_SITE</span>&#125;</span>/v3/payments/<span class="hljs-subst">#&#123;transaction_id&#125;</span>/confirm&quot;</span>,<br>      <span class="hljs-symbol">headers:</span> <span class="hljs-variable">@header</span><br>    )<br><br>    response = conn.post <span class="hljs-keyword">do</span> |<span class="hljs-params">req</span>|<br>      req.body = body.to_json<br>    <span class="hljs-keyword">end</span><br>    parsed_response = <span class="hljs-variable constant_">JSON</span>.parse(response.body)<br>    puts <span class="hljs-string">&quot;Confirm Response: <span class="hljs-subst">#&#123;response.body&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">if</span> parsed_response[<span class="hljs-string">&#x27;returnCode&#x27;</span>] == <span class="hljs-string">&#x27;0000&#x27;</span><br>      redirect_to root_path, <span class="hljs-symbol">notice:</span> <span class="hljs-string">&#x27;付款成功&#x27;</span><br>    <span class="hljs-keyword">else</span><br>      redirect_to root_path, <span class="hljs-symbol">notice:</span> <span class="hljs-string">&#x27;付款失敗&#x27;</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<p>接著再重新測試，按送出後，會到LINE Pay 付款頁</p>
<img src="/images/LINE-Pay/7.png">

<p>掃描成功案付款後，就會到付款結果頁：</p>
<img src="/images/LINE-Pay/8.png">

<p>LINE Pay 測試後台也會出現資料</p>
<img src="/images/LINE-Pay/9.png">


<p>完成啦٩(●˙▿˙●)۶ 因為是第一次串LINE Pay ，</p>
<p>所以來來回回確認了好幾次資料，</p>
<p>因為只要有一個地方錯誤就會失敗，找得眼睛都花了(✖﹏✖)</p>
<p>這篇內容主要以LINE Pay 官方技術文件還有以下參考資料生出來的٩(๑❛ᴗ❛๑)۶</p>
<p>如果有需要更正的地方歡迎指教！</p>
<p>如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p><a href="https://pay.line.me/th/developers/apis/onlineApis?locale=zh_TW">LINE Pay Developers APIs</a></p>
</blockquote>
<blockquote>
<p><a href="https://github.com/lostisland/faraday">faraday</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=nEjVIeDE-Ro">金流自己串，使用 Node.js 串接 LINE Pay</a></p>
</blockquote>
<blockquote>
<p><a href="https://ithelp.ithome.com.tw/articles/10273803">D-2.Line_pay_api 串接(三) Rails 串接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
        <tag>Ruby on Rails</tag>
        <tag>line pay</tag>
        <tag>API</tag>
        <tag>line pay API</tag>
        <tag>line pay v3</tag>
        <tag>v3</tag>
        <tag>faraday</tag>
        <tag>金流</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails: 用Devise10分鐘製作管理者後台版面</title>
    <url>/2023/12/24/rails-admin-layout-devise/</url>
    <content><![CDATA[<style>
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 solid;
margin:5px;
padding:10px 2px 2px 2px;
border-style:dashed;
}

.image-container {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 陰影效果 */
  border-radius: 10px; /* 圓角效果 */
  overflow: hidden; /* 超出部分隱藏 */
  margin: 5px; /* 留白效果 */
}
</style>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><div class="image-container">
<img src="/images/rails_admin_layout_devise/banner.png">
</div>

<p>這篇是個實作範例 ٩(●˙▿˙●)۶…⋆ฺ</p>
<p>主要內容都是參考以下影片而成，如果要了解更多可以看：</p>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=SxwFyK9OtfY">Layouts For Admin Users with Devise in Ruby on Rails 7</a></p>
</blockquote>
<p>今天使用Rails來的<a href="https://rubygems.org/gems/devise/versions/4.2.0?locale=zh-TW">Devise</a>套件來製作管理者後台版面</p>
<p>以下為實作步驟：</p>
<ul>
<li>new一個新專案，我名稱設為blog，也可以設定別的</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails new blog<br></code></pre></td></tr></table></figure>

<ul>
<li>在Gemfile資料夾安裝devise，並執行<code>bundle install</code></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#Gemfile</span><br>gem <span class="hljs-string">&#x27;devise&#x27;</span>, <span class="hljs-string">&#x27;~&gt; 4.2&#x27;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>bundle install<br></code></pre></td></tr></table></figure>

<ul>
<li>新增pages_controller＆home.html.erb</li>
</ul>
<p>這裡也可以設定別的主題，只不過為了示範所以選擇這個，<br><img src="/images/rails_admin_layout_devise/02.png"><br>這個指令會生出Pages的controller，裡面有home方法，view有home.html.erb頁面，routes也會幫忙長好pages&#x2F;home，蠻方便的٩(๑❛ᴗ❛๑)۶</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g controller pages home<br></code></pre></td></tr></table></figure>

<ul>
<li>利用scaffold做CRUD的流程</li>
</ul>
<p>用scaffold可以省掉好多步驟(´∀&#96;)懶人救星</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g scaffold post title <span class="hljs-symbol">body:</span>text<br></code></pre></td></tr></table></figure>
<div class="image-container">
<img src="/images/rails_admin_layout_devise/01.png">
</div>

<ul>
<li>設定routes</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#routes.rb</span><br>root <span class="hljs-string">&#x27;pages#home&#x27;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>安裝Devise &amp; 生成使用者</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g <span class="hljs-symbol">devise:</span>install<br></code></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g devise user<br></code></pre></td></tr></table></figure>

<p>devise會自動幫你增加檔案，真的很方便</p>
<ul>
<li>生一個migration，增加role欄位到User資料表</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g migration <span class="hljs-title class_">AddRoleToUsers</span> <span class="hljs-symbol">role:</span>integer<br></code></pre></td></tr></table></figure>

<ul>
<li>到User model增加角色，其中角色的名稱都可以自己定義，我使用admin</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#user.rb</span><br>enum <span class="hljs-symbol">role:</span>[<span class="hljs-symbol">:general</span>, <span class="hljs-symbol">:admin</span>]<br></code></pre></td></tr></table></figure>

<ul>
<li>接著就可以到application_controller.rb，設置判斷使用者登入的layout頁面的<code>set_layout</code>方法</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#controller&gt;application_controller</span><br>layout <span class="hljs-symbol">:set_layout</span> <span class="hljs-comment"># 設置判斷登入的使用者layout頁面</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_layout</span><br>    <span class="hljs-keyword">if</span> current_user&amp;.admin?<br>      <span class="hljs-string">&#x27;admin&#x27;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-string">&#x27;application&#x27;</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<p><code>current_user&amp;.admin?</code></p>
<p>這行原本是這樣寫：<code>if current_user &amp;&amp; current_user.admin == true</code></p>
<p>可以用 &amp;. 簡化</p>
<p>如果current_user存在（也就是有登入）以及 登入的角色是admin的話，layout就使用admin</p>
<p>如果不是的話， layout就使用預設導入application</p>
<ul>
<li>接著到layout資料夾下，手動新增一個admin.html.erb，內容可以隨自己喜好調整</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#views&gt;layout</span><br>新增 <span class="hljs-comment">#admin.html.erb</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;<span class="hljs-title class_">Blog</span>&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br><span class="hljs-regexp">    &lt;%= csrf_meta_tags %&gt;</span><br><span class="hljs-regexp">    &lt;%= csp_meta_tag %&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">    &lt;%= stylesheet_link_tag &quot;application&quot;, &quot;data-turbo-track&quot;: &quot;reload&quot; %&gt;</span><br><span class="hljs-regexp">    &lt;%= javascript_importmap_tags %&gt;</span><br><span class="hljs-regexp">  &lt;/head</span>&gt;<br><br>  &lt;body&gt;<br>    &lt;h2&gt;此為管理者介面&lt;<span class="hljs-regexp">/h2&gt;</span><br><span class="hljs-regexp">    &lt;%= yield %&gt;</span><br><span class="hljs-regexp">  &lt;/body</span>&gt;<br>&lt;<span class="hljs-regexp">/html&gt;</span><br></code></pre></td></tr></table></figure>

<p>接著可以到home.html.erb頁面，寫跳轉的判斷</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#home.html.erb</span><br>      &lt;%<span class="hljs-comment">#是否轉為店家後台判斷%&gt;</span><br>      &lt;% <span class="hljs-keyword">if</span> current_user %&gt;<br>        &lt;%= current_user.role %&gt;<br>          &lt;%= link_to <span class="hljs-string">&quot;logout&quot;</span>, destroy_user_session_path, <span class="hljs-symbol">method:</span> <span class="hljs-symbol">:delete</span>, <span class="hljs-symbol">data:</span> &#123; <span class="hljs-symbol">turbo_method:</span> <span class="hljs-symbol">:delete</span>&#125; %&gt;<br>      &lt;% <span class="hljs-keyword">else</span> %&gt;<br>          &lt;%= link_to <span class="hljs-string">&quot;log_in&quot;</span>, new_user_session_path %&gt;<br>      &lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure>

<p>這個寫的地方可以自由選擇，如果要做個網站有很多頁面的話，</p>
<p>我也有嘗試放在_navbar.html.bar，讓整個網頁都可以套用此設定</p>
<p>接著就大功告成了！！</p>
<p>這是剛剛步驟做出的首頁</p>
<div class="image-container">
<img src="/images/rails_admin_layout_devise/03.png">
</div>

<p>登入頁面</p>
<div class="image-container">
<img src="/images/rails_admin_layout_devise/04.png">
</div>

<p>因為還沒設定current_user.role所以在html.erb頁面放<code>&lt;% console %&gt;</code>程式碼，</p>
<p>搭配指令，來快速指定某使用者的role</p>
<div class="image-container">
<img src="/images/rails_admin_layout_devise/05.png">
</div>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">current_user<br><br>current_user.role = <span class="hljs-title class_">User</span>.roles[<span class="hljs-symbol">:admin</span>]<br><br>current_user.save<br><br>current_user.admin?<br></code></pre></td></tr></table></figure>

<p>登入成功後，就有管理者的介面了！！</p>
<div class="image-container">
<img src="/images/rails_admin_layout_devise/06.png">
</div>

<p>實際應用的時候，可以把只有管理者知道的連結&amp;資訊放在這，</p>
<p>讓他的介面看起來和一般使用者有區隔</p>
<p>使用Devise套件真的好方便٩(●˙▿˙●)۶…⋆ฺ 我原本想說自己刻好麻煩，</p>
<p>這整個步驟大約10分鐘就可以完成了！！</p>
<p>有興趣也可以試看看～～</p>
<hr>
<p>本篇文章是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p><a href="https://www.youtube.com/watch?v=SxwFyK9OtfY">Layouts For Admin Users with Devise in Ruby on Rails 7</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>devise</tag>
        <tag>rails7</tag>
        <tag>rails</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby on Rails: 用Simple Calendar輕鬆打造客製化月曆</title>
    <url>/2024/01/14/simple-calendar/</url>
    <content><![CDATA[<style>


.em-div{
border:2px #d4a373 solid;
margin:5px;
padding:10px 2px 2px 2px;
border-style:dashed;
}
</style>


<img src="/images/simple-calendar/banner.avif">

<p>圖片來源：<a href="https://unsplash.com/photos/black-marker-on-notebook-zni0zgb3bkQ">Unsplash-Estée Janssens</a><br>在製作專案的時候發現寶藏gem套件<a href="https://github.com/excid3/simple_calendar">simple_calendar</a>(ﾉ&gt;ω&lt;)ﾉ，<br>可以輕鬆地製作月曆，而且客製化程度高，可以自定義CSS樣式，<br>這是我這次做出來的月曆：<br><img src="/images/simple-calendar/5.png"></p>
<ul>
<li>本次選擇使用<a href="%5Bhttps://tailwindcss.com/%5D(https://tailwindcss.com/)">tailwind</a> CSS框架，安裝方法可以參考<a href="https://tailwindcss.com/docs/installation">tailwind installaion</a></li>
<li>亦可以使用bootstrap，安裝請參考：<a href="%5Bhttps://getbootstrap.com/%5D(https://getbootstrap.com/)">bootstrap</a></li>
</ul>
<hr>
<h3 id="安裝simple-calendar"><a href="#安裝simple-calendar" class="headerlink" title="安裝simple_calendar"></a>安裝<a href="https://github.com/excid3/simple_calendar">simple_calendar</a></h3><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>bundle add simple_calendar<br></code></pre></td></tr></table></figure>

<p>貼上後執行bundle i即可</p>
<h3 id="製作新增會議的CRUD"><a href="#製作新增會議的CRUD" class="headerlink" title="製作新增會議的CRUD"></a>製作新增會議的CRUD</h3><p>因為demo所以使用meeting，可以自由選擇名稱，meeting會有開始時間＆結束時間，所以也增加<code>start_time</code> &amp; <code>end_time</code>的column</p>
<p>因為新增會議不是本次demo的重點🤣使用scaffold會幫忙製作CRUD</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#terminal</span><br>rails g scaffold <span class="hljs-title class_">Consultation</span> title <span class="hljs-symbol">description:</span>text <span class="hljs-symbol">start_time:</span>datetime e<br><span class="hljs-symbol">nd_time:</span>datetime<br></code></pre></td></tr></table></figure>

<p>完成後執行<code>rails db:migrate</code></p>
<h3 id="建立主頁"><a href="#建立主頁" class="headerlink" title="建立主頁"></a>建立主頁</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g controller pages home<br></code></pre></td></tr></table></figure>

<h3 id="在主頁自定義方法"><a href="#在主頁自定義方法" class="headerlink" title="在主頁自定義方法"></a>在主頁自定義方法</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#home.html.erb</span><br>&lt;%= month_calendar <span class="hljs-keyword">do</span> |<span class="hljs-params">date</span>| %&gt;<br>  &lt;%= date %&gt;<br>&lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure>
<p>除了Month Calendar，另外還有Week Calendar、Custom Length Calendar<br>客製化程度很高，可以依自己需要選擇</p>
<p>開啟 <code>rails s</code>就會出現月曆</p>
<img src="/images/simple-calendar/2.png">

<div class="em-div">
補充：simple_calendar 預設開始時間的Model column是start_time，結束時間是end_time，
如果是別的column名稱，有兩個方法可以改變：
</div>

<ol>
<li><p>在程式碼中加入attribute：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby">&lt;%= month_calendar(<span class="hljs-symbol">attribute:</span> <span class="hljs-symbol">:</span>你的column名稱, <span class="hljs-symbol">end_attribute:</span> <span class="hljs-symbol">:</span>你的column名稱) <span class="hljs-keyword">do</span> |<span class="hljs-params">date</span>| %&gt;<br>  &lt;%= date %&gt;<br>&lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure>
</li>
<li><p>到model定義</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_time</span><br>  start_date <span class="hljs-comment">#假如你的結束時間名稱為start_date</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">end_time</span><br>  end_date <span class="hljs-comment">#假如你的結束時間名稱為end_date</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="將Meeting加入月曆裡"><a href="#將Meeting加入月曆裡" class="headerlink" title="將Meeting加入月曆裡"></a>將<code>Meeting</code>加入月曆裡</h3><p>只要改寫剛剛的程式碼即可</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#home.html.erb</span><br>&lt;%= month_calendar(<span class="hljs-symbol">events:</span> <span class="hljs-variable">@meetings</span>) <span class="hljs-keyword">do</span> |<span class="hljs-params">date</span>| %&gt;<br>&lt;%= date %&gt;<br>&lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure>

<h3 id="定義-meetings"><a href="#定義-meetings" class="headerlink" title="定義@meetings"></a>定義<code>@meetings</code></h3><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#pages_controller.rb</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span><br>    <span class="hljs-variable">@meetings</span> = <span class="hljs-title class_">Meeting</span>.where(<br>      <span class="hljs-symbol">star_time:</span> <span class="hljs-title class_">Time</span>.now.beginning_of_month.beginning_of_week..<span class="hljs-title class_">Time</span>.now.end_of_month.end_of_week<br>    )<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>

<p>來說明一下這段程式碼的意思：</p>
<div class="em-div">


<p>使用<code>where</code>方法來檢索符合特定條件對象，<br>條件為：指定會議的開始時間應該在本月的開始到結束之間，<br>並且是在一周的開始到結束之間，這樣就可以得到當前月份內的會議。</p>
<p>簡單來說，我們使用<code>where</code>方法，獲取當前月份內的會議，並將這些會議存儲在 <code>@meetings</code> 變數中，以便在<code>view</code>中顯示。</p>
</div>


<div class="em-div">

<p>如果使用SQL語法，，其實更好理解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> meetings<br><span class="hljs-keyword">WHERE</span> start_time <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;開始時間&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;結束時間&#x27;</span>;<br></code></pre></td></tr></table></figure>

<p>「開始時間」：<code>Time.now.beginning_of_month.beginning_of_week</code> 生成的日期時間，<br>「結束時間」  <code>Time.now.end_of_month.end_of_week</code> 生成的日期時間，<br>這個查詢找會檢索所有在當前月份的第一週的開始時間到當前月份的最後一週的結束時間之間的會議。</p>
</div>


<p>這時候網頁的畫面會像這樣：<br><img src="/images/simple-calendar/2.png"></p>
<p>為什麼還是一樣？因為Meeting沒有任何資料d(&#96;･∀･)b</p>
<h3 id="在Meeting裡增加一些資料"><a href="#在Meeting裡增加一些資料" class="headerlink" title="在Meeting裡增加一些資料"></a>在Meeting裡增加一些資料</h3><p>到<code>http://127.0.0.1:3000/meetings</code>，點選create新增<br>新增文完畢之後，回到<code>home.html.erb</code>，使用each do方法，將meetings顯示</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#home.html.erb</span><br>&lt;%= month_calendar(<span class="hljs-symbol">events:</span> <span class="hljs-variable">@meetings</span>) <span class="hljs-keyword">do</span> |<span class="hljs-params">date, meetings</span>| %&gt;<br>  &lt;%= date %&gt;<br>  &lt;% meetings.each <span class="hljs-keyword">do</span> |<span class="hljs-params">meeting</span>| %&gt;<br>    &lt;%= link_to meeting.title, meeting %&gt;<br>    &lt;%= meeting.description %&gt;<br>  &lt;% <span class="hljs-keyword">end</span> %&gt;<br>&lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure>

<div class="em-div">

<p>補充：這裡需要輸入兩個資料，<br><code>&lt;%= month_calendar(events: @meetings) do |date, meetings| %&gt;</code><br>simple_calendar已經幫忙寫好方法，meetings會塞到相對應的時間內，<br>如果沒有寫的話meeting會重複印到每一天的表格內</p>
</div>

<p>這時畫面就會像這樣：<br><img src="/images/simple-calendar/3.png"></p>
<p>做到這裡，基本上沒有樣式🤣，除了可以在<code>home.html.erb</code>內編輯樣式外，<br>另外可以使用 <a href="https://github.com/excid3/simple_calendar">simple_calendar</a>內的客製化樣式</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g <span class="hljs-symbol">simple_calendar:</span>views<br></code></pre></td></tr></table></figure>

<p>這會在 app&#x2F;views 中產生一個名為 simple_calendar 的資料夾，<br>可以根據自己的意願進行編輯。<br>執行之後可以看到他幫忙長出了這些資料：</p>
<img src="/images/simple-calendar/4.png">

<p>可以到application.css做一些自定義的編輯</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#application.css</span><br>.simple-calendar &#123;<br>  .day &#123;&#125;<br><br>  .wday-<span class="hljs-number">0</span> &#123;&#125;<br>  .wday-<span class="hljs-number">1</span> &#123;&#125;<br>  .wday-<span class="hljs-number">2</span> &#123;&#125;<br>  .wday-<span class="hljs-number">3</span> &#123;&#125;<br>  .wday-<span class="hljs-number">4</span> &#123;&#125;<br>  .wday-<span class="hljs-number">5</span> &#123;&#125;<br>  .wday-<span class="hljs-number">6</span> &#123;&#125;<br><br>  .today &#123;&#125;<br>  .past &#123;&#125;<br>  .future &#123;&#125;<br><br>  .start-date &#123;&#125;<br><br>  .prev-month &#123;&#125;<br>  .<span class="hljs-keyword">next</span>-month &#123; &#125;<br>  .current-month &#123;&#125;<br><br>  .has-events &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>也可以到simple_calendar幫忙長出來app&#x2F;views&#x2F;simple_calendar內調整預設的樣式<br>我是選擇直接到<code>_month_calendar.html.erb</code>修改，最後成果如下，應該有變得好看許多🤣<br><img src="/images/simple-calendar/5.png"><br>我做了這些修改：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#_month_calendar.html.erb</span><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;container mx-auto mt-10&quot;</span>&gt;<br>  &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;wrapper bg-white rounded shadow w-full&quot;</span>&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;simple-calendar&quot;</span>&gt;<br>      &lt;nav&gt;<br>        &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;header flex justify-between border-b p-2&quot;</span>&gt;<br>          &lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text-lg font-bold&quot;</span>&gt;<br>            &lt;time datetime=<span class="hljs-string">&quot;&lt;%= start_date.strftime(&#x27;%Y-%m&#x27;) %&gt;&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;calendar-title&quot;</span>&gt;&lt;%= t(<span class="hljs-string">&#x27;date.month_names&#x27;</span>)[start_date.month] %&gt; &lt;%= start_date.year %&gt;&lt;<span class="hljs-regexp">/time&gt;</span><br><span class="hljs-regexp">          &lt;/span</span>&gt;<br><br>          &lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;<br>            &lt;%= link_to t(<span class="hljs-string">&#x27;simple_calendar.today&#x27;</span>, <span class="hljs-symbol">default:</span> <span class="hljs-string">&#x27;Today&#x27;</span>), calendar.url_for_today_view %&gt;<br><br>            &lt;%= link_to calendar.url_for_previous_view <span class="hljs-keyword">do</span> %&gt;<br>              &lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;p-1&quot;</span>&gt;<br>                &lt;svg width=<span class="hljs-string">&quot;1em&quot;</span> fill=<span class="hljs-string">&quot;gray&quot;</span> height=<span class="hljs-string">&quot;1em&quot;</span> viewBox=<span class="hljs-string">&quot;0 0 16 16&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;bi bi-arrow-left-circle&quot;</span> fill=<span class="hljs-string">&quot;currentColor&quot;</span> xmlns=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;<br>                  &lt;path fill-rule=<span class="hljs-string">&quot;evenodd&quot;</span> d=<span class="hljs-string">&quot;M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z&quot;</span>/&gt;<br>                  &lt;path fill-rule=<span class="hljs-string">&quot;evenodd&quot;</span> d=<span class="hljs-string">&quot;M8.354 11.354a.5.5 0 0 0 0-.708L5.707 8l2.647-2.646a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708 0z&quot;</span>/&gt;<br>                  &lt;path fill-rule=<span class="hljs-string">&quot;evenodd&quot;</span> d=<span class="hljs-string">&quot;M11.5 8a.5.5 0 0 0-.5-.5H6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5z&quot;</span>/&gt;<br>                &lt;<span class="hljs-regexp">/svg&gt;</span><br><span class="hljs-regexp">              &lt;/button</span>&gt;<br>            &lt;% <span class="hljs-keyword">end</span> %&gt;<br><br>            &lt;%= link_to calendar.url_for_next_view <span class="hljs-keyword">do</span> %&gt;<br>              &lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;p-1&quot;</span>&gt;<br>                &lt;svg width=<span class="hljs-string">&quot;1em&quot;</span> fill=<span class="hljs-string">&quot;gray&quot;</span> height=<span class="hljs-string">&quot;1em&quot;</span> viewBox=<span class="hljs-string">&quot;0 0 16 16&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;bi bi-arrow-right-circle&quot;</span> fill=<span class="hljs-string">&quot;currentColor&quot;</span> xmlns=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;<br>                  &lt;path fill-rule=<span class="hljs-string">&quot;evenodd&quot;</span> d=<span class="hljs-string">&quot;M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z&quot;</span>/&gt;<br>                  &lt;path fill-rule=<span class="hljs-string">&quot;evenodd&quot;</span> d=<span class="hljs-string">&quot;M7.646 11.354a.5.5 0 0 1 0-.708L10.293 8 7.646 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0z&quot;</span>/&gt;<br>                  &lt;path fill-rule=<span class="hljs-string">&quot;evenodd&quot;</span> d=<span class="hljs-string">&quot;M4.5 8a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5z&quot;</span>/&gt;<br>                &lt;<span class="hljs-regexp">/svg&gt;</span><br><span class="hljs-regexp">              &lt;/button</span>&gt;<br>            &lt;% <span class="hljs-keyword">end</span> %&gt;<br>          &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">        &lt;/div</span>&gt;<br>      &lt;<span class="hljs-regexp">/nav&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">      &lt;table class=&quot;table table-striped w-full&quot;&gt;</span><br><span class="hljs-regexp">        &lt;thead&gt;</span><br><span class="hljs-regexp">          &lt;tr&gt;</span><br><span class="hljs-regexp">            &lt;% date_range.slice(0, 7).each do |day| %&gt;</span><br><span class="hljs-regexp">              &lt;th class=&quot;p-2 border-r h-10 xl:w-40 lg:w-30 md:w-30 sm:w-20 w-10 xl:text-sm text-xs&quot;&gt;</span><br><span class="hljs-regexp">                &lt;span class=&quot;xl:block lg:block md:block sm:block hidden&quot;&gt;</span><br><span class="hljs-regexp">                  &lt;%= t(&#x27;date.abbr_day_names&#x27;)[day.wday] %&gt;</span><br><span class="hljs-regexp">                &lt;/span</span>&gt;<br>              &lt;<span class="hljs-regexp">/th&gt;</span><br><span class="hljs-regexp">            &lt;% end %&gt;</span><br><span class="hljs-regexp">          &lt;/tr</span>&gt;<br>        &lt;<span class="hljs-regexp">/thead&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        &lt;tbody&gt;</span><br><span class="hljs-regexp">          &lt;% date_range.each_slice(7) do |week| %&gt;</span><br><span class="hljs-regexp">            &lt;tr class=&quot;text-center h-20&quot;&gt;</span><br><span class="hljs-regexp">                &lt;% week.each do |day| %&gt;</span><br><span class="hljs-regexp">                  &lt;%= content_tag :td, class: &quot;border p-1 h-40 xl:w-40 lg:w-30 md:w-30 sm:w-20 w-10 overflow-auto transition cursor-pointer duration-500 ease hover:bg-gray-300&quot; do %&gt;</span><br><span class="hljs-regexp">                    &lt;% instance_exec(day, calendar.sorted_events_for(day), &amp;passed_block) %&gt;</span><br><span class="hljs-regexp">                  &lt;% end %&gt;</span><br><span class="hljs-regexp">                &lt;% end %&gt;</span><br><span class="hljs-regexp">            &lt;/tr</span>&gt;<br>          &lt;% <span class="hljs-keyword">end</span> %&gt;<br>        &lt;<span class="hljs-regexp">/tbody&gt;</span><br><span class="hljs-regexp">      &lt;/table</span>&gt;<br>    &lt;<span class="hljs-regexp">/div&gt;</span><br><span class="hljs-regexp">  &lt;/div</span>&gt;<br>&lt;<span class="hljs-regexp">/div&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#home.html.erb</span><br>&lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text-center m-5 text-xl&quot;</span>&gt;<span class="hljs-title class_">My</span> calendar&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">&lt;%= month_calendar(events: @meetings) do |date, meetings| %&gt;</span><br><span class="hljs-regexp">  &lt;div class=&quot;flex flex-col h-40 mx-auto xl:w-40 lg:w-30 md:w-30 sm:w-full w-10 mx-auto overflow-hidden&quot;&gt;</span><br><span class="hljs-regexp">    &lt;div class=&quot;top h-5 w-full&quot;&gt;</span><br><span class="hljs-regexp">      &lt;span class=&quot;text-gray-500&quot;&gt;</span><br><span class="hljs-regexp">        &lt;%= date.strftime(&#x27;%m/</span>%d<span class="hljs-string">&#x27;) %&gt;</span><br><span class="hljs-string">      &lt;/span&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &lt;% meetings.each do |meeting| %&gt;</span><br><span class="hljs-string">      &lt;div class=&quot;bottom flex-grow py-1 w-full cursor-pointer&quot;&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;event bg-blue-400 text-white rounded p-1 text-sm mb-1&quot;&gt;</span><br><span class="hljs-string">          &lt;%= link_to &quot;<span class="hljs-subst">#&#123;meeting.start_time.strftime(<span class="hljs-string">&#x27;%k:%M&#x27;</span>)&#125;</span> <span class="hljs-subst">#&#123;meeting.title&#125;</span>&quot;, meeting %&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">      &lt;/div&gt;</span><br><span class="hljs-string">    &lt;% end %&gt;</span><br><span class="hljs-string">  &lt;/div&gt;</span><br><span class="hljs-string">&lt;% end %&gt;</span><br></code></pre></td></tr></table></figure>

<p>simple_calendar其實也有把每個部份都定義了class名稱，<br>所以也可以到application.css檔案去更改套用，<br>但因為我使用tailwind，可以直接編輯html碼上的css，<br>後續優化可以再將重複的css樣式再放到application.css<br>或其他自定義的css即可，看個人習慣！</p>
<p>這樣就完成啦！是不是客製化程度非常高呢！<br>本篇文章是我由以下參考資料整理+自己製作而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p><a href="https://github.com/excid3/simple_calendar">simple_calendar</a></p>
</blockquote>
<blockquote>
<p><a href="https://youtu.be/NhAGTL4ARfw?feature=shared">Create A Simple Calendar In Ruby On Rails 7</a></p>
</blockquote>
<blockquote>
<p><a href="https://tailwindcomponents.com/component/calendar-table">Calendar Table Template</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Ruby on Rails</category>
      </categories>
      <tags>
        <tag>Ruby on Rails</tag>
        <tag>rails</tag>
        <tag>ruby</tag>
        <tag>simple calendar</tag>
        <tag>gem</tag>
      </tags>
  </entry>
  <entry>
    <title>職涯: 為什麼要轉職工程師?</title>
    <url>/2024/01/28/transition/</url>
    <content><![CDATA[<style>
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 solid;
margin:5px;
padding:10px 2px 2px 2px;
border-style:dashed;
}
</style>
<img src="/images/transition/banner.jpg">

<p><a href="https://unsplash.com/photos/person-using-macbook-pro-on-brown-wooden-table-h329GHs_lC8">圖片來源</a></p>
<p>「要不要當工程師？」<br>其實這這問題在我心中出現了很多次，第一次是高中升大學的時候、第二次是大學畢業的時候、第三四五六次是我畢業後工作時，中間一直有嘗試接觸相關課程，但一直都沒有勇氣跨出第一步。</p>
<h2 id="興趣"><a href="#興趣" class="headerlink" title="興趣"></a>興趣</h2><img src="/images/transition/1.jpeg">

<p><a href="https://unsplash.com/photos/group-of-people-wearing-white-and-orange-backpacks-walking-on-gray-concrete-pavement-during-daytime-CYlPykF-qAM">圖片來源</a></p>
<p>記得第一次接觸製作網頁，是在我國小三、四年級的時候，那時候智慧型手機、youtube不普及、沒有社群網站，也沒有現在隨處可見的教學。</p>
<img src="/images/Transition/2.jpeg">

<p><a href="https://www.ettoday.net/news/20180609/1187360.htm">圖片來源</a></p>
<p>當時是2007年，最流行的是Yahoo即時通和各大論壇。記得同學傳給我一個留言板的網址，可以使用HTML&#x2F;CSS自定義留言板上的樣式。</p>
<p>我把這個留言板當作我的個人網站，為了讓它變得更好看，我開始搜尋網路上的資料，學會怎麼使用HTML&#x2F;CSS、學會顏色色碼裝飾、學著使用PhotoShop製作漂亮圖片，學會找到上傳圖片的空間上傳圖片（為了在留言板上放圖片）。</p>
<p>後來自己學著使用記事本，編寫HTML&#x2F;CSS，右鍵儲存為.html格式，上傳到雲端空間，製作簡易的入口網站，也是我的第一個網頁。</p>
<p>當時才國小，不知道有個職業叫做網頁工程師、更不知道前後端是什麼，只是在下課補完習回家後，打開電腦想說要裝飾我的網頁而已。</p>
<p>後來升上國中因為要唸書，因此也沒有再繼續。</p>
<p>當時製作的網頁很簡單，換作現在應該一個小時內就可以完成🤣，不過這段時間是我一段很美好的回憶，我很享受那段「看到別人有我也想要學會」的學習過程、自己動手製作到完成成品的時候。</p>
<h2 id="第一次接觸程式"><a href="#第一次接觸程式" class="headerlink" title="第一次接觸程式"></a>第一次接觸程式</h2><img src="/images/Transition/4.jpeg">

<p><a href="https://technews.tw/2020/03/19/visual-basic-support-planned-for-net-5-0/">圖片來源</a></p>
<p>第一次接觸正式的程式是高中時，當時唸資料處理科，每週都有6堂的計算機概論課、會到電腦教室上課。</p>
<p>記得當時有學期教了Visual Basic，教了基本的迴圈到製作計算機、點菜單。當時只覺得，程式真的好方便，過程好有趣！</p>
<p>我很喜歡計算機概論這門課，記得當時有很多同學選擇資管系作爲大學升學的科系，但我卻選擇了企管系😂，大學有參加過資訊系統訓練班的前端入門實戰班，也有查詢過轉職的課程，身邊也有轉職成功的經驗，但因為糾結在自己非本科系，因此當時也沒有把工程師當作就業的選項。</p>
<h2 id="決定轉職"><a href="#決定轉職" class="headerlink" title="決定轉職"></a>決定轉職</h2><img src="/images/Transition/5.avif">

<p><a href="https://unsplash.com/photos/a-computer-screen-with-a-chart-on-it-w9coDxtsfts">圖片來源</a></p>
<p>大學畢業後先後到了電商、新媒體、金融業工作，轉職前的工作是外商銀行的客戶關係經理，當初因為善於和人溝通、想要領到更多的薪水，所以考了證照進了銀行，薪資也如我所願提升到預期的狀況。</p>
<p>感謝金融業的經歷讓我對於財經市場有更多的認識，也在此時因為每日面對變化多端的金融市場和業績目標的要求，大幅提升我的解決困難的能力，像是：因應市場變動而隨時和客戶溝通、說服客戶調整帳上資產、如何找到新的目標客戶、如何讓現有客戶匯入更多資金來達到業績目標等等。</p>
<p>也許是金融經驗的增加，對市場瞭解得愈多，愈發現金融市場的變化莫測，沒有任何一個投信、機構或是任何人能夠精確的預測未來金融的走勢，只能夠根據當下的市場環境判斷並隨時調整，我發現自己沒有辦法對賣「不確定」的東西產生熱情。</p>
<p>但這個時候該放棄嗎？<br>換到其他的產業又能確定自己能一輩子有熱情嗎?</p>
<p>這時候我心裡又出現了我多年來的疑問，「要轉職當工程師嗎？」，這時候我想起國小時做的第一個網頁，想起自己花了許多時間自已拼湊、實作到忘記時間，最後成功完成成品的時刻。</p>
<div class="em-div">
「想了這麼多年，要不這次就給自己一個機會呢？」
</div>

<h2 id="轉職前準備"><a href="#轉職前準備" class="headerlink" title="轉職前準備"></a>轉職前準備</h2><p>決定轉職後，我開始搜集各大轉職的機構、課程，這次我不想要再中途放棄，因為轉職要花費的成本很大，也知道這次自己轉職後要再追回之前的薪資水平，勢必要再累積2-3年的經驗。</p>
<p>但就長遠來看，工程師的職涯和是沒有上限的，而能力和薪資也會隨著學習而提升。</p>
<p>為了讓自己確定轉職的決心，我先給自己一個月的時間，報名了某平台的「程式設計入門」新手村萬元挑戰，這個線上課程必須要在一個月內完成30小時的線上課及實作六個作業通過助教批改，最後也順利完成了，每天學習的時候都很快樂。</p>
<p>不過線上課程並不完全適合我，我還是希望能有同伴能夠一起討論、製作專題。諮詢過多個機構後，我最後選擇了ASTRO X 五倍紅寶石・五倍學院全端工程師培訓課。</p>
<h2 id="踏上轉職之路"><a href="#踏上轉職之路" class="headerlink" title="踏上轉職之路"></a>踏上轉職之路</h2><img src="/images/Transition/6.jpg">

<p>在五倍上課，學了HTML, CSS, JS, Ruby on Rails等課程，五倍的師資很優秀，能夠從原理講解，能更清楚地講解<strong>為什麼做？這樣做有什麼好處？還有什麼其他的做法？利弊又是什麼？</strong>，而不是僅是單純地教「做出東西來」，也秉持著「有問題盡量問」，因此這三個月的過程很精實。</p>
<p>龍哥也很鼓勵同學們寫部落格，因為新的知識理解吸收後，再透過自己整理、寫成文章，能夠加深印象並梳理邏輯，透過寫文章搜集資料的過程也能學習很多，這個部落格也是因此而產生出來的～</p>
<img src="/images/transition/7.JPG">
另外五倍還有許軟軟性課程，透過產品開發課、簡報表達課、企業參訪課以及組員協作製作實體專案，了解業界實體的開發過程，完成後也和組員們一同製作出服務預訂平台，昨天剛剛Demo Day結束。<p>


<p>學習的過程中也發現：自己很喜歡和電腦溝通，因為電腦很誠實，對就是對、錯就是錯，錯了再想法辦解決就好，一定有解決辦法，只是現在的自己還不知道，透過查找資料並實作解決就可以了。</p>
<p>解決後還能夠再多想想，能有其他更好的作法嗎？也許是過往的工作經驗，已經讓我習慣面對挫折、解決挫折了，途中一定有遇到困難，但只要找出解決辦法就好，也很感謝這三個月來五倍的老師、助教、同學、課務們的協助。</p>
<h2 id="未來"><a href="#未來" class="headerlink" title="未來"></a>未來</h2><p>完成五倍的課程還不是轉職之路的結束，只是開始而已，但透過這三個月的課程，也讓我確信自己真的喜歡寫程式，常常寫到進入心流忘記時間，剛抬頭是白天，再次抬頭就是黑夜，更常常寫到忘記喝水、上廁所，但每一天都很開心。</p>
<p>目前的自己還有很多的不足，但就像學習程式的過程一樣，知道自己哪裡不足就加強哪裡，終究會離自己的目標更進一步。</p>
<p>最想，如果能用一句話概括我轉職的原因：</p>
<div class="em-div2">
因為我喜歡替任何人包括自己解決問題，同時，我也喜歡寫程式；因此想透過程式替更多人解決問題，也想透過程式替創造自己更好的職涯。
</div>

]]></content>
      <categories>
        <category>職涯</category>
      </categories>
      <tags>
        <tag>轉職</tag>
        <tag>職涯</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript: 使用 var, let, const 宣告究竟差在哪呢？</title>
    <url>/2023/11/15/var-let-const/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }

  .em-div2{
    border:2px #d4a373 solid;
    margin:5px;
    padding:10px 2px 2px 2px;
    border-style:dashed;
  }
</style>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/var-let-const/banner.png">

<p>在 JavaScript 中，經常使用<code>var</code>, <code>let</code>, <code>const</code>這三個數來宣告，究竟這三個有什麼不同呢？下面來詳細說明(^_^)</p>
<div class="em-div2">
註：此篇文章有多個程式碼輔助解釋，篇幅較長，您也可以拉到最底部看比較表格。
</div>

<h2 id="由來"><a href="#由來" class="headerlink" title="由來"></a>由來</h2><blockquote>
<p><code>var</code>, <code>let</code>, 以及 <code>const</code> 都是在 JavaScript 用來做變數宣告的保留字，在 JavaScript 早期只有 <code>var</code>，直到 ES2015 (ES6) 時才加入了 <code>let</code> 與 <code>const</code> 。</p>
</blockquote>
<h2 id="關於-var"><a href="#關於-var" class="headerlink" title="關於 var"></a>關於 var</h2><h3 id="重點"><a href="#重點" class="headerlink" title="重點"></a>重點</h3><div class="em-div2">

<ul>
<li><code>var</code>為<strong>函數作用域(function scope)<strong>，若在函數外宣告則為</strong>全作用域(global scope)</strong></li>
<li>僅有 function scope 能夠關住 var（容易污染）</li>
<li>var 宣告的變數，可以重新被宣告 &amp; 賦值</li>
<li>有<a href="https://adora-xu.com/2023/11/18/hoisting/">變數提升</a>，若先提取變數，再使用 var 宣告，會出現 undefined</div></li>
</ul>
<p>接著會用四個範例題目，來幫助解釋這四個重點 ٩(ˊᗜˋ )و</p>
<h3 id="var-為全作用域"><a href="#var-為全作用域" class="headerlink" title="var 為全作用域"></a>var 為全作用域</h3><p><code>var</code>可以為<strong>全作用域（global scope）</strong>或<strong>函數作用域（function scope）</strong>。這代表在函式<strong>外面</strong>定義的變數可以<strong>全域訪問</strong>，在特定函數內部定義的變數可以在函數內部存取。(補充：未宣告的變數也會放在全域變數)</p>
<ul>
<li>範例 1：全域宣告變數<code>a</code>，我們可以在程式的<strong>任何地方</strong>抓到<code>a</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:
10
10
</div>

<ul>
<li>範例 2：僅有 function scope 能夠關住 var，變數“a”在函數內使用 var 宣告。如果使用者在函數之外存取，則會顯示<code>ReferenceError: a is not defined</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//var無法在function外被存取;</span><br></code></pre></td></tr></table></figure>

<div class="em-div">
output：
10 <br>
ReferenceError: a is not defined
</div>

<ul>
<li>範例 3：var 宣告的變數，可以重新被宣告&amp;賦值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">8</span>;<br>a = <span class="hljs-number">7</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output: 7
</div>

<ul>
<li>範例 4：如果使用者在宣告之前使用 var 變數，因為<a href="https://adora-xu.com/2023/11/18/hoisting/">變數提升（Hosting）</a>的關係。在執行函數之前，會優先將 var 變數放入記憶體。要注意的是：這只是在記憶體有這變數的空間，但<strong>尚未初始化</strong>。這也是為何會拿到 undefined 的原因。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>

<div class="em-div">
output: undefined
</div>

<h2 id="關於-let"><a href="#關於-let" class="headerlink" title="關於 let"></a>關於 let</h2><h3 id="重點-1"><a href="#重點-1" class="headerlink" title="重點"></a>重點</h3><div class="em-div2">

<ul>
<li><code>let</code>為<b>區塊作用域(block scoped)</b>，無法在<code>&#123;block&#125;</code>之外存取它</li>
<li>有<a href="https://adora-xu.com/2023/11/18/hoisting/">變數提升（Hosting）</a>，但因為 let 不會幫忙初始化，而是存在<strong>暫時執行死區（TDZ）</strong>，因此<code>let</code>不能在宣告前使用，不能多次宣告。</div></li>
<li>範例 1：正常運行的樣子</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:9</br>
10
</div>

<ul>
<li>範例 2: <code>let</code>宣告無法在<code>&#123;block&#125;</code>之外存取變數<code>b</code>，因此會出現<code>ReferenceError: b is not defined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:9</br>
ReferenceError: b is not defined
</div>

<ul>
<li>範例 3: <code>let</code>宣告的變數不能重複宣告，但可以改變其值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:Identifier 'a' has already been declared
</div>

<ul>
<li>範例 4: <code>let</code>宣告的變數不能重複宣告，但可以改變其值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>a = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:2
</div>

<ul>
<li>範例 5:<code>let</code>作用域僅在<code>&#123;block&#125;</code>內，因此在<code>&#123;block&#125;</code>外可以使用同個變數名稱宣告</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:9</br>
10
</div>

<ul>
<li>範例 6: 在<code>let</code>宣告前先提取變數<code>a</code>，但因為<code>let</code>不會幫忙初始化，而是<strong>存在 TDZ</strong>，因此會出現<code>Cannot access &#39;a&#39; before initialization</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>

<div class="em-div">
output: Cannot access 'a' before initialization
</div>

<h2 id="關於-const"><a href="#關於-const" class="headerlink" title="關於 const"></a>關於 const</h2><blockquote>
<p>常數（constant）又稱定數，是指一個數值固定不變的數，例如圓周率，與之相反的是變數。</p>
</blockquote>
<h3 id="重點-2"><a href="#重點-2" class="headerlink" title="重點"></a>重點</h3><div class="em-div2">

<ul>
<li><code>const</code>為<b>區塊作用域(block scoped)</b>，無法在<code>&#123;block&#125;</code>之外存取它</li>
<li>使用<code>const</code>宣告的變數不能改變，亦不能重複宣告。</li>
<li>若使用 <code>const</code> 宣告，不能改變其屬性，但能夠改變內含的東西。</div></li>
</ul>
<p>相對其他的宣告方式，<code>const</code>規定相對嚴格，所以不像<code>var</code>會有很多花裡胡哨的例外行為，是個很乖巧的好孩子呢(๑¯◡¯๑)。</p>
<ul>
<li>範例 1: 使用<code>const</code>宣告的<code>a</code>，不能夠重新賦值，會出現<code>TypeError</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  a = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure>

<div class="em-div"> output: TypeError: Assignment to constant variable.</div>

<ul>
<li>範例 2: <code>const</code>同樣為<b>區塊作用域(block scoped)</b>，在<code>&#123;block&#125;</code>外不能存取，會出現 <code>ReferenceError: a is not defined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-number">9</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:
ReferenceError: a is not defined
</div>

<ul>
<li>範例 3:使用 <code>const</code> 宣告，不能改變物件，但能夠替換物件內的東西。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">prop1</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">prop2</span>: <span class="hljs-number">9</span>,<br>&#125;;<br>a.<span class="hljs-property">prop1</span> = <span class="hljs-number">3</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output:
{ prop1: 3, prop2: 9 }
</div>

<ul>
<li>範例 4:<code>const</code>宣告不能改變物件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">prop1</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">prop2</span>: <span class="hljs-number">9</span>,<br>&#125;;<br><br>a = &#123;<br>  <span class="hljs-attr">prop1</span>: <span class="hljs-number">20</span>,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure>

<div class="em-div">
output: TypeError: Assignment to constant variable.
</div>

<p>範例 3 和 4 可以想像成，乖寶寶<code>const</code>宣告了 a 是一盒工具箱，你可以往裡面加把手、螺絲起子等等工具，也可以拿走裡面的工具，但你不能再說工具箱是醫藥箱，乖寶寶<code>const</code>宣告了醫藥箱就是醫藥箱！(除非被{…}包住了)</p>
<p>我自己是這樣記憶的，會比較好懂 ٩(ˊᗜˋ )و</p>
<hr>
<p>看了上面這麼多範例，感覺就缺少一個東西，那就是比較表格！我特別整理了一個表格給大家參考 o(^▽^)o</p>
<h3 id="var-let-const-比較表格"><a href="#var-let-const-比較表格" class="headerlink" title="var, let, const 比較表格"></a>var, let, const 比較表格</h3><img src="/images/var-let-const/table2.png">

<h3 id="宣告準則（建議）"><a href="#宣告準則（建議）" class="headerlink" title="宣告準則（建議）"></a>宣告準則（建議）</h3><p>為了防其他的程式碼被宣告所污染到處都拿得到 var 宣告的變數，就像任何人都可以把警察局說成是教堂，把板手說成是棒棒糖，想起來有點可怕 ╰(°▽°)╯，所以建議的宣告順序如下：</p>
<ol>
<li>const</li>
<li>let</li>
<li>var</li>
</ol>
<p>當然實際還是依照需求而定，希望今天的文章有幫助到您！</p>
<p>另外在文章內提到的變數提升，也歡迎參考我另外一篇文章的解釋：<a href="https://adora-xu.com/2023/11/18/hoisting/">JavaScript: 變數提升 hoisting 到底是什麼？</a></p>
<p>文章內容是根據以下參考資料整理＋自己繪圖而得，如果有任何建議都歡迎提供唷 (´･∀･｀)</p>
<p>參考資料：</p>
<blockquote>
<p><a href="https://5xcampus.com/courses/js101">五倍學院 - 為你自己學 JavaScript 課程內容</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript">ExplainThis：在 JavaScript 中用 var, let, 以及 const 有什麼差別？什麼時候該用哪個？</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.geeksforgeeks.org/difference-between-var-let-and-const-keywords-in-javascript/">Difference between var, let and const keywords in JavaScript</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>var</tag>
        <tag>let</tag>
        <tag>const</tag>
      </tags>
  </entry>
</search>
