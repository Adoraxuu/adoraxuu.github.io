<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript的載入：defer vs async</title>
    <url>/2023/11/12/async-vs-defer/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？"><a href="#瀏覽器是怎麼繪轉譯頁的呢？" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程："><a href="#網頁的轉譯流程：" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋："><a href="#流程解釋：" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？"><a href="#JavaScript-是怎麼被引入到網頁呢？" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行"><a href="#將放在前一行" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer"><a href="#什麼是-defer" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer"><a href="#放在前-v-s-Async-v-s-Defer" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--


<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-1"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-1" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-2"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-2" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-1"><a href="#網頁的轉譯流程：-1" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-1"><a href="#流程解釋：-1" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-1"><a href="#JavaScript-是怎麼被引入到網頁呢？-1" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-1"><a href="#將放在前一行-1" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-1"><a href="#async-1" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-1"><a href="#什麼是-defer-1" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-1"><a href="#放在前-v-s-Async-v-s-Defer-1" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--


<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-2"><a href="#網頁的轉譯流程：-2" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-2"><a href="#流程解釋：-2" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-2"><a href="#JavaScript-是怎麼被引入到網頁呢？-2" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：</p>
<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-3"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-3" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-3"><a href="#網頁的轉譯流程：-3" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-3"><a href="#流程解釋：-3" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-3"><a href="#JavaScript-是怎麼被引入到網頁呢？-3" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-2"><a href="#將放在前一行-2" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-2"><a href="#async-2" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-2"><a href="#什麼是-defer-2" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-2"><a href="#放在前-v-s-Async-v-s-Defer-2" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--


<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-3"><a href="#將放在前一行-3" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-4"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-4" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-4"><a href="#網頁的轉譯流程：-4" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-4"><a href="#流程解釋：-4" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-4"><a href="#JavaScript-是怎麼被引入到網頁呢？-4" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-4"><a href="#將放在前一行-4" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-3"><a href="#async-3" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-3"><a href="#什麼是-defer-3" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-3"><a href="#放在前-v-s-Async-v-s-Defer-3" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--


<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-4"><a href="#async-4" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：</p>
<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-5"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-5" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-5"><a href="#網頁的轉譯流程：-5" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-5"><a href="#流程解釋：-5" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-5"><a href="#JavaScript-是怎麼被引入到網頁呢？-5" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-5"><a href="#將放在前一行-5" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-5"><a href="#async-5" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-4"><a href="#什麼是-defer-4" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-4"><a href="#放在前-v-s-Async-v-s-Defer-4" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--


<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-5"><a href="#什麼是-defer-5" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>


<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-6"><a href="#-6" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-6"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-6" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-6"><a href="#網頁的轉譯流程：-6" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-6"><a href="#流程解釋：-6" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-6"><a href="#JavaScript-是怎麼被引入到網頁呢？-6" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-6"><a href="#將放在前一行-6" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-6"><a href="#async-6" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-6"><a href="#什麼是-defer-6" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-5"><a href="#放在前-v-s-Async-v-s-Defer-5" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--


<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-6"><a href="#放在前-v-s-Async-v-s-Defer-6" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：</p>
<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-7"><a href="#-7" class="headerlink" title=""></a></h3><p><img src="/images/async_vs_defer/title.png"></p>
<p>在製作網頁時，通常會用三個方法來將 JavaScript 載入網頁：</p>
<ol>
<li>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</li>
<li><code>async</code></li>
<li><code>defer</code></li>
</ol>
<p>這樣你的網頁才能夠順利動起來，為什麼要這樣做呢？究竟這三種方法有什麼差別呢？以下將會逐一說明(ㆁωㆁ*)</p>
<p>要先理解<code>async</code>,<code>defer</code>的差別前，要先了解，瀏覽器是怎麼轉譯網頁的，這樣能夠更理解 JavaScript 使用不同方法載入的差別</p>
<h2 id="瀏覽器是怎麼繪轉譯頁的呢？-7"><a href="#瀏覽器是怎麼繪轉譯頁的呢？-7" class="headerlink" title="瀏覽器是怎麼繪轉譯頁的呢？"></a>瀏覽器是怎麼繪轉譯頁的呢？</h2><p><img src="/images/async_vs_defer/1webdev.png"></p>
<blockquote>
<p>圖片來源<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">web.dev</a></p>
</blockquote>
<h3 id="網頁的轉譯流程：-7"><a href="#網頁的轉譯流程：-7" class="headerlink" title="網頁的轉譯流程："></a>網頁的轉譯流程：</h3><ul>
<li>Bytes ➡️ Characters ➡️ Tokens ➡️ Nodes ➡️ DOM</li>
</ul>
<h3 id="流程解釋：-7"><a href="#流程解釋：-7" class="headerlink" title="流程解釋："></a>流程解釋：</h3><ol>
<li>從伺服器接收原始資料位元組(raw bytes of data)並將其轉換為人類看得懂的字元(Characters)。</li>
<li>解析字元以提取 HTML 結構，此步驟稱為標記化（tokenization），它會產生標記（tokens）。</li>
<li>將標記（tokens）轉換為節點（nodes）- 具有屬性的不同物件。</li>
<li>連結節點（nodes）以建立資料結構，稱為 <strong>DOM</strong>（文件物件模型）和 CSSOM（CSS 物件模型）。</li>
</ol>
<p>以上流程確保 HTML 和 CSS 快速地傳遞到瀏覽器(ㆁωㆁ*)</p>
<blockquote>
<p>要了解更多請參考：<a href="https://web.dev/articles/critical-rendering-path/constructing-the-object-model?hl=zh-tw">Web.dev 建構物件模型</a></p>
</blockquote>
<p>這邊先幫大家畫個重點，「<strong>建立 DOM 是瀏覽器轉譯網頁的最後一步驟</strong>。」<br>而「<strong>在瀏覽器引擎完成建置 DOM 之前使用者不會看到網站</strong>」</p>
<h2 id="JavaScript-是怎麼被引入到網頁呢？-7"><a href="#JavaScript-是怎麼被引入到網頁呢？-7" class="headerlink" title="JavaScript 是怎麼被引入到網頁呢？"></a>JavaScript 是怎麼被引入到網頁呢？</h2><p>如果任意把<code>&lt;script&gt;</code>放到 html 檔案內會發生什麼事？<br>大家都知道，網頁很有可能會出問題( ͡° ͜ʖ ͡°)，不過究竟是為什麼呢？</p>
<p>在<strong>建立 DOM 結構的過程中</strong>，瀏覽器將發送請求，以獲取網站連結到的任何相關資源。（包括 JavaScript 在內）</p>
<p>為了更好地理解，這裡準備了一個範例，將<code>&lt;script&gt;</code>放在<code>&lt;head&gt;</code>內：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;<br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; <span class="hljs-attribute">content</span>=&quot;<span class="hljs-attribute">width</span>=device-<span class="hljs-attribute">width</span>, initial-scale=<span class="hljs-number">1.0</span>&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script <span class="hljs-attribute">src</span>=&quot;demo<span class="hljs-selector-class">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;container&quot;&gt;網頁內容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br>&lt;/<span class="hljs-selector-tag">html</span>&gt;<br></code></pre></td></tr></table></figure>

<p>這時建構的時間圖如下：<br><img src="/images/async_vs_defer/2rendering-time.png" alt="image"></p>
<p>這會造成什麼樣的問題？<br>因為 DOM 尚未建置好，所以 JavaScript 抓不到 DOM，進而無法進行操作。<br>（辛苦寫的 JavaScript 無法發揮作用 இдஇ）</p>
<p>延遲 DOM 就緒狀態的不僅僅是 JavaScript。還有 CSS、圖像、影片等。瀏覽器引擎必須先載入所有資源才能完成具象。</p>
<p>當然睿智的工程師們早就知道這個問題的破解方法(๑˃̵ᴗ˂̵)ﻭ<br>這裡就要提到在開頭說的第一個方法</p>
<h2 id="將放在前一行-7"><a href="#將放在前一行-7" class="headerlink" title="將&lt;script&gt;放在&lt;/body&gt;前一行"></a>將<code>&lt;script&gt;</code>放在<code>&lt;/body&gt;</code>前一行</h2><p><img src="/images/async_vs_defer/3rendering-time-endofbody.png" alt="image"></p>
<ul>
<li>瀏覽器會先解析完整個 HTML，再下載 JavaScript 檔案、解析，因此使用者可以在第一時間看到畫面。</li>
<li>Script 有可能會異動到 HTML 元素，因此將<code> &lt;script&gt;</code> 置於<code>&lt;body&gt;</code>的底部，可以確保 HTML 元素已經完全載入，減少異動元素造成錯誤的風險。</li>
<li>直到 DOM 完全建置好後（但會在 DOMContentLoaded 事件前）才被「執行」</li>
</ul>
<p>但這是好方法嗎？一切都看網頁的內容而定，如果 JavaScript 寫得很多檔案很大，或是由外部資源載入，可能就會導致網頁跑很慢(｡ŏ﹏ŏ)，使用者可能會覺得網頁壞掉 ಠ_ಠ</p>
<p>但如果想要網頁載入更快一點怎麼辦？這時候<code>async</code>就派上用場啦 🤩</p>
<h2 id="async-7"><a href="#async-7" class="headerlink" title="async"></a>async</h2><p>async 的意思是 <strong>asynchrnous</strong>，意即<strong>非同步</strong><br>使用的範例如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo2<span class="hljs-selector-class">.js</span>&quot; async&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>可以用圖片理解：<br><img src="/images/async_vs_defer/4rendering-time-async.png" alt="image"></p>
<ul>
<li>解析 HTML 與載入腳本，是非同步進行。因此<code>async</code>會告訴瀏覽器，在解析 HTML 時不用等<code>&lt;script&gt;</code>腳本的下載與執行。</li>
<li>async 的腳本載入與 HTML 解析是彼此獨立，async<strong>下載完就會馬上執行</strong>。</li>
<li>除了跟 DOM 的建構是彼此獨立之外，帶有 async 屬性的腳本跟其他的腳本也是<strong>彼此獨立</strong>，哪個先下載完成就先執行。</li>
<li>雖然在下載時不會暫停 HMTL 的解析，但在執行時其他的 Script 時會暫停解析（例如範例的 demo1 會先執行，接著再解析 demo2）</li>
<li>通常使用在 Script 載入跟 DOM、其他腳本是沒有相互依賴關係時，例如 Google Analytics 這類分析用的腳本。</li>
<li>async 若放在 html 中間，則拿不到後面解析的 DOM。</li>
</ul>
<p>async 真是省時間 ʕ•ᴥ•ʔ，但這是最好的方法嗎？並不是，一切也要看網頁的內容而定，如果有很多相互依賴的 Script 或是 Script 需要取得 DOM 元素就不適合。</p>
<p>所以就有了第三種解決這問題的方法啦！那就是<code>defer</code></p>
<h2 id="什麼是-defer-7"><a href="#什麼是-defer-7" class="headerlink" title="什麼是 defer?"></a>什麼是 defer?</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-attribute">src</span>=&quot;demo1<span class="hljs-selector-class">.js</span>&quot; defer&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p><img src="/images/async_vs_defer/5rendering-time-defer.png" alt="image"></p>
<ul>
<li>defer 會告訴瀏覽器，不用等腳本的下載與執行，可以繼續完成 HTML 的解析與 DOM 的建構；在建構 DOM 的同時，會在背景中載入腳本，因此 defer 不會擋住畫面的具像（渲染）。</li>
<li>如果腳本在 HTML 解析完成前就下載好，會等到 HTML 都<strong>完全解析</strong>後，才會執行。因此如果有腳本是需要等 HTML 解析完、DOM 完整建立後才能載入，那麼會需要選 defer。</li>
<li>如果同時有多個帶有 defer 屬性的<code>&lt;script&gt;</code>資源，瀏覽器會同步下載，只是會依照在 HTML 中的順序執行。</li>
<li>有些時候，可能某個腳本會依賴另一個腳本，例<code>demo1.js</code>依賴<code>demo2.js</code>，在範例中使<code>defer</code>可以確保<code>demo1.js</code>會在<code>demo2.js</code>之前執行。</li>
</ul>
<h2 id="放在前-v-s-Async-v-s-Defer-7"><a href="#放在前-v-s-Async-v-s-Defer-7" class="headerlink" title="放在&lt;/body&gt;前 v.s. Async v.s. Defer"></a>放在<code>&lt;/body&gt;</code>前 v.s. Async v.s. Defer</h2><p>了解這三種不同的方法時，自己也頭昏眼花了一陣子，所以特別製作了表格來幫助大家釐清：<br><img src="/images/async_vs_defer/6differ-table.png" alt="defer-async"><br>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--

<p>本篇文章都是參考以下資料+自己繪圖 or 引用圖片而成，如果想瞭解更多可以參考：</p>
<p>參考資料：<br><a href="https://curiosum.com/blog/seo-speed-script-tags-async-vs-defer">curiosum</a><br><a href="https://www.explainthis.io/zh-hant/swe/script-link-in-html">ExplainThis</a><br><a href="https://www.explainthis.io/zh-hant/swe/fe-script-async-defer-difference">ExplainThis</a><br><a href="https://pjchender.dev/javascript/js-async-defer/">PJchender</a></p>
</div>
<!--
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Event Loop</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 究竟什麼是 Event Loop？</title>
    <url>/2023/11/08/javascript-event-loop/</url>
    <content><![CDATA[<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p><img src="/images/eventLoop/blocks.jpg"><br>JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣</p>
<p>其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。</p>
<h3 id="Call-Stack-呼叫堆疊"><a href="#Call-Stack-呼叫堆疊" class="headerlink" title="Call Stack 呼叫堆疊"></a>Call Stack 呼叫堆疊</h3><p><img src="/images/eventLoop/callstack.png"></p>
<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

<h3 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h3><p><img src="/images/eventLoop/webapis.png"></p>
<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

<h3 id="Event-Queue-事件佇列"><a href="#Event-Queue-事件佇列" class="headerlink" title="Event Queue 事件佇列"></a>Event Queue 事件佇列</h3><p><img src="/images/eventLoop/eventque.png"></p>
<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

<h3 id="Event-Loop-事件循環"><a href="#Event-Loop-事件循環" class="headerlink" title="Event Loop 事件循環"></a>Event Loop 事件循環</h3><p><img src="/images/eventLoop/eventloop.png"></p>
<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

<h3 id="範例示意"><a href="#範例示意" class="headerlink" title="範例示意"></a>範例示意</h3><p>當然，如果僅以上介紹，無法完整了解，<br>這班準備了幾個程式碼及搭配<a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>，讓讀者能夠更了解其運行步驟</p>
<p>可以按此<a href="http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>了解 JavaScript 運行以上程式的步驟</p>
<h3 id="範例示範"><a href="#範例示範" class="headerlink" title="範例示範"></a>範例示範</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2"><a href="#範例示範-2" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<p><img src="/images/eventLoop/pasted-0.png" alt="upload successful"></p>
<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。<br>是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop)<br><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript?<br><a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
<!--

JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣

其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。

### Call Stack 呼叫堆疊


<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

###

![](/images/eventLoop/blocks.jpg)
JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣

其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。

### Call Stack 呼叫堆疊

![](/images/eventLoop/callstack.png)

<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

### Web APIs

![](/images/eventLoop/webapis.png)

<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

### Event Queue 事件佇列

![](/images/eventLoop/eventque.png)

<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

### Event Loop 事件循環

![](/images/eventLoop/eventloop.png)

<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

### 範例示意

當然，如果僅以上介紹，無法完整了解，
這班準備了幾個程式碼及搭配[loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)，讓讀者能夠更了解其運行步驟

可以按此[loupe](http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)了解 JavaScript 運行以上程式的步驟

### 範例示範

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2-1"><a href="#範例示範-2-1" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<p><img src="/images/eventLoop/pasted-0.png" alt="upload successful"></p>
<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。<br>是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料：-1"><a href="#參考資料：-1" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop)<br><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript?<br><a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
<!--


<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

### Web APIs


<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

###

![](/images/eventLoop/blocks.jpg)
JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣

其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。

### Call Stack 呼叫堆疊

![](/images/eventLoop/callstack.png)

<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

### Web APIs

![](/images/eventLoop/webapis.png)

<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

### Event Queue 事件佇列

![](/images/eventLoop/eventque.png)

<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

### Event Loop 事件循環

![](/images/eventLoop/eventloop.png)

<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

### 範例示意

當然，如果僅以上介紹，無法完整了解，
這班準備了幾個程式碼及搭配[loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)，讓讀者能夠更了解其運行步驟

可以按此[loupe](http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)了解 JavaScript 運行以上程式的步驟

### 範例示範

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2-2"><a href="#範例示範-2-2" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<p><img src="/images/eventLoop/pasted-0.png" alt="upload successful"></p>
<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。<br>是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料：-2"><a href="#參考資料：-2" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop)<br><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript?<br><a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
<!--


<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

### Event Queue 事件佇列


<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

###

![](/images/eventLoop/blocks.jpg)
JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣

其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。

### Call Stack 呼叫堆疊

![](/images/eventLoop/callstack.png)

<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

### Web APIs

![](/images/eventLoop/webapis.png)

<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

### Event Queue 事件佇列

![](/images/eventLoop/eventque.png)

<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

### Event Loop 事件循環

![](/images/eventLoop/eventloop.png)

<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

### 範例示意

當然，如果僅以上介紹，無法完整了解，
這班準備了幾個程式碼及搭配[loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)，讓讀者能夠更了解其運行步驟

可以按此[loupe](http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)了解 JavaScript 運行以上程式的步驟

### 範例示範

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2-3"><a href="#範例示範-2-3" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<p><img src="/images/eventLoop/pasted-0.png" alt="upload successful"></p>
<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。<br>是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料：-3"><a href="#參考資料：-3" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop)<br><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript?<br><a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
<!--


<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

### Event Loop 事件循環


<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

###

![](/images/eventLoop/blocks.jpg)
JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣

其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。

### Call Stack 呼叫堆疊

![](/images/eventLoop/callstack.png)

<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

### Web APIs

![](/images/eventLoop/webapis.png)

<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

### Event Queue 事件佇列

![](/images/eventLoop/eventque.png)

<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

### Event Loop 事件循環

![](/images/eventLoop/eventloop.png)

<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

### 範例示意

當然，如果僅以上介紹，無法完整了解，
這班準備了幾個程式碼及搭配[loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)，讓讀者能夠更了解其運行步驟

可以按此[loupe](http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)了解 JavaScript 運行以上程式的步驟

### 範例示範

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2-4"><a href="#範例示範-2-4" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<p><img src="/images/eventLoop/pasted-0.png" alt="upload successful"></p>
<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。<br>是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料：-4"><a href="#參考資料：-4" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop)<br><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript?<br><a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
<!--


<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

### 範例示意

當然，如果僅以上介紹，無法完整了解，
這班準備了幾個程式碼及搭配[loupe](http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)，讓讀者能夠更了解其運行步驟

可以按此[loupe](http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D)了解 JavaScript 運行以上程式的步驟

### 範例示範

<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2-5"><a href="#範例示範-2-5" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<style>
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
</style>

<h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p><img src="/images/eventLoop/blocks.jpg"><br>JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣</p>
<p>其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。</p>
<h3 id="Call-Stack-呼叫堆疊-1"><a href="#Call-Stack-呼叫堆疊-1" class="headerlink" title="Call Stack 呼叫堆疊"></a>Call Stack 呼叫堆疊</h3><p><img src="/images/eventLoop/callstack.png"></p>
<ul>
  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>
  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>
  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li>
</ul>
<div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div>

<h3 id="Web-APIs-1"><a href="#Web-APIs-1" class="headerlink" title="Web APIs"></a>Web APIs</h3><p><img src="/images/eventLoop/webapis.png"></p>
<ul>
  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>
  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li>

<div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div>

<h3 id="Event-Queue-事件佇列-1"><a href="#Event-Queue-事件佇列-1" class="headerlink" title="Event Queue 事件佇列"></a>Event Queue 事件佇列</h3><p><img src="/images/eventLoop/eventque.png"></p>
<ul>
  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>
  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li>
</ul>

<div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div>

<h3 id="Event-Loop-事件循環-1"><a href="#Event-Loop-事件循環-1" class="headerlink" title="Event Loop 事件循環"></a>Event Loop 事件循環</h3><p><img src="/images/eventLoop/eventloop.png"></p>
<ul>
  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>
  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>
  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>
  <li>如果不為空：處理 Call Stack 內的函數。</li>
</ul>

<h3 id="範例示意-1"><a href="#範例示意-1" class="headerlink" title="範例示意"></a>範例示意</h3><p>當然，如果僅以上介紹，無法完整了解，<br>這班準備了幾個程式碼及搭配<a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>，讓讀者能夠更了解其運行步驟</p>
<p>可以按此<a href="http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>了解 JavaScript 運行以上程式的步驟</p>
<h3 id="範例示範-1"><a href="#範例示範-1" class="headerlink" title="範例示範"></a>範例示範</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure>

<h3 id="範例示範-2-6"><a href="#範例示範-2-6" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure>

<p>會得到以下結果：</p>
<p><img src="/images/eventLoop/pasted-0.png" alt="upload successful"></p>
<p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。<br>是瀏覽器在哀嚎的聲音 😂😂</p>
<p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p>
<h3 id="參考資料：-5"><a href="#參考資料：-5" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote>
<p>What the heck is the event loop anyway? | Philip Roberts<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p>
</blockquote>
<blockquote>
<p>請說明瀏覽器中的事件循環 (Event Loop)<br><a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p>
</blockquote>
<blockquote>
<p>What is an event loop in JavaScript?<br><a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p>
</blockquote>
<!--


此又稱為**Stack Overflow**，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。
是瀏覽器在哀嚎的聲音 😂😂

以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：

### 參考資料：

> What the heck is the event loop anyway? | Philip Roberts
> https://www.youtube.com/watch?v=8aGhZQkoFbQ

> 請說明瀏覽器中的事件循環 (Event Loop)
> https://www.explainthis.io/zh-hant/swe/what-is-event-loop

> What is an event loop in JavaScript?
> https://www.educative.io/answers/what-is-an-event-loop-in-javascript
<!--
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Event Loop</tag>
      </tags>
  </entry>
</search>
