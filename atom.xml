<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adora&#39;s Blog</title>
  
  
  <link href="http://adora-xu.com/atom.xml" rel="self"/>
  
  <link href="http://adora-xu.com/"/>
  <updated>2024-10-06T09:14:59.631Z</updated>
  <id>http://adora-xu.com/</id>
  
  <author>
    <name>Adora Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django: FBV &amp; CBV - TemplateView</title>
    <link href="http://adora-xu.com/2024/10/06/Django-FBV-CBV-TemplateView/"/>
    <id>http://adora-xu.com/2024/10/06/Django-FBV-CBV-TemplateView/</id>
    <published>2024-10-06T09:04:21.000Z</published>
    <updated>2024-10-06T09:14:59.631Z</updated>
    
    <content type="html"><![CDATA[<style>.em-div{background-color: #d4a373;color: white;padding: 10px;margin: 10px;border-radius: 5px;}.em-div2{border:2px #d4a373 solid;margin:5px;padding:10px 2px 2px 2px;border-style:dashed;}</style><img src="/images/Django-FBV-CBV-TemplateView/1.webp"><img src="/images/Django-FBV-CBV-TemplateView/2.webp"><p>當我們在 Django 中談到 <strong>View</strong>，它就像是網頁的「大腦」，負責處理邏輯、連接 HTML 和資料庫的 Model（類似於 MVC 架構中的 Controller，可以參考：<a href="https://adora-xu.com/2023/12/02/MVC/">Ruby on Rails: MVC 是什麼?</a>）。在 Django 裡，我們有兩種主要的方式來撰寫 View：<strong>FBV（Function-Based Views）</strong> 和 <strong>CBV（Class-Based Views）</strong>。</p><div class="em-div2"><p><strong>FBV（Function-Based Views）</strong>：使用 Python 函數來撰寫 View。這種方式比較簡單直接，是 Django 最原始的寫法。每個 FBV 會接收一個 <code>HttpRequest</code>，然後返回一個 <code>HttpResponse</code>。</p><p><strong>CBV（Class-Based Views）：</strong>使用 Python 類來定義 View。這種方式讓你避免寫太多重複的程式，非常符合 DRY（Don’t Repeat Yourself）原則。</p></div><p>看文字說明可能有點抽象，讓我帶來幾個範例：<br>範例檔案可以參考<a href="https://github.com/Adoraxuu/myview/tree/TemplateView">GitHub</a></p><h2 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h2><p>這裡用 TemplateResponse 來寫一個簡單的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#url.py</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>app_name = <span class="hljs-string">&#x27;blog&#x27;</span><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;example/&lt;str:arg&gt;/&#x27;</span>, views.example_view, name=<span class="hljs-string">&#x27;example_name&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#views.py</span><br><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-keyword">from</span> django.template.response <span class="hljs-keyword">import</span> TemplateResponse<br><br><span class="hljs-comment"># *args:會給tuple格式的參數； **kwargs：提供dictionary格式的參數</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example_view</span>(<span class="hljs-params">request, arg, **kwargs</span>):<br>    kwargs[<span class="hljs-string">&#x27;today&#x27;</span>] = date.today()<br>    <span class="hljs-keyword">return</span> TemplateResponse(request, <span class="hljs-string">&#x27;blog/example.html&#x27;</span>, &#123; <span class="hljs-string">&#x27;arg&#x27;</span>: arg, **kwargs &#125;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># blog/example.html</span><br><br>example page &#123;&#123; arg &#125;&#125;<br>today <span class="hljs-keyword">is</span> &#123;&#123; today &#125;&#125;<br></code></pre></td></tr></table></figure><p>這時，如果你在網址中輸入參數 <code>arg</code>，頁面就會顯示相應的內容，例如：</p><img src="/images/Django-FBV-CBV-TemplateView/3.png"><p>當然，我們也可以用 HttpResponse 等效完成這樣的功能：</p><ol><li><strong>最簡單的 HttpResponse</strong>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example_view</span>(<span class="hljs-params">request, arg, **kwargs</span>):<br>    kwargs[<span class="hljs-string">&#x27;today&#x27;</span>] = date.today()<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">f&#x27;example page <span class="hljs-subst">&#123;arg&#125;</span>, today is <span class="hljs-subst">&#123; kwargs[<span class="hljs-string">&quot;today&quot;</span>] &#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><ol><li><strong>使用 HttpResponse 和 loader</strong>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example_view</span>(<span class="hljs-params">request, my_arg, **kwargs</span>):<br>    kwargs[<span class="hljs-string">&#x27;today&#x27;</span>] = date.today()<br>    template = loader.get_template(<span class="hljs-string">&#x27;blog/example.html&#x27;</span>)<br>    context = &#123;<br>        <span class="hljs-string">&#x27;my_arg&#x27;</span>: my_arg,<br>        **kwargs<br>    &#125;<br>    <span class="hljs-keyword">return</span> HttpResponse(template.render(context, request))<br></code></pre></td></tr></table></figure><ol><li><strong>使用 render 函數</strong>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example_view</span>(<span class="hljs-params">request, arg, **kwargs</span>):<br>    kwargs[<span class="hljs-string">&#x27;today&#x27;</span>] = date.today()<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;blog/example.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;arg&#x27;</span>: arg, **kwargs&#125;)<br></code></pre></td></tr></table></figure><p>以上就是 FBV 的基礎介紹，接下來來介紹 CBV</p><h2 id="CBV"><a href="#CBV" class="headerlink" title="CBV:"></a>CBV:</h2><p>CBV 是 Django 內建提供的一種較新的寫法，通過類來完成視圖邏輯。它有很多優點，比如可以輕鬆重複使用程式，讓結構更清晰。</p><p>使用 CBV，我們可以將上面的範例改寫成這樣的 TempalteView：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HomeView</span>(<span class="hljs-title class_ inherited__">TemplateView</span>):<br>    template_name = <span class="hljs-string">&quot;blog/index.html&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_context_data</span>(<span class="hljs-params">self, arg, **kwargs</span>):<br>        context = <span class="hljs-built_in">super</span>().get_context_data(**kwargs)<br>        context[<span class="hljs-string">&#x27;today&#x27;</span>] = date.today()<br>        context[<span class="hljs-string">&#x27;arg&#x27;</span>] = arg<br>        <span class="hljs-keyword">return</span> context<br></code></pre></td></tr></table></figure><p>雖然乍看之下，CBV 和 FBV 寫起來好像差不多，但實際上，CBV 的<strong>重用性</strong>更強，代碼更加結構化。當開始寫更多的邏輯時，CBV 的優勢就會變得明顯，尤其是它的「固定寫法」，讓我們不必去糾結於到底該用哪種 <code>HttpResponse</code>。這對習慣了 Ruby on Rails 的「convention over configuration」的人來說，會更有親切感。</p><p>Django 提供了許多內建的 CBV，例如 <code>TemplateView</code>、<code>ListView</code>、<code>DetailView</code> 等，詳細內容可以見文章一開始的表格，這些內建的視圖可以幫助我們快速完成常見功能，省去不少麻煩，今天先分享到這裡，後續會帶大家深入介紹更多的 CBV 內建視圖，敬請期待～</p><p>本篇文章是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://spookylukey.github.io/django-views-the-right-way/index.html">Django Views — The Right Way</a></p></blockquote><blockquote><p><a href="https://docs.djangoproject.com/en/5.1/topics/class-based-views/">Django Docs - CBV</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 s</summary>
      
    
    
    
    <category term="Django" scheme="http://adora-xu.com/categories/Django/"/>
    
    <category term="Django-CBV" scheme="http://adora-xu.com/categories/Django-CBV/"/>
    
    
    <category term="Django" scheme="http://adora-xu.com/tags/Django/"/>
    
    <category term="FBV" scheme="http://adora-xu.com/tags/FBV/"/>
    
    <category term="CBV" scheme="http://adora-xu.com/tags/CBV/"/>
    
    <category term="TemplateView" scheme="http://adora-xu.com/tags/TemplateView/"/>
    
  </entry>
  
  <entry>
    <title>使用 Django REST Framework 和 React 建置開發環境</title>
    <link href="http://adora-xu.com/2024/09/15/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/"/>
    <id>http://adora-xu.com/2024/09/15/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/</id>
    <published>2024-09-15T14:26:52.000Z</published>
    <updated>2024-09-20T07:07:57.259Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/Main.webp"><p>圖片來源：套用 Canva 模板(@veronikagotovceva)</p><p>使用 Django 的過程中，覺得 Django 亦適合採用前後端分離的開發模式，因此自己建了基礎 React 為前端、Django 為後端的網頁專案，建置的過程接下來會逐一解說 ( ˶’ᵕ’˶)</p><p>也可以到<a href="https://github.com/Adoraxuu/NoteWords">我的 GitHub</a> 看完成的程式碼</p><h2 id="開始之前"><a href="#開始之前" class="headerlink" title="開始之前"></a>開始之前</h2><p>請確認安裝了以下項目：</p><ul><li>Python(version &gt;&#x3D;3.8)</li><li><a href="https://python-poetry.org/docs/">Poetry</a>(Django 套件管理工具)</li><li>NPM(React 套件管理工具)</li></ul><h2 id="建立-React"><a href="#建立-React" class="headerlink" title="建立 React"></a>建立 React</h2><h3 id="1-到專案資料夾內，使用終端機輸入以下指令："><a href="#1-到專案資料夾內，使用終端機輸入以下指令：" class="headerlink" title="1. 到專案資料夾內，使用終端機輸入以下指令："></a>1. 到專案資料夾內，使用終端機輸入以下指令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm create vite@latest frontend -- --template react<br></code></pre></td></tr></table></figure><p>這條指令的作用是：</p><ul><li>使用 npm(套件管理工具)下載最新的 Vite（打包器），並建立一個名為 <code>frontend</code> 的 React 框架。（當然你也可以取別的名字）</li><li>Vite 會根據 template(模板)產生基本的 React 項目。</li></ul><h3 id="2-安裝-npm-依賴項目："><a href="#2-安裝-npm-依賴項目：" class="headerlink" title="2. 安裝 npm 依賴項目："></a>2. 安裝 npm 依賴項目：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> frontend <span class="hljs-comment">#進入React框架資料夾</span><br>$ npm instal <span class="hljs-comment"># 使用npm安裝依賴項目</span><br>$ npm run dev <span class="hljs-comment"># 開啟服務器</span><br></code></pre></td></tr></table></figure><p>更多內容可以參考:<a href="https://cn.vitejs.dev/guide/">Vite 官方文檔</a></p><h3 id="3-完成-React-安裝："><a href="#3-完成-React-安裝：" class="headerlink" title="3. 完成 React 安裝："></a>3. 完成 React 安裝：</h3><p>照著指示開啟網址<a href="http://localhost:5173/">http://localhost:5173/</a>，沒意外的話就會看到以下畫面，React 基礎的安裝就完成了。</p><img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/1.webp"><h2 id="建立-Django-專案"><a href="#建立-Django-專案" class="headerlink" title="建立 Django 專案"></a>建立 Django 專案</h2><h3 id="1-專案資料夾內使用終端機執行："><a href="#1-專案資料夾內使用終端機執行：" class="headerlink" title="1. 專案資料夾內使用終端機執行："></a>1. 專案資料夾內使用終端機執行：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip install django djangorestframework django-cors-headers<br></code></pre></td></tr></table></figure><p>此指令使用 pip 安裝了三個套件：</p><ul><li>Django：後端網頁框架</li><li><a href="https://www.django-rest-framework.org/">Django REST framework</a>：用於建立 API 的擴充套件</li><li>Django CORS headers：用於處理 CORS 跨域請求問題，讓 API 安全地可以被不同的網頁訪問。</li></ul><h3 id="2-調整專案架構："><a href="#2-調整專案架構：" class="headerlink" title="2. 調整專案架構："></a>2. 調整專案架構：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ django-admin startproject core <span class="hljs-comment"># 使用django安裝專案</span><br>$ <span class="hljs-built_in">mv</span> core backend <span class="hljs-comment"># 將外層的core改名為backend</span><br>$ <span class="hljs-built_in">cd</span> backend <span class="hljs-comment"># 進入後端資料夾</span><br>$ poetry init --no-interaction --dependency django <span class="hljs-comment"># 使用後湍套件管理工具</span><br>$ <span class="hljs-built_in">touch</span> [README.md](http://README.md) <span class="hljs-comment">#新增專案說明檔案（非必要）</span><br>$ poetry install <span class="hljs-comment"># 安裝依賴套件</span><br></code></pre></td></tr></table></figure><p>完成以上步驟就可以使用文字編輯器開啟專案啦( ੭ ˙ᗜ˙ )੭</p><p>另外可以在 poetry 管理套件的檔案：<code>pyproject.toml</code>加上<code>package-mode = false</code>。<br>因為 poetry 會協助建立虛擬環境，所以往後在專案內的終端機要下指令時都要記得使用<code>$ poetry shell</code>。</p><p>這時候可以看到目前專案結構：</p><img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/2.webp"><h3 id="3-進行資料-migrate"><a href="#3-進行資料-migrate" class="headerlink" title="3. 進行資料 migrate"></a>3. 進行資料 migrate</h3><ul><li>跑資料庫遷移 ：<code>$ python manage.py migrate</code></li><li>開啟伺服器：<code>$ python manage.py runserver</code></li></ul><p>這裡使用 Django 內建的 SQLite，也可以使用自己喜歡的資料庫（在 GitHub 我後來有改用 <a href="https://www.postgresql.org/">PostgreSQL</a> 才上傳）</p><h2 id="4-建立-superuser-＆-App"><a href="#4-建立-superuser-＆-App" class="headerlink" title="4.建立 superuser ＆ App"></a>4.建立 superuser ＆ App</h2><ul><li>建立管理員，方便進入 Django 內建後台： <code>python manage.py createsuperuser</code></li><li>建立一個名為 Word 的 APP：<code>python manage.py startapp word</code></li></ul><p>這時候基礎的 Django 就安裝完成了，不過還需要設定 API，才能搭起前端和後端的橋樑 ( ˶’ᵕ’˶)</p><h2 id="設定後端-API-APP"><a href="#設定後端-API-APP" class="headerlink" title="設定後端 API &amp; APP"></a>設定後端 API &amp; APP</h2><p>基本上這裡的步驟都會是在 backend 資料夾內設定</p><h3 id="1-Django-的環境設置"><a href="#1-Django-的環境設置" class="headerlink" title="1. Django 的環境設置"></a>1. Django 的環境設置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># backend.core.setting</span><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>, <span class="hljs-comment">#REST framework</span><br>    <span class="hljs-string">&#x27;corsheaders&#x27;</span>, <span class="hljs-comment"># CORS headers</span><br>    <span class="hljs-string">&#x27;words&#x27;</span> <span class="hljs-comment">#APP</span><br>]<br><br>CORS_ALLOW_ORIGINS = [<span class="hljs-string">&#x27;http://localhost:5173&#x27;</span>] <span class="hljs-comment">#讓django可以接受這個react打過來的api，亦可使用ENV代入</span><br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>, <span class="hljs-comment"># 建立session的middleware</span><br>    <span class="hljs-string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><p>這部的目的是將剛剛安裝的擴充工具、APP 都讓 Django 知道，並設定 CORS 來源網址。</p><h2 id="新建-word-model"><a href="#新建-word-model" class="headerlink" title="新建 word model"></a>新建 word model</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend.words.models</span><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Word</span>(models.Model):<br>    word = models.CharField(max_length=<span class="hljs-number">200</span>, unique=<span class="hljs-literal">True</span>)<br>    pronunciation = models.CharField(max_length=<span class="hljs-number">100</span>)<br><br></code></pre></td></tr></table></figure><p>新增 word model，使用這個是因為我想做一個單字卡網站，先使用最簡單的定義，你也可以使用任何您要 model 架構。</p><h2 id="註冊-admin-py"><a href="#註冊-admin-py" class="headerlink" title="註冊 admin.py"></a>註冊 admin.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Word<br><br>admin.site.register(Word)<br></code></pre></td></tr></table></figure><p>讓剛剛創的 model 能出現在 admin 內，這步驟非必要，主要是新增資料而已，也可以使用 Django 的 ORM 新增資料，我自己覺得內建的 admin 蠻方便的所以先新增。</p><h2 id="設定-Django-REST-framework"><a href="#設定-Django-REST-framework" class="headerlink" title="設定 Django REST framework"></a>設定 Django REST framework</h2><h3 id="1-words-內新增-api-資料夾"><a href="#1-words-內新增-api-資料夾" class="headerlink" title="1. words 內新增 api 資料夾"></a>1. words 內新增 api 資料夾</h3><p>新增<code>serializers.py</code>、<code>urls.py</code>、<code>views.py</code>這三個檔案：</p><img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/3.webp"><h3 id="2-序列化器（serializers）"><a href="#2-序列化器（serializers）" class="headerlink" title="2. 序列化器（serializers）"></a>2. <strong>序列化器（serializers）</strong></h3><p>這一步是 Django REST Framework（DRF）中非常重要的功能。<br><strong>序列化器（serializers）</strong>負責將數據轉換成其他格式來傳輸，例如我們常用的 JSON 格式。<br>它同時還能處理數據的驗證和「反序列化」（即接收 JSON 資料並轉換成 Django 的資料庫模型物件），讓建立 API 的過程更加簡單。</p><p>簡單來說，序列化器就像是「翻譯」，它幫助使用不同語言的前端和後端進行溝通。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend.words.api.serializers.py</span><br><br><span class="hljs-keyword">from</span> rest_framework.serializers <span class="hljs-keyword">import</span> ModelSerializer<br><span class="hljs-keyword">from</span> ..models <span class="hljs-keyword">import</span> Word<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordSerializer</span>(<span class="hljs-title class_ inherited__">ModelSerializer</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = Word<br>        fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;word&#x27;</span>, <span class="hljs-string">&#x27;pronunciation&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li><code>ModelSerializer</code> ：這是幫助將 Django 模型轉換為 API 格式的工具。</li><li><code>class WordSerializer(ModelSerializer)</code> : 定義了一個名為 WordSerializer 的序列化器的 class</li><li><code>fields = [&#39;id&#39;, &#39;word&#39;, &#39;pronunciation&#39;]</code>：當我們使用 <code>WordSerializer</code> 把 <code>Word</code> 模型的資料轉換為 JSON 時，輸出內容會包含這三個欄位。反過來，把 JSON 資料轉換回 Django 物件時，也只會處理這些欄位。如果你想處理所有欄位，也可以寫成：<code>fields = &#39;__all__&#39;</code>。</li></ul><h2 id="3-設定-WordViewSet，並指定-WordSerializer"><a href="#3-設定-WordViewSet，並指定-WordSerializer" class="headerlink" title="3. 設定 WordViewSet，並指定 WordSerializer"></a>3. 設定 WordViewSet，並指定 WordSerializer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend.words.api.views.py</span><br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<br><span class="hljs-keyword">from</span> ..models <span class="hljs-keyword">import</span> Word<br><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> WordSerializer<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WordViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Word.objects.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 取得所有 Word 模型的資料</span><br>    serializer_class = WordSerializer <span class="hljs-comment"># 指定使用 WordSerializer</span><br></code></pre></td></tr></table></figure><ul><li><code>ModelViewSet</code>：顧名思義，這是「視圖的集合」，專門用來幫我們處理視圖邏輯的。這是 DRF 內建的功能，能自動幫你搞定常見的 CRUD 操作。</li><li><code>WordViewSet</code>：這是自定義的視圖集，專門負責處理 <code>Word</code> 模型的 API 請求。無論是查資料還是新增修改，它都能處理！</li><li><code>serializer_class = WordSerializer</code>：這裡指定了序列化器，我們用剛剛創建的 <code>WordSerializer</code> 來處理資料的轉換和驗證，確保數據格式正確 (•̀ᴗ•́)و。</li></ul><p>總結一下，這段程式碼幫我們自動建立了一個可以處理 <code>Word</code> 模型資料的 API。你只需要發送請求，就能輕鬆完成查詢、新增、修改和刪除資料的操作，真是省時又省力！ヽ(✿ ﾟ ▽ ﾟ)ノ</p><h3 id="4-設定-URLS-路徑"><a href="#4-設定-URLS-路徑" class="headerlink" title="4. 設定 URLS 路徑"></a>4. 設定 URLS 路徑</h3><p>在這個步驟中，我們將會透過 Django REST Framework 的 Routers 來輕鬆管理 URL，讓不同的 API 請求可以正確導向相應的處理邏輯。</p><h4 id="4-1-api-urls-py："><a href="#4-1-api-urls-py：" class="headerlink" title="4-1 api.urls.py："></a>4-1 api.urls.py：</h4><p>首先，我們會在 <code>words</code> 相關的資料夾中新增一個 <code>urls.py</code> 檔案，並註冊 <code>WordViewSet</code> 路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend.words.api.urls.py</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><span class="hljs-keyword">from</span> rest_framework.routers <span class="hljs-keyword">import</span> DefaultRouter<br><span class="hljs-keyword">from</span> .views <span class="hljs-keyword">import</span> WordViewSet<br><br>word_router = DefaultRouter()<br>word_router.register(<span class="hljs-string">r&#x27;words&#x27;</span>, WordViewSet)<br></code></pre></td></tr></table></figure><ul><li><code>DefaultRouter()</code>：這是 Django REST Framework 提供的預設 Routers，它會幫你自動生成常用的 API 路徑，像是 <code>GET /words/</code>、<code>POST /words/</code>等。</li><li><code>register()</code>：這裡我們將 <code>WordViewSet</code> 註冊到 Routers，讓 <code>/words/</code> 路徑和 <code>WordViewSet</code> 連結在一起。</li></ul><h4 id="4-2-core-api-urls-py"><a href="#4-2-core-api-urls-py" class="headerlink" title="4-2 core.api.urls.py"></a>4-2 core.api.urls.py</h4><p>接著，我們在 <code>core</code> 資料夾裡新增一個 <code>api</code> 資料夾，並在裡面新增一個 <code>urls.py</code> 檔案。<br>這一步的重點是將之前設定好的 <code>words</code> 路徑整合起來，讓所有的 API 路徑都統一由這個 <code>urls.py</code> 來管理。</p><p>這裡就像是 API 路徑的「部門經理」，所有的 API URL 都要交給它來發號施令～</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend.core.api.urls.py</span><br><span class="hljs-keyword">from</span> rest_framework.routers <span class="hljs-keyword">import</span> DefaultRouter<br><span class="hljs-keyword">from</span> words.api.urls <span class="hljs-keyword">import</span> word_router<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>router = DefaultRouter()<br><br><span class="hljs-comment"># words</span><br>router.registry.extend(word_router.registry)<br><br><span class="hljs-comment"># 定義主要的 API URL 路徑</span><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(router.urls)),<br>]<br></code></pre></td></tr></table></figure><ul><li><code>router.registry.extend()</code>：這行程式把之前在 <code>words.api.urls.py</code> 裡設定好的 Router 也「報到」給部門經理，讓 <code>/words/</code> 路徑與其他 API 一起被管理 (｡•̀ᴗ-)✧，就像是新員工報到一樣，讓部門經理知道有這個路徑在。</li><li><code>path(&#39;&#39;, include(router.urls))</code>：這行定義了進入 API 的主要路徑。當有人來訪問這個網址時，部門經理會把任務交給相應的主管 router，讓它去發號施令。</li></ul><h4 id="4-4-core-urls-py"><a href="#4-4-core-urls-py" class="headerlink" title="4.4 core.urls.py"></a>4.4 core.urls.py</h4><p>這部分應該不難理解，主要是設定 API 的主要路徑。就像是 API 部門的經理跟 URL 的總經理報告：「我們的 API 部門已經建置完成，可以正式開始運作啦！」 (๑•̀ㅂ•́)و✧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend.core.urls.pu</span><br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, include<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;api/&#x27;</span>, include(<span class="hljs-string">&#x27;core.api.urls&#x27;</span>)),<br>]<br></code></pre></td></tr></table></figure><h2 id="5-執行-migrate-並啟動伺服器"><a href="#5-執行-migrate-並啟動伺服器" class="headerlink" title="5. 執行 migrate 並啟動伺服器"></a>5. 執行 <code>migrate</code> 並啟動伺服器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py makemigrations<br>python manage.py migrate<br>python manage.py runserver<br></code></pre></td></tr></table></figure><p>經過以上步驟，我們的後端 API 介面終於建置完成啦！🎉<br>打開瀏覽器，輸入 <a href="https://127.0.0.1:8000/api/words">https://127.0.0.1:8000/api/words</a>，你就能看到 API 介面！<br>在這裡，你可以直接新增資料，或者查看從後台 Admin 新增的 <code>Word</code> 資料。</p><p>這代表後端的 API 已經正式建置完成，前端也可以透過這個 API 來獲取資料啦！(๑•̀ㅂ•́)و✧</p><img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/4.webp"><h2 id="設定-React-環境"><a href="#設定-React-環境" class="headerlink" title="設定 React 環境"></a>設定 React 環境</h2><ul><li>這裡的動作都會在<code>frontend</code> 進行</li></ul><h3 id="1-在-frontend-資料夾新增-env-檔案"><a href="#1-在-frontend-資料夾新增-env-檔案" class="headerlink" title="1. 在 frontend 資料夾新增 .env 檔案"></a>1. 在 <code>frontend</code> 資料夾新增 <code>.env</code> 檔案</h3><p>首先，我們要在 <code>frontend</code> 資料夾裡新增一個 <code>.env</code> 檔案，裡面設定 API 的網址，這樣之後我們在程式碼裡就可以透過環境變數來讀取 API 路徑了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">VITE_API_URL=http://localhost:<span class="hljs-number">8000</span>/api/<br></code></pre></td></tr></table></figure><h3 id="2-測試環境變數"><a href="#2-測試環境變數" class="headerlink" title="2. 測試環境變數"></a>2. 測試環境變數</h3><p>接下來，我們要確認環境變數是否設置成功。在 <code>src/app.jsx</code> 裡新增以下代碼，然後在瀏覽器的控制台中看看結果吧！✨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># src.app.jsx</span><br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br>function App() &#123;<br><br>  useEffect(() =&gt; &#123;<br>    console.log(<span class="hljs-keyword">import</span>.meta.env.VITE_API_URL)<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h1&gt;Hello World&lt;/h1&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br>export default App<br><br></code></pre></td></tr></table></figure><p>瀏覽器打開後，如果控制台成功輸出我們剛剛在 <code>.env</code> 檔案裡設定的 API URL，那就代表環境變數設置成功啦！٩(◕‿◕｡)۶</p><img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/5.webp"><h3 id="3-從-API-抓取資料"><a href="#3-從-API-抓取資料" class="headerlink" title="3. 從 API 抓取資料"></a>3. 從 API 抓取資料</h3><p>現在，我們來讓 React 從 API 抓取資料，並在網頁上顯示結果。以下是更新後的 <code>App</code> 元件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># src.app.jsx</span><br><br><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br>function App() &#123;<br>  const [data, setData] = useState([])<br><br>  useEffect(() =&gt; &#123;<br>    <span class="hljs-keyword">async</span> function fetchData() &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        const response = <span class="hljs-keyword">await</span> fetch(`$&#123;<span class="hljs-keyword">import</span>.meta.env.VITE_API_URL&#125;/words/`);<br>        <span class="hljs-keyword">if</span> (!response.ok) &#123;<br>          throw new Error(<span class="hljs-string">&#x27;Network response was not ok&#x27;</span>);<br>        &#125;<br>        const data = <span class="hljs-keyword">await</span> response.json();<br>        setData(data);<br>        console.log(data)<br>      &#125; catch (error) &#123;<br>        console.error(<span class="hljs-string">&#x27;Error fetching data:&#x27;</span>, error);<br>      &#125;<br>    &#125;<br>    fetchData();<br>  &#125;, [])<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;h1&gt;Hello World&lt;/h1&gt;<br>      &#123;data.<span class="hljs-built_in">map</span>((word) =&gt; (<br>        &lt;div key=&#123;word.<span class="hljs-built_in">id</span>&#125;&gt;<br>          &lt;h2&gt;&#123;word.word&#125;&lt;/h2&gt;<br>          &lt;p&gt;&#123;word.pronunciation&#125;&lt;/p&gt;<br>        &lt;/div&gt;<br>      ))&#125;<br>    &lt;/div&gt;<br>  )<br>&#125;<br><br>export default App<br><br></code></pre></td></tr></table></figure><p>在這段程式碼中：</p><ul><li>我們用 <code>useState</code> 來存放從 API 取得的資料。</li><li>使用 <code>useEffect</code> 來在元件載入時抓取 API 資料，並將資料顯示在畫面上。</li><li>每個單字會顯示其 <code>word</code> 和 <code>pronunciation</code>。</li></ul><p>這樣一來，我們就能從後端 API 拿到資料並在前端網頁上動態顯示啦！ヾ(＾ ∇ ＾)</p><img src="/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/6.webp"><p>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><ul><li><a href="https://vitejs.dev/">Vite</a></li><li><a href="https://react.dev/learn">React</a></li><li><a href="https://docs.djangoproject.com/en/stable/">Django</a></li><li><a href="https://www.django-rest-framework.org/">Django REST Framework</a></li><li><a href="https://github.com/twtrubiks/django-rest-framework-tutorial">django-rest-framework-tutorial</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/Quick-Start-Setting-Up-a-Development-Environment-with-Django-REST-Framework-and-React/Main.webp&quot;&gt;

&lt;p&gt;圖片來源：套用 Canva 模板(@ve</summary>
      
    
    
    
    <category term="Django" scheme="http://adora-xu.com/categories/Django/"/>
    
    <category term="React" scheme="http://adora-xu.com/categories/React/"/>
    
    <category term="Django REST" scheme="http://adora-xu.com/categories/Django-REST/"/>
    
    
    <category term="Django" scheme="http://adora-xu.com/tags/Django/"/>
    
    <category term="React" scheme="http://adora-xu.com/tags/React/"/>
    
    <category term="Django REST" scheme="http://adora-xu.com/tags/Django-REST/"/>
    
    <category term="Frontend" scheme="http://adora-xu.com/tags/Frontend/"/>
    
    <category term="Backend" scheme="http://adora-xu.com/tags/Backend/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>React: 實體課程學習心得</title>
    <link href="http://adora-xu.com/2024/06/28/react/"/>
    <id>http://adora-xu.com/2024/06/28/react/</id>
    <published>2024-06-28T04:24:24.000Z</published>
    <updated>2024-09-20T07:07:57.260Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/react/React.webp"><p>作為一名剛起步的 Junior 全端工程師，我過去大多是用 JavaScript 撰寫前端程式。為了提升自己的技能，我決定報名五倍學院開設的<a href="https://5xcampus.com/courses/react.html">《React 全攻略 - 入門到進階》</a>課程，目標是深入學習時下熱門的前端框架：React，並朝著 Senior 工程師的方向邁進。</p><p>在學習 React 的過程中，收穫了好多寶貴的經驗。奶綠茶老師是一位業界資深的工程師主管，他從底層邏輯開始講解 React 的基礎知識，並用程式碼作為範例，分享了許多業界的實戰經驗和在工作中實際會用到的 React 寫法。這些內容不僅讓我理解得更深入，也讓我在應用 React 時更加得心應手。</p><p>而且老師上課風格幽默有趣，課程中會穿插工作上與 React 或是工程師相關的趣事，也讓課程內容變得更活潑及生活化，每次上課完都覺得除了學習 React 之外，也透過課程內容讓自己開眼界、學習資深工程師的思考方式，每次上課完都覺得收穫滿滿。</p><h2 id="課程簡介"><a href="#課程簡介" class="headerlink" title="課程簡介"></a>課程簡介</h2><p>《React 全攻略 - 入門到進階》課程是為了幫助學員打好 React 的基礎，成為更加扎實的 React 前端工程師而設計的。課程內容涵蓋了從基礎到進階的各個方面，老師還會分享許多實際開發中的團隊協作經驗和技巧，這些都是書籍和一般線上課程中難以見到的寶貴內容。</p><p>奶綠茶老師透過 50+ 份示範程式檔案，從最基礎的 React Components 如何撰寫 、Props 傳遞機制等，分享 React 核心語法；還有 Typescript 、styled-components 、Tailwind CSS、Redux 等更進階的實戰應用。</p><p>這門課特別適合以下的人：</p><ul><li>前端工程師：希望透過學習 React 來精進 JavaScript 技術。</li><li>有 Vue.js 或 Angular 開發經驗者：想快速上手 React。</li><li>有 React 自學經驗的開發者：希望鞏固基礎觀念。</li><li>想了解 React 開發團隊合作與管理的開發者：尋求更高效的團隊協作方法。</li></ul><h2 id="React-的基礎知識"><a href="#React-的基礎知識" class="headerlink" title="React 的基礎知識"></a>React 的基礎知識</h2><p>在課堂上，老師詳細講解了 JSX、組件（Components）、屬性（Props）、狀態（State）等基礎知識。這些是學習 React 的核心基礎，了解了核心的底層邏輯後，更能進一步學習和應用。</p><h3 id="Components-Props"><a href="#Components-Props" class="headerlink" title="Components &amp; Props"></a>Components &amp; Props</h3><p>在 React 中，component 是讓程式重複利用的重要基礎。<br>奶綠茶老師教我們如何創建 component 並使用 props 傳遞數據，並教導了我們幾個重要的概念：</p><ul><li>compnent 要獲取變數，一定會從 props 拿</li><li>React component 的第一個參數就是 props，其型別一定是物件</li></ul><p>實際的程式碼範例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">FunctionalCard01</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; img, name, children, price &#125; = props;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;category-item&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;category-item__img&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;img&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&#123;name&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;category-item__name&quot;</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;category-item__price&quot;</span>&gt;</span>&#123;price&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;category-item__quote&quot;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-title class_">FunctionalCard01</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">price</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">img</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">node</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">FunctionalCard01</span>;<br></code></pre></td></tr></table></figure><p>這是一段簡單的 Functional Component，它接收 props 並在 JSX 中渲染。這種方式讓 component 變得更為靈活和可重複使用。</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><ul><li>每個 component 除了可以從 props 拿值外，本身還可以儲存變數。就像物件可以儲存自己的屬性一樣，React component 也可以有自己的狀態。</li><li>函數沒有 this 概念，它在呼叫完後就被釋放，無法在函數內部儲存變數的結果。要如何在函數中儲存變數的狀態呢？可以使用 useState 來實現。</li></ul><p>實際的程式碼範例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">atClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>&#125;;<br><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;border p-2 border-black&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>count: &#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;atClick&#125;</span>&gt;</span></span><br><span class="language-xml">      increment</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>這段程式碼表示使用 useState 來管理計數器的狀態，並在按鈕點擊時更新狀態。</p><p>另外 React 的 useState 還有一個重要的觀念：</p><ul><li>useState 儲存狀態，只有第一次傳入的值會被使用。所以，React 的 useState 允許你傳入一個函式來回傳初始值，這個函式只會被執行一次。是否需要使用這個函式取決於初始化的成本是否昂貴。</li></ul><p>實際的程式碼範例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> Bad</span><br><span class="hljs-comment">// 這裡會被執行好多次</span><br><span class="hljs-keyword">const</span> [countBad, setCountBad] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-title function_">getInitialState</span>(<span class="hljs-string">&#x27;bad&#x27;</span>));<br><br><span class="hljs-comment">// [x]: Correct</span><br><span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 這裡的 function 只會被執行一次</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getInitialState</span>(<span class="hljs-string">&#x27;correct&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="從入門到進階"><a href="#從入門到進階" class="headerlink" title="從入門到進階"></a>從入門到進階</h3><p>除了以上的範例，奶綠茶老師的 React 課程緊扣課程的標題「從入門到進階」，讓我印象深刻的內容還有：useEffect 第二個參數的差異、深入理解 useRef 幫助我們獲取 DOM 元素，使用 useState 和 useEffect 來處理表單輸入和驗證、使用 React.memo 來優化 component 性能，避免不必要的重渲染、自定義 Fetch Hook 將邏輯提取到可重用的函式使組件更加簡潔，並且更易於測試和維護、使用 Redux Thunk 進行異步操作、使用 testing library 進行單元測試等等，這些都讓我對 React 有了更全面的了解。</p><p>如果你在自學 React 的路上，但總覺得卡卡的，或是不懂使用 A 方法或 B 方法哪個比較好、效率比較高、不懂哪個方法在工作上比較常使用，都推薦你來上奶綠茶老師的《React 全攻略 - 入門到進階》課程，除了能解決你以上的問題，更能夠讓你在 React 的學習上有全面的提升、少走很多彎路！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/react/React.webp&quot;&gt;

&lt;p&gt;作為一名剛起步的 Junior 全端工程師，我過去大多是用 JavaScript 撰寫前端程式。為了提升自己的技能，我決定報名五倍學院開設的&lt;a href=&quot;https://5xcampus.com</summary>
      
    
    
    
    <category term="React" scheme="http://adora-xu.com/categories/React/"/>
    
    
    <category term="React" scheme="http://adora-xu.com/tags/React/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="五倍學院" scheme="http://adora-xu.com/tags/%E4%BA%94%E5%80%8D%E5%AD%B8%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails: 什麼是Abstraction layer</title>
    <link href="http://adora-xu.com/2024/03/31/ruby-on-rails-abstraction-layer/"/>
    <id>http://adora-xu.com/2024/03/31/ruby-on-rails-abstraction-layer/</id>
    <published>2024-03-31T15:19:47.000Z</published>
    <updated>2024-09-20T07:07:57.161Z</updated>
    
    <content type="html"><![CDATA[<style>.em-div{background-color: #d4a373;color: white;padding: 10px;margin: 10px;border-radius: 5px;}.em-div2{border:2px #d4a373 solid;margin:5px;padding:10px 2px 2px 2px;border-style:dashed;}</style><h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/ruby-on-rails-abstraction-layer/banner.jpg"><blockquote><p>圖片來源: <a href="https://unsplash.com/photos/orange-pink-and-teal-illustration-Tk0B3Dfkf_4">Usplash - Clark Van Der Beken</a></p></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p>首圖的layer好美٩(๑❛ᴗ❛๑)۶，不過對於程式的世界，Layer的意義非常地遼闊，來看下維基百科對於Layer的定義：</p><div class="em-div2"><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1">物件導向設計</a>中的<strong>層</strong>（layer）是一群和其他<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E6%A8%A1%E7%B5%84">模組</a>有類似<a href="https://zh.wikipedia.org/wiki/%E8%80%A6%E5%90%88%E6%80%A7_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">耦合性</a>的<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">類別</a>。層也可以說是一組可<a href="https://zh.wikipedia.org/wiki/%E5%A4%8D%E7%94%A8">復用</a>的軟體組件，可以在類似的環境下復用。</p><p>各層的模組會用<a href="https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)">樹</a>狀的階級架構來規劃，各層模組之間的依賴關係會用連接來表示。各層之間的依賴關係可能是<a href="https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">繼承</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E7%89%A9%E4%BB%B6%E8%A4%87%E5%90%88&action=edit&redlink=1">複合</a>或聚合（aggregation）關係，不過也有可能是其他的關係。</p><p>分層是許多書籍中都會提到的<a href="https://zh.wikipedia.org/wiki/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F">架構模式</a>，例如《<a href="https://zh.wikipedia.org/w/index.php?title=Pattern-Oriented_Software_Architecture&action=edit&redlink=1">Pattern-Oriented Software Architecture</a>》書中就有提到。</p></div><p>看到了裡面的<code>類別</code>、<code>繼承</code>，好像很熟悉，在Ruby on Rails中有使用到，但是整個組起來，看懂一點點又好像沒看懂？</p><p>接著來看看維基百科對於<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B1%A4">Abstraction layer</a>的定義：</p><div class="em-div2"><p><strong>抽象層</strong>（英語：abstraction layer， abstraction level，或 a layer of abstraction）是一種隱藏獨特功能執行細節的方法。使用抽象層的<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94">軟體</a>模型包含<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B">OSI</a>網路協定七層模型、<a href="https://zh.wikipedia.org/wiki/OpenGL">OpenGL</a>繪圖函式庫及以Unix為原本的輸入輸出（I&#x2F;O）模型，並適用於大部分新一代的作業系統。</p><p>在Unix作業系統中，大部分的輸入輸出形式被視為從裝置讀寫的串流值。而串流值模型為了提供獨立裝置被檔案及終端機I&#x2F;O所使用。為了在應用層讀寫裝置，程式呼叫<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8">函式</a>開啟像是<a href="https://zh.wikipedia.org/wiki/%E7%B5%82%E7%AB%AF%E6%A9%9F">終端機</a>的實體裝置或是<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%B6%B2%E8%B7%AF">網路</a>、<a href="https://zh.wikipedia.org/wiki/%E6%AA%94%E6%A1%88">檔案</a>系統的<a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC">虛擬</a>裝置。裝置的<a href="https://zh.wikipedia.org/wiki/%E5%AF%A6%E9%AB%94">實體</a>特徵是被允許程式設計師讀寫資料的作業系統所調用。接著<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1">作業系統</a>操作正確的讀寫轉換。</p><p>大部分的<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E5%BA%93">圖形庫</a>，像是OpenGL，提供抽象圖形裝置模型。這種函式庫的主要功能在於轉換<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB">程式設計師</a>的指令到<a href="https://zh.wikipedia.org/w/index.php?title=%E5%9C%96%E5%BD%A2%E5%85%83%E4%BB%B6&action=edit&redlink=1">圖形元件</a>。這個特殊的繪圖指令與對傳統陰極射線管銀幕的指令不同，而是隱藏了抽象介面的細節。</p><p>在<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E8%A8%8A%E7%A7%91%E5%AD%B8">資訊學</a>，抽象層是<a href="https://zh.wikipedia.org/wiki/%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B_(%E8%B3%87%E8%A8%8A%E7%A7%91%E5%AD%B8)">模型</a>或<a href="https://zh.wikipedia.org/wiki/%E6%BC%94%E7%AE%97%E6%B3%95">演算法</a>的推廣。</p></div><p>完蛋了，完全看不懂 (ఠ్ఠ ˓̭ ఠ్ఠ)。</p><p>其實抽象層很常出現在Ruby on Rails裡面，Ruby on Rails的所有的東西都是物件，而我們所熟悉的MVC，也是物件。<code>view object</code> &#x2F; <code>controller object</code> &#x2F; <code>model object</code> 彼此傳遞著訊息，<strong>這些物件在位階上都屬於抽象層。</strong></p><p>網頁的生命週期分成兩個階段：</p><ol><li>bootstrap phase (configuration and initialization)</li></ol><ul><li>載入應用程式碼</li><li>初始化和配置框架元件</li></ul><ol start="2"><li>serving phase</li></ol><ul><li>執行許多獨立的Web Request</li></ul><p>而我們先暫時聚焦在serving phase上，因為網頁請求(Web Request)是獨立的，因此服務階段可以被視為一條流水線，我們將請求資料（raw material）放在輸送帶上，中間通過許多工作站，並在最後得到回應</p><p>試想像，要怎麼讓流水線提高效率呢？就要把工作站拉出來，看有什麼可以改進的，而抽象層，就可以想像成流水線上的工作站。把工作站拉出來的這個過程（extraction of abstraction layers），也可以稱作分層（layering），而這個架構模式可以提高軟體的品質。</p><p>而一個抽象層應該要有什麼屬性呢？</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99">單一職責</a>（職責可以很廣泛，但不應重複，遵循<a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB">關注點分離</a>）</li><li>各層應該是鬆散耦合的，並且沒有循環或反向依賴關係。<ul><li>如果我們從上到下繪製請求處理流程，層間連接永遠不應該向上，並且我們應該盡量減少層間連接數。（可以想像成流水線，很少會流到一半倒回去做）</li></ul></li><li>抽像不應洩漏其內部結構<ul><li>提取抽象的主要想法是將介面與實作分離</li></ul></li><li>應該可以單獨提取抽象層</li></ul><p>如果遵循以上的這些原則，可以讓開發者易於重構、debug和測試。</p><p>在現實生活中，衡量效率的標準是速度； 在軟體開發中，速度也是關鍵——發布新功能的速度，而要怎麼能夠快速地發布新功能？這取決於許多因素，而最主要的因素就是程式碼的<strong>可維護性</strong>，其中包括：添加新功能和對現有功能進行更改、除錯的容易程度，應用軟體設計模式和提取抽象層是保持高可維護性的兩個主要工具。</p><p>而抽象層不是越多越好，主要看整個應用程式的架構，基本的Rails僅包含了三個抽象層概念：Model、Controller、View(也就是我們所常說的MVC)</p><p>至於要如何逐步引入新的抽象層呢？</p><p>可以參考本書：<a href="https://www.packtpub.com/product/layered-design-for-ruby-on-rails-applications/9781801813785">Layered Design for Ruby on Rails Applications</a></p><p>未來也會將本書提到的有趣的概念整理分享，今天就先到這裡٩(●˙▿˙●)۶<br>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://www.tenlong.com.tw/products/9781801813785">Layered Design for Ruby on Rails Applications</a>**</p></blockquote><blockquote><p><a href="https://zh.wikipedia.org/wiki/Wikipedia:%E9%A6%96%E9%A1%B5">Wiki</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 s</summary>
      
    
    
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/categories/Ruby-on-Rails/"/>
    
    
    <category term="rails" scheme="http://adora-xu.com/tags/rails/"/>
    
    <category term="abstraction layer" scheme="http://adora-xu.com/tags/abstraction-layer/"/>
    
    <category term="ruby" scheme="http://adora-xu.com/tags/ruby/"/>
    
    <category term="layered design" scheme="http://adora-xu.com/tags/layered-design/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails: 使用AWS IVS &amp; OBS 輕鬆開始直播</title>
    <link href="http://adora-xu.com/2024/03/17/ruby-aws-ivs-obs-livestream/"/>
    <id>http://adora-xu.com/2024/03/17/ruby-aws-ivs-obs-livestream/</id>
    <published>2024-03-17T04:34:04.000Z</published>
    <updated>2024-09-20T07:07:57.160Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/ruby-aws-ivs-obs-stream-live/cover.avif"><p>圖片來源：<a href="https://unsplash.com/photos/black-smartphone-taking-photo-of-yellow-round-fruits-8zsBofKrhP8">Usplash</a></p><h2 id="AMAZON-IVS"><a href="#AMAZON-IVS" class="headerlink" title="AMAZON IVS"></a>AMAZON IVS</h2><p><a href="https://aws.amazon.com/tw/ivs/">Amazon IVS</a>是AMAZON的互動式影片服務，可以利用此構建即時串流和互動影片體驗。</p><p>本篇文章主要參考 <a href="https://www.youtube.com/watch?v=aY4d5kNKbGc">Deanin - Livestream to Your Rails App with Amazon IVS</a> ＆ <a href="https://docs.aws.amazon.com/ivs/latest/LowLatencyUserGuide/web-getting-started.html">Amazon Interactive Video Service</a></p><h2 id="建立IVS-Channel"><a href="#建立IVS-Channel" class="headerlink" title="建立IVS Channel"></a>建立IVS Channel</h2><p>AWS IVS的服務超過一定額度會需要收費，收費標準可以參考這裡：<a href="https://aws.amazon.com/tw/ivs/pricing/">Amazon 互動式影片服務定價</a>，這次使用的範圍在免費額度內。</p><img src="/images/ruby-aws-ivs-obs-stream-live/1.png"><p>打上Channel name即可，下方亦有可以將直播影片儲存至S3等選項，可依照個人需要調整</p><p>建置完成就會看到這個畫面：<br><img src="/images/ruby-aws-ivs-obs-stream-live/2.png"></p><h2 id="建置Ruby-on-Rails專案"><a href="#建置Ruby-on-Rails專案" class="headerlink" title="建置Ruby on Rails專案"></a>建置Ruby on Rails專案</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails new video<br><span class="hljs-variable">$ </span>rails g controller pages home<br><span class="hljs-variable">$ </span>rails g scaffold post title <span class="hljs-symbol">body:</span>text<br></code></pre></td></tr></table></figure><p>為了方便可以將<code>config/routes.rb</code> 增加  <code>root &#39;pages#home’</code></p><h2 id="串接AWS-IVS直播"><a href="#串接AWS-IVS直播" class="headerlink" title="串接AWS IVS直播"></a>串接AWS IVS直播</h2><p>參考：<a href="https://docs.aws.amazon.com/ivs/latest/LowLatencyUserGuide/web-getting-started.html">AWS IVS Player SDK</a></p><p>最重要的部分就是這段，記得將PLAYBACK_URL替換成要載入的URL<br><img src="/images/ruby-aws-ivs-obs-stream-live/3.png"></p><p>要載入的URL：<br><img src="/images/ruby-aws-ivs-obs-stream-live/4.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#app/views/pages/home.html.erb</span><br>&lt;h1&gt;<span class="hljs-title class_">Pages</span><span class="hljs-comment">#home&lt;/h1&gt;</span><br>&lt;p&gt;<span class="hljs-title class_">Find</span> me <span class="hljs-keyword">in</span> app/views/pages/home.html.erb&lt;<span class="hljs-regexp">/p&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">&lt;script src=&quot;https:/</span><span class="hljs-regexp">/player.live-video.net/</span><span class="hljs-number">1.26</span>.<span class="hljs-number">0</span>/amazon-ivs-player.min.js<span class="hljs-string">&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;div id=&quot;</span>amazon-ivs<span class="hljs-string">&quot;&gt;</span><br><span class="hljs-string">    &lt;video id=&quot;</span>video-player<span class="hljs-string">&quot;</span><br><span class="hljs-string">        autoplay</span><br><span class="hljs-string">        controls</span><br><span class="hljs-string">        playsinline</span><br><span class="hljs-string">        style=&quot;</span>max-<span class="hljs-symbol">height:</span> 500px; max-<span class="hljs-symbol">width:</span> 500px<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &gt;&lt;/video&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;script&gt;</span><br><span class="hljs-string">  if (IVSPlayer.isPlayerSupported) &#123;</span><br><span class="hljs-string">    const player = IVSPlayer.create();</span><br><span class="hljs-string">    player.attachHTMLVideoElement(document.getElementById(&#x27;video-player&#x27;));</span><br><span class="hljs-string">    player.load(&quot;</span><span class="hljs-title class_">Playback</span> <span class="hljs-variable constant_">URL</span><span class="hljs-string">&quot;);</span><br><span class="hljs-string">    player.play();</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h2 id="設定OBS"><a href="#設定OBS" class="headerlink" title="設定OBS"></a>設定OBS</h2><p>有在接觸直播的人應該蠻熟悉OBS的，OBS是一個<strong>用於錄影和直播的自由開源軟體，</strong>常見的Youtube, Twitch,FB, Instagram都可以接此直播，自訂的功能也很高，或是也可以像我們這次一樣，使用AWS IVS + OBS 放到自己的網頁專案裡，可以參考和下載：<a href="https://obsproject.com/">OBS</a></p><p>OBS → Setting → Stream → 複製自己AWS Channel的server &amp; key貼上<br><img src="/images/ruby-aws-ivs-obs-stream-live/5.png"></p><p>AWS IVS Server &amp; Key<br><img src="/images/ruby-aws-ivs-obs-stream-live/6.png"></p><p>接著在OBS 按下Star Stream就大功告成了！</p><p>AWS Channel:<br><img src="/images/ruby-aws-ivs-obs-stream-live/7.png"></p><p>網頁：<br><img src="/images/ruby-aws-ivs-obs-stream-live/8.png"></p><p>原本想說串接直播不知道會不會很難，看了<a href="https://www.youtube.com/watch?v=aY4d5kNKbGc">Deanin - Livestream to Your Rails App with Amazon IVS</a> 的教學發現透過AWS IVS變得簡單很多！</p><p>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p> <a href="https://www.youtube.com/watch?v=aY4d5kNKbGc">Deanin - Livestream to Your Rails App with Amazon IVS</a> </p></blockquote><blockquote><p><a href="https://docs.aws.amazon.com/ivs/latest/LowLatencyUserGuide/web-getting-started.html">Amazon Interactive Video Service</a></p></blockquote><blockquote><p><a href="https://docs.aws.amazon.com/ivs/latest/LowLatencyUserGuide/web-getting-started.html">AWS IVS Player SDK</a></p></blockquote><blockquote><p><a href="https://obsproject.com/">OBS</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/ruby-aws-ivs-obs-stream-live/cover.avif&quot;&gt;

&lt;p&gt;圖片來源：&lt;a href=&quot;https://unsplash.com/photos/black-smartphone-taking-photo-of-y</summary>
      
    
    
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/categories/Ruby-on-Rails/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Rails" scheme="http://adora-xu.com/tags/Rails/"/>
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/tags/Ruby-on-Rails/"/>
    
    <category term="AMAZON IVS" scheme="http://adora-xu.com/tags/AMAZON-IVS/"/>
    
    <category term="OBS" scheme="http://adora-xu.com/tags/OBS/"/>
    
    <category term="livestream" scheme="http://adora-xu.com/tags/livestream/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode: number of 1 bits</title>
    <link href="http://adora-xu.com/2024/03/16/leetcode-number-of-1-bits/"/>
    <id>http://adora-xu.com/2024/03/16/leetcode-number-of-1-bits/</id>
    <published>2024-03-16T12:55:48.000Z</published>
    <updated>2024-09-20T07:07:57.156Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，會記錄刷leetcode的解法+說明，這次也會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！</p><img src="/images/leetcode-number-of-1-bits/01.png"><p>題目來源：<a href="https://leetcode.com/problems/number-of-1-bits/description/">leetcode</a></p><h2 id="漢明權重"><a href="#漢明權重" class="headerlink" title="漢明權重"></a>漢明權重</h2><p>此題提到了個特別的詞：<a href="https://zh.wikipedia.org/zh-tw/%E6%B1%89%E6%98%8E%E6%9D%83%E9%87%8D">漢明權重</a>，維基百科中解釋，漢明權重是一串符號中非零符號的個數。因此它等同於同樣長度的全零符號串的漢明距離。在最為常見的數據位符號串中，它是1的個數。</p><p>漢明權重(Hamming weight)是以理察·衛斯里·漢明(Richard Wesley Hamming)的名字命名的，它在包括資訊理論、編碼理論、密碼學等多個領域都有應用。</p><p>而這題的解法，就是將輸入的數字轉為二進位制的字串，接著計算<code>1</code>的數量即可。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hamming_weight</span>(<span class="hljs-params">n</span>)<br>  n.to_s(<span class="hljs-number">2</span>).count(<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">end</span><br><br>puts hamming_weight(<span class="hljs-number">0b00000000000000000000000000001011</span>) <span class="hljs-comment"># 3</span><br>puts hamming_weight(<span class="hljs-number">0b00000000000000000000000010000000</span>) <span class="hljs-comment"># 1</span><br>puts hamming_weight(<span class="hljs-number">0b11111111111111111111111111111101</span>) <span class="hljs-comment"># 31</span><br></code></pre></td></tr></table></figure><p>在程式中經常使用<code>0b</code>開頭表示此為二進位制，而在Ruby中，前面有零的數字會被當作八進制數字解析，所以此題的傳入值前面可以加上<code>0b</code>，確保最後的結果會是正確的。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hammingWeight</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bin</span>(n).count(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>solution = Solution()<br><br><span class="hljs-built_in">print</span>(solution.hammingWeight(<span class="hljs-number">0b00000000000000000000000000001011</span>)) <span class="hljs-comment">#3</span><br><span class="hljs-built_in">print</span>(solution.hammingWeight(<span class="hljs-number">0b00000000000000000000000010000000</span>)) <span class="hljs-comment">#1</span><br><span class="hljs-built_in">print</span>(solution.hammingWeight(<span class="hljs-number">0b11111111111111111111111111111101</span>)) <span class="hljs-comment">#31</span><br></code></pre></td></tr></table></figure><p>Python的<code>bin(x)</code>將整數轉為帶前綴<code>0b</code>的二進制字串，因為<code>0b</code>並不會影響我們最後要計算<code>1</code>的數量的結果，因此不需要特別轉換。</p><p>如果要控制是否顯示前缀<code>0b</code>，可以使用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">format</span>(<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;#b&#x27;</span>), <span class="hljs-built_in">format</span>(<span class="hljs-number">14</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>(<span class="hljs-string">&#x27;0b1110&#x27;</span>, <span class="hljs-string">&#x27;1110&#x27;</span>)<br><span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-number">14</span>:#b&#125;</span>&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-number">14</span>:b&#125;</span>&#x27;</span><br>(<span class="hljs-string">&#x27;0b1110&#x27;</span>, <span class="hljs-string">&#x27;1110&#x27;</span>)<br></code></pre></td></tr></table></figure><p>來源：<a href="https://docs.python.org/zh-cn/3/library/functions.html#bin">Python官方文件</a></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hammingWeight = <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;1&#x27;</span>).<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hammingWeight</span>(<span class="hljs-number">0b00000000000000000000000000001011</span>)) <span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hammingWeight</span>(<span class="hljs-number">0b00000000000000000000000010000000</span>)) <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hammingWeight</span>(<span class="hljs-number">0b11111111111111111111111111111101</span>)) <span class="hljs-comment">//31</span><br></code></pre></td></tr></table></figure><p>JS的使用<code>.split(&#39;1&#39;)</code>，將字串依據1分割為陣列，最後計算陣列的長度再<code>-1</code>就可以得到答案了！</p><p>為什麼這裡要<code>-1</code>呢？可以想像一個蛋糕，如果切了一刀會變成兩塊，其中的那一刀，在這裡就是<code>1</code>的意思，我們最後要得到的是<code>切了幾刀</code>，而不是<code>蛋糕有幾塊</code>，所以為了校正最後會需要<code>-1</code>。</p><p>以上就是今天的Leetcode刷題解釋٩(●˙▿˙●)۶</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，會記錄刷leetcode的解法+說明，這次也會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;/images/le</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="number of 1 bits" scheme="http://adora-xu.com/tags/number-of-1-bits/"/>
    
    <category term="漢明權重" scheme="http://adora-xu.com/tags/%E6%BC%A2%E6%98%8E%E6%AC%8A%E9%87%8D/"/>
    
    <category term="hamming weight" scheme="http://adora-xu.com/tags/hamming-weight/"/>
    
  </entry>
  
  <entry>
    <title>職涯: 五倍學院轉職之旅</title>
    <link href="http://adora-xu.com/2024/03/14/from-relationshop-manager-to-software-engineer/"/>
    <id>http://adora-xu.com/2024/03/14/from-relationshop-manager-to-software-engineer/</id>
    <published>2024-03-14T00:58:49.000Z</published>
    <updated>2024-09-20T07:07:57.153Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/from-relationshop-manager-to-software-engineer/01.JPG"><p>沒想到也輪到我分享轉職成功心得了！</p><p>在做出轉職決定之前，我參考了許多人的轉職經驗，學長姐們分享的成功轉職故事，不僅鞏固了我的信心，也讓我受益匪淺。</p><p>現在，我想分享我的轉職歷程，希望能幫助更多的人。</p><p>轉職前的工作是外商銀行的客戶關係經理，感謝這份經歷讓我對金融環境有更多的認識、也增進了應對進退與溝通能力。也許是金融經驗的增加，對市場瞭解得愈多，愈發現金融市場的變化莫測，也發現自己對銷售金融商品始終無法產生熱情。</p><p>因此在經過深思熟慮之後，我選擇了轉職軟體工程師。</p><h2 id="轉職前準備"><a href="#轉職前準備" class="headerlink" title="轉職前準備"></a>轉職前準備</h2><p>為了讓自己確定轉職的決心，我先給自己一個月的時間自習線上課程，每天規定自己進度和要完成的事項，最後也順利完成進度。</p><p>不過僅靠線上課程並不完全適合我，我還是希望能有同伴能夠一起討論、製作專題，並且希望有業界經驗的老師引路，提供正確的學習方法。</p><p>諮詢過多個機構後，因為師資透明、教學內容貼近業界等因素，我最後選擇了ASTRO Camp、五倍學院全端工程師培訓課。</p><h2 id="踏上轉職之路"><a href="#踏上轉職之路" class="headerlink" title="踏上轉職之路"></a>踏上轉職之路</h2><p>在報名完課程之後，五倍會寄送線上先修教材，為了在正式上課時能夠順利銜接，我在拿到先修課程後便規劃自己每日的進度、有時間的話也會跟著實作。</p><p>在五倍上課，學了HTML, CSS, JS, Ruby on Rails, Git等課程，五倍的師資很優秀，能夠從原理講解，能更清楚地講解<strong>為什麼做？這樣做有什麼好處？還有什麼其他的做法？利弊又是什麼？</strong>，而不是僅是單純地教「做出東西來」，也秉持著「有問題盡量問」，每天課堂結束也有助教時間提供學生詢問，讓同學們不要帶著問題回家，因此這三個月的過程很精實。</p><p>龍哥也很鼓勵同學們寫部落格，因為新的知識理解吸收後，再透過自己整理、寫成文章，能夠加深印象並梳理邏輯。</p><p>另外，五倍學院也提供了許多軟性課程，如產品開發、簡報表達、職涯輔導和企業參訪等，這些課程讓我們了解業界實際的開發過程，為轉職之路奠定了堅實的基礎。</p><p>在課程結束後，同學們會被分組進行實體專案的製作。從零開始與組員共同討論專題主題、內容和時程，這不僅讓我們通過實際操作來學習，還能夠培養團隊合作和解決問題的能力。<p></p><h2 id="職涯輔導"><a href="#職涯輔導" class="headerlink" title="職涯輔導"></a>職涯輔導</h2><p>五倍提供的軟性課程中，讓我受益最深的就是職涯輔導課。老師會根據履歷提供有效的建議，並透過模擬面試，幫助面試者解決可能存在的盲點。</p><p>在面試時，我也經常運用老師所教的「不管提到什麼，都要有實際的案例，如果能夠提供實際數字更好。」這個方法，使得我的履歷更具可信度。</p><p>畢竟，工程師都講求實事求是，轉職成功並獲得offer也是大多數人參加課程的最終目標。我認為五倍在此提供的課程和建議都對我非常有幫助！</p><h2 id="心態"><a href="#心態" class="headerlink" title="心態"></a>心態</h2><p>這次的轉職經驗讓我發現，正確的心態很重要，因為轉職的路上不免會遇到許多的挫折，除了可以多加利用五倍提供的資源（老師、助教、課務組等），我覺得最重要的還是要「相信自己並付諸行動」。</p><p>我是一個很容易多想的人，因此在轉職時我時常鼓勵自己，只要一感到焦慮就去開電腦、寫code、寫部落格、刷leetcode、刷codewars、看教學影片，久而久之心中的焦慮會逐漸轉化為平靜和自信。</p><h2 id="未來"><a href="#未來" class="headerlink" title="未來"></a>未來</h2><p>完成五倍的課程還不是轉職之路的結束，只是開始而已，但透過這三個月的課程，因為有五倍的老師、助教、課務組的正確引導，讓我的轉職之路有了好的開始。</p><p>在課程結束一個月左右，我拿到了多個軟體工程師offer，這是在轉職前我絕對想不到的。</p><p>目前的自己還有很多的不足，但就像學習程式的過程一樣，知道自己哪裡不足就加強哪裡，終究會離自己的目標更進一步。</p><p>如果你還在猶豫不決，可以報名<a href="https://5xcampus.com/camp/">ASTRO Camp的說明會</a>，課務組不會推銷、都很親切，會詳細解答你的所有問題～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/from-relationshop-manager-to-software-engineer/01.JPG&quot;&gt;

&lt;p&gt;沒想到也輪到我分享轉職成功心得了！&lt;/p&gt;
&lt;p&gt;在做出轉職決定之前，我參考了許多人的轉職經驗，學長姐們分享的成功轉職故事，</summary>
      
    
    
    
    <category term="職涯" scheme="http://adora-xu.com/categories/%E8%81%B7%E6%B6%AF/"/>
    
    
    <category term="轉職" scheme="http://adora-xu.com/tags/%E8%BD%89%E8%81%B7/"/>
    
    <category term="職涯" scheme="http://adora-xu.com/tags/%E8%81%B7%E6%B6%AF/"/>
    
    <category term="五倍學院" scheme="http://adora-xu.com/tags/%E4%BA%94%E5%80%8D%E5%AD%B8%E9%99%A2/"/>
    
    <category term="ASTRO" scheme="http://adora-xu.com/tags/ASTRO/"/>
    
    <category term="ASTRO Camp" scheme="http://adora-xu.com/tags/ASTRO-Camp/"/>
    
    <category term="五倍" scheme="http://adora-xu.com/tags/%E4%BA%94%E5%80%8D/"/>
    
  </entry>
  
  <entry>
    <title>Python: PEP 8 程式碼風格指南 </title>
    <link href="http://adora-xu.com/2024/03/01/python-pep8-style-guide-for-python-code/"/>
    <id>http://adora-xu.com/2024/03/01/python-pep8-style-guide-for-python-code/</id>
    <published>2024-03-01T07:20:11.000Z</published>
    <updated>2024-09-20T07:07:57.160Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/python-pep8-style-guide-for-python-code/python-logo.png"><blockquote><p>圖片來源: <a href="https://www.python.org/community/logos/">Python.org</a></p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>自己在練習寫Python時，常覺得怪怪的，後來才發現，是因為我沒有了解Python的書寫風格。<br>就像練習寫作文要了解句讀的規則，寫程式一開始，也需要清楚該程式的書寫風格，才能夠在打好基礎架構下精進。</p><p>雖然目前有許多方便的小工具，能夠自動幫忙整理排版、縮排等等，但覺得自己應該要先知道為什麼，再利用工具，才能夠更順利～</p><p>Python有定義了PEP(Python Enhancement Proposal)，裡面有許多章節，而其中的<a href="https://peps.python.org/pep-0008/">PEP 8 – Style Guide for Python Code</a>，則可以解決我的煩惱，因為PEP 8的內容有很多，以下文章會分享自己覺得常用的規範。</p><h2 id="縮排-Indentation"><a href="#縮排-Indentation" class="headerlink" title="縮排 Indentation"></a><a href="https://peps.python.org/pep-0008/#indentation">縮排 Indentation</a></h2><ul><li>每行縮排4個空格</li><li>續行應該在括號內的垂直對齊：</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">foo = long_function_name(var_one, var_two,<br>                         var_three, var_four)<br></code></pre></td></tr></table></figure><p>❎錯誤示範</p><p>第一行若要保留參數的話，括號應該要垂直對齊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">foo = long_function_name(var_one, <br>var_two,var_three, var_four)<br></code></pre></td></tr></table></figure><ul><li>續行亦可使用懸掛縮排。在使用懸掛縮排時，應考慮以下幾點：第一行不應有參數（要按Enter換到下一行），應使用進一步的縮排來明確區分自己是一個續行：</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#懸掛縮排</span><br>foo = long_function_name(<br>    var_one, var_two,<br>    var_three, var_four)<br></code></pre></td></tr></table></figure><p>依據以上的規則，提供多一點示範：</p><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">context</span>(<span class="hljs-params">user, password, </span><br><span class="hljs-params">            timeout, command</span>):<br>    <span class="hljs-keyword">pass</span><br><br>user_list = [<br>    <span class="hljs-string">&#x27;user1&#x27;</span>,<br>    <span class="hljs-string">&#x27;user2&#x27;</span>,<br>    <span class="hljs-string">&#x27;user3&#x27;</span>,<br>    <span class="hljs-string">&#x27;user4&#x27;</span><br>]<br></code></pre></td></tr></table></figure><p>❎錯誤示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">context</span>(<span class="hljs-params">user, password, </span><br><span class="hljs-params">    timeout, command</span>):<br>    <span class="hljs-keyword">pass</span><br><br>user_list = [<br>    <span class="hljs-string">&#x27;user1&#x27;</span>,<br>    <span class="hljs-string">&#x27;user2&#x27;</span>,<br>    <span class="hljs-string">&#x27;user3&#x27;</span>,<br>    <span class="hljs-string">&#x27;user4&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="括號-brace-bracket-parenthesis"><a href="#括號-brace-bracket-parenthesis" class="headerlink" title="括號 brace&#x2F;bracket&#x2F;parenthesis"></a>括號 brace&#x2F;bracket&#x2F;parenthesis</h3><p>括號單獨一行，縮排 or 不縮排都可以</p><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>    <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>    ]<br>result = some_function_that_takes_arguments(<br>    <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>,<br>    )<br></code></pre></td></tr></table></figure><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>    <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>]<br>result = some_function_that_takes_arguments(<br>    <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>,<br>)<br></code></pre></td></tr></table></figure><ul><li>每行程式碼最長不要超過79個字：為什麼是79個字呢？因為當初定義PEP8時年代久遠，螢幕比較小，79剛好符合某種螢幕的寬度🤣，不過因為現在螢幕的寬度都做得比較大，因此此規範可以靈活應對。</li></ul><h2 id="空行-Blank-Lines"><a href="#空行-Blank-Lines" class="headerlink" title="空行 Blank Lines"></a><a href="https://peps.python.org/pep-0008/#blank-lines">空行 Blank Lines</a></h2><ul><li>寫多個函數，函數間要空兩個空行</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>在同一個class內的兩個method，method間要空一個空行</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a><a href="https://peps.python.org/pep-0008/#imports">Imports</a></h2><ul><li>導入通常應該在單獨的行上：</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br></code></pre></td></tr></table></figure><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen, PIPE<br></code></pre></td></tr></table></figure><p>❎錯誤示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, os<br></code></pre></td></tr></table></figure><h3 id="Import-Order"><a href="#Import-Order" class="headerlink" title="Import Order"></a>Import Order</h3><p>導入順序應該依照以下分組：</p><ol><li>Standard library imports.(Python內建Library)</li><li>Related third party imports.(第三方)</li><li>Local application&#x2F;library specific imports.(本地Module相互導入)</li></ol><p>應該在每組導入中間加一行空行</p><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> abort<br><span class="hljs-keyword">from</span> werkzeug.security <span class="hljs-keyword">import</span> generate_password_hash, check_password_hash<br><br><span class="hljs-keyword">from</span> my_project.extensions <span class="hljs-keyword">import</span> database<br><span class="hljs-keyword">from</span> my_project.utils <span class="hljs-keyword">import</span> custom_function, custom_url<br></code></pre></td></tr></table></figure><h2 id="空格-White-Space"><a href="#空格-White-Space" class="headerlink" title="空格 White Space"></a><a href="https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements">空格 White Space</a></h2><h3 id="避免多餘空格"><a href="#避免多餘空格" class="headerlink" title="避免多餘空格"></a>避免多餘空格</h3><ul><li>括號與內容間不需要空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>spam(ham[<span class="hljs-number">1</span>], &#123;eggs: <span class="hljs-number">2</span>&#125;)<br><span class="hljs-comment"># Wrong:</span><br>spam( ham[ <span class="hljs-number">1</span> ], &#123; eggs: <span class="hljs-number">2</span> &#125; )<br></code></pre></td></tr></table></figure><ul><li>空格接在逗號、分號、冒號之後</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br><span class="hljs-keyword">if</span> x == <span class="hljs-number">4</span>: <span class="hljs-built_in">print</span>(x, y); x, y = y, x<br><span class="hljs-comment"># Wrong:</span><br><span class="hljs-keyword">if</span> x == <span class="hljs-number">4</span> : <span class="hljs-built_in">print</span>(x , y) ; x , y = y , x<br></code></pre></td></tr></table></figure><ul><li>但是，在切片中，冒號的作用類似於二元運算符，兩個冒號必須相同間距。例外：當省略切片參數時，空格也被省略：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>ham[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>], ham[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>:<span class="hljs-number">3</span>], ham[:<span class="hljs-number">9</span>:<span class="hljs-number">3</span>], ham[<span class="hljs-number">1</span>::<span class="hljs-number">3</span>], ham[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>:]<br>ham[lower:upper], ham[lower:upper:], ham[lower::step]<br>ham[lower+offset : upper+offset]<br>ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]<br>ham[lower + offset : upper + offset]<br></code></pre></td></tr></table></figure><ul><li>左括號前方不需要有空格：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>dct[<span class="hljs-string">&#x27;key&#x27;</span>] = lst[index]<br><span class="hljs-comment"># Wrong:</span><br>dct [<span class="hljs-string">&#x27;key&#x27;</span>] = lst [index]<br></code></pre></td></tr></table></figure><ul><li>變數等號左右各一個空格、但不需要強制對齊：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">2</span><br>long_variable = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># Wrong:</span><br>x             = <span class="hljs-number">1</span><br>y             = <span class="hljs-number">2</span><br>long_variable = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="注釋-Comments"><a href="#注釋-Comments" class="headerlink" title="注釋 Comments"></a><a href="https://peps.python.org/pep-0008/#comments">注釋 Comments</a></h2><ul><li><strong><a href="https://peps.python.org/pep-0008/#block-comments">Block Comments</a></strong></li><li><strong><a href="https://peps.python.org/pep-0008/#inline-comments">Inline Comments</a></strong><ul><li><code>#</code>後隔一個空格，注釋與程式碼間至少要隔兩個空格：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = x + <span class="hljs-number">1</span>                 <span class="hljs-comment"># Compensate for border</span><br></code></pre></td></tr></table></figure><ul><li><strong><a href="https://peps.python.org/pep-0008/#documentation-strings">Documentation Strings</a></strong><ul><li>應該出現在def之後</li><li>結束的<code>“”“</code>應該要單獨占一行</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_numbers</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    這是一個加法函數，用於將兩個數字相加。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    參數：</span><br><span class="hljs-string">    a (int): 第一個數字</span><br><span class="hljs-string">    b (int): 第二個數字</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    int: 兩個數字的和</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure><h2 id="命名規則-Naming-Conventions"><a href="#命名規則-Naming-Conventions" class="headerlink" title="命名規則 Naming Conventions"></a><a href="https://peps.python.org/pep-0008/#naming-conventions">命名規則 <strong>Naming Conventions</strong></a></h2><p>以下為常見的命名方式：</p><ul><li><code>b</code>（單個小寫字母）</li><li><code>B</code>（單一大寫字母）</li><li><code>lowercase</code></li><li><code>lower_case_with_underscores</code></li><li><code>UPPERCASE</code></li><li><code>UPPER_CASE_WITH_UNDERSCORES</code></li><li><code>CapitalizedWords</code> （也是駝峰式命名法 CapWords, or CamelCase）</li><li><code>mixedCase</code>（與 CatalizedWords 的區別在於首字母小寫）</li></ul><h3 id="Class-Name"><a href="#Class-Name" class="headerlink" title="Class Name"></a><a href="https://peps.python.org/pep-0008/#class-names">Class Name</a></h3><p>使用駝峰命名法，範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCar</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make, self.model, self.year, self.odometer_reading = make, model, year, <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">full_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.year&#125;</span> <span class="hljs-subst">&#123;self.make&#125;</span> <span class="hljs-subst">&#123;self.model&#125;</span>&quot;</span><br><br>my_car = MyCar(<span class="hljs-string">&quot;Toyota&quot;</span>, <span class="hljs-string">&quot;Camry&quot;</span>, <span class="hljs-number">2022</span>)<br><span class="hljs-built_in">print</span>(my_car.full_name())<br></code></pre></td></tr></table></figure><h3 id="Package-and-Module-Names"><a href="#Package-and-Module-Names" class="headerlink" title="Package and Module Names"></a><strong><a href="https://peps.python.org/pep-0008/#package-and-module-names">Package and Module Names</a></strong></h3><ul><li>模組(Module)應該有短的、全小寫的名稱。如果可以提高可讀性，可以在模組名稱中使用底線 _</li><li>套件(Package)也應該有短的、全小寫的名稱，儘管不鼓勵使用底線</li></ul><h3 id="Function-and-Variable-Names"><a href="#Function-and-Variable-Names" class="headerlink" title="Function and Variable Names"></a><strong><a href="https://peps.python.org/pep-0008/#function-and-variable-names">Function and Variable Names</a></strong></h3><ul><li>函數(function)名稱應小寫，必要時用底線分隔單字以提高可讀性</li><li>變數(variable)與函數遵循相同規定</li></ul><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a><strong><a href="https://peps.python.org/pep-0008/#constants">Constants</a></strong></h3><ul><li>常數通常在模組層級定義，並全部用大寫字母書寫，並用下劃線分隔單字。例如：MAX_OVERFLOW 和 TOTAL。</li></ul><h2 id="命名整理"><a href="#命名整理" class="headerlink" title="命名整理"></a>命名整理</h2><table><thead><tr><th></th><th>命名規則</th></tr></thead><tbody><tr><td>Class Name</td><td>CapitalizedWords</td></tr><tr><td>Package and Module Names</td><td>lower_case_with_underscores</td></tr><tr><td>Function and Variable Names</td><td>lower_case_with_underscores</td></tr><tr><td>Constants</td><td>UPPER_CASE_WITH_UNDERSCORES</td></tr></tbody></table><p>透過閱讀PEP 8，也為編寫Python之路打下了良好的基礎，因為PEP8的內容很多，這裡只有舉比較常見的範例，細節還是可以去官方文件查看，分享給各位～</p><p>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://peps.python.org/pep-0008/">PEP 8 – Style Guide for Python Code</a></p></blockquote><blockquote><p><a href="https://www.udemy.com/course/python3-tips/">Udemy - Python 3 编程技巧汇总</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/python-pep8-style-guide-for-python-code/python-logo.png&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;圖片來源: &lt;a href=&quot;https://www.python.org/community</summary>
      
    
    
    
    <category term="Python" scheme="http://adora-xu.com/categories/Python/"/>
    
    
    <category term="python" scheme="http://adora-xu.com/tags/python/"/>
    
    <category term="pep8" scheme="http://adora-xu.com/tags/pep8/"/>
    
    <category term="style guide" scheme="http://adora-xu.com/tags/style-guide/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode: happy number</title>
    <link href="http://adora-xu.com/2024/02/26/leetcode-happy-number/"/>
    <id>http://adora-xu.com/2024/02/26/leetcode-happy-number/</id>
    <published>2024-02-26T03:26:48.000Z</published>
    <updated>2024-09-20T07:07:57.154Z</updated>
    
    <content type="html"><![CDATA[<style>  .em-div{  background-color: #d4a373;  color: white;  padding: 10px;  margin: 10px;  border-radius: 5px;  }</style><p>為了加強自己的程式能力，因此開始記錄刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題</p><img src="/images/leetcode-happy-number/happy-number.png"><p>題目來源：<a href="https://leetcode.com/problems/happy-number/description/">leetcode</a></p><p>其實這題和之前解過的<a href="https://adora-xu.com/2024/02/20/codewars-square-every-digit/">square every digit</a>蠻像的，都要將個別的數字平方，不過這裡多了判斷加總是否等於1的步驟。</p><p>其實到這步就可以寫出程式碼，利用不斷迭代加上判斷式，判斷是否為快樂數。<br>以Ruby示範可以這樣寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>)<br><span class="hljs-comment"># 解法一</span><br>  <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span><br>    n = n.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span> &#125;.sum<br>  <span class="hljs-keyword">end</span><br>  n == <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>但如果想要程式碼效率更高一點呢？</p><p>就需要更了解快樂數一點，關於快樂數的介紹，可以參考維基百科：<a href="https://zh.wikipedia.org/zh-tw/%E5%BF%AB%E6%A8%82%E6%95%B8">快樂數</a></p><p>其中有提到：</p><div class="em-div">不是快樂數的數稱為不快樂數（英語：unhappy number），所有不快樂數的數位平方和計算，最後都會進入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循環中。</div><p>因此，如果數字有<code>4</code>可以先排除，因為會進到無限循環中，這時程式碼可以寫成這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法二</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>)<br>  <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span> &amp;&amp; n != <span class="hljs-number">4</span><br>    n = n.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span> &#125;.sum<br>  <span class="hljs-keyword">end</span><br>  n == <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>也可以把循環的數字，製作成一個<code>set</code>，避掉所有不快樂數無限循環的可能：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法三</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>)<br>  cycle_set = <span class="hljs-title class_">Set</span>.new([<span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">37</span>, <span class="hljs-number">58</span>, <span class="hljs-number">89</span>, <span class="hljs-number">145</span>, <span class="hljs-number">42</span>, <span class="hljs-number">20</span>])<br><br>  <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span> &amp;&amp; !cycle_set.<span class="hljs-keyword">include</span>?(n)<br>    n = n.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span> &#125;.sum<br>  <span class="hljs-keyword">end</span><br><br>  n == <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>因為覺得第二種解法比較直觀，效率也比較好，因此<code>python</code> &amp; <code>js</code>我都使用第二種寫法：</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> n != <span class="hljs-number">4</span>:<br>        n = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(digit) ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(n))<br>    <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isHappy</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">while</span> (n !== <span class="hljs-number">1</span> &amp;&amp; n !== <span class="hljs-number">4</span>) &#123;<br>        n = <span class="hljs-title class_">String</span>(n).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, digit</span>) =&gt;</span> sum + digit ** <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n === <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
&lt;/style&gt;
&lt;p&gt;為了加強自</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="happy number" scheme="http://adora-xu.com/tags/happy-number/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: highest and lowest</title>
    <link href="http://adora-xu.com/2024/02/21/codewars-highest-and-lowest/"/>
    <id>http://adora-xu.com/2024/02/21/codewars-highest-and-lowest/</id>
    <published>2024-02-21T05:15:26.000Z</published>
    <updated>2024-09-20T07:07:57.150Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/554b4ac871d6813a03000035">Codewars - Highest and Lowest</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/codewars-highest-and-lowest/0221.png"></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">high_and_low</span>(<span class="hljs-params">numbers</span>)<br>  numbers.split.map(&amp;<span class="hljs-symbol">:to_i</span>).minmax.reverse.join(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby有一個蠻好用的方法，<a href="https://rubyapi.org/3.3/o/s?q=minmax">Array#minmax</a>，可以回傳陣列的最小值和最大值，範例如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>].minmax <span class="hljs-comment"># =&gt; [0, 2]</span><br></code></pre></td></tr></table></figure><p>但題目是<code>high_and_low</code>，所以需要<code>reverse</code>，並使用<code>.join(&#39; &#39;)</code>將陣列轉為字串。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">high_and_low</span>(<span class="hljs-params">numbers</span>):<br>    numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, numbers.split()))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">max</span>(numbers)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">min</span>(numbers)&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p><code>f&quot;&#123;max(numbers)&#125; &#123;min(numbers)&#125;&quot;</code>這裡使用<a href="https://docs.python.org/zh-tw/3/tutorial/inputoutput.html">f-string</a>將最大值和最小值插入到字符串中</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">highAndLow</span>(<span class="hljs-params">numbers</span>) &#123;<br>    <span class="hljs-keyword">const</span> nums = numbers.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.max(...nums)&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.min(...nums)&#125;</span>`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>JS和Python也是用類似方法～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/554b4ac871d6813a03000035&quot;&gt;Codewars - Highest and Lowest&lt;/a&gt;</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="highest and lowest" scheme="http://adora-xu.com/tags/highest-and-lowest/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: square every digit</title>
    <link href="http://adora-xu.com/2024/02/20/codewars-square-every-digit/"/>
    <id>http://adora-xu.com/2024/02/20/codewars-square-every-digit/</id>
    <published>2024-02-20T08:38:52.000Z</published>
    <updated>2024-09-20T07:07:57.150Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/546e2562b03326a88e000020">Codewars - Square Every Digit</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/codewars-square-every-digit/0220_2.png"></p><p>這次的題目就是將輸入的內容拆開為陣列，各別平方後，再加入組合起來就能得到答案了٩(^ᴗ^)۶</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_digits</span>(<span class="hljs-params">num</span>)<br>  num.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span>&#125;.join.to_i<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>聽到<code>各別</code>兩個字，腦中一定會自動聯想到<code>map</code>，這題也是使用<code>map</code>個字平方後再使用<code>join</code>組合成字串後，再使用<code>to_i</code>返還數字</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_digits</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(digit)**<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num)))<br></code></pre></td></tr></table></figure><p><code>python</code>則是寫法稍微不同，可以使用<code>for digit in str(num)</code>即可</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">squareDigits</span>(<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(num.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">digit</span> =&gt;</span> <span class="hljs-built_in">parseInt</span>(digit)**<span class="hljs-number">2</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>), <span class="hljs-number">10</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/546e2562b03326a88e000020&quot;&gt;Codewars - Square Every Digit&lt;/a&gt;</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="square every digit" scheme="http://adora-xu.com/tags/square-every-digit/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: sum of a sequence</title>
    <link href="http://adora-xu.com/2024/02/20/codewars-sum-of-a-sequence/"/>
    <id>http://adora-xu.com/2024/02/20/codewars-sum-of-a-sequence/</id>
    <published>2024-02-20T08:27:22.000Z</published>
    <updated>2024-09-20T07:07:57.150Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/586f6741c66d18c22800010a">Codewars - Sum of a sequence</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/Sum-of-a-sequence/0220.png"></p><p>這個題目也蠻有趣的，會給三個值<code>(begin,end,step)</code>，如果<code>begin &gt; end</code>則回傳<code>0</code>，沒有的話就以<code>step</code>為差，由<code>begin</code>加總至<code>end</code>，只要讀懂了題目依序寫成程式碼答案就出來了୧☉□☉୨</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_sum</span>(<span class="hljs-params">begin_number, end_number, step</span>)<br>  (begin_number..end_number).step(step).sum<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby的<code>step</code>有一個有趣的地方，只要範圍不對的話，就會回傳0，<br>所以如果<code>begin_number</code>&gt;<code>end_number</code>，即會回傳0，而不需要多加判斷</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_sum</span>(<span class="hljs-params">begin_number, end_number, step</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(begin_number, end_number + <span class="hljs-number">1</span>, step))<br></code></pre></td></tr></table></figure><p>和<code>ruby</code>不一樣的地方是，<code>python</code>的<code>Range</code>如果是<code>range(1,4)</code>，出現的結果會是<code>[1,2,3]</code>並不會包含最後一位數，所以這裡需要<code>+1</code></p><p>而Python和Ruby一樣，如果加總的範圍不對的話會回傳<code>0</code>，因此不需要額外填寫判斷式。<br>可以參考範例:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_sum</span>(<span class="hljs-params">begin_number, end_number, step</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(begin_number, end_number + <span class="hljs-number">1</span>, step))<br><br><span class="hljs-comment"># 範例</span><br><span class="hljs-built_in">print</span>(sequence_sum(<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))   <span class="hljs-comment"># 輸出: 0</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sequenceSum</span>(<span class="hljs-params">begin, end, step</span>) &#123;<br>    <span class="hljs-keyword">if</span> (begin &gt; end) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((end - begin) / step) + <span class="hljs-number">1</span> &#125;, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> begin + i * step).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, num</span>) =&gt;</span> sum + num, <span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>JS就沒那麼多好用的方法，但因為加總的公式也不複雜，這裡就使用判斷式+加總的公式解，效率也比較高～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/586f6741c66d18c22800010a&quot;&gt;Codewars - Sum of a sequence&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="Sum of a sequence" scheme="http://adora-xu.com/tags/Sum-of-a-sequence/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: sum of digits / digital root（02/21更新）</title>
    <link href="http://adora-xu.com/2024/02/18/codewars-sum-of-digits-digital-root/"/>
    <id>http://adora-xu.com/2024/02/18/codewars-sum-of-digits-digital-root/</id>
    <published>2024-02-18T08:33:13.000Z</published>
    <updated>2024-09-20T07:07:57.150Z</updated>
    
    <content type="html"><![CDATA[<p>這也是這幾天遇到程式的面試題目，一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/541c8630095125aba6000c00">Codewars</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！</p><img src="/images/codewars-digital-root/0218.png"><p>今天解的是<code>6kyu</code>的難度，做這個題目前想到<code>生命靈數</code>也是這樣取的，把自己的西元出生年月日依序加起來，得到的個位數就是自己的<code>生命靈數</code>。</p><p>可以使用<code>兩種</code>方法來解，一種是<code>遞迴</code>，一種經由<code>公式推導</code>計算式，解法如下：</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法一</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>)<br>  n &lt; <span class="hljs-number">10</span> ? n : digital_root(n.digits.sum)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>遞迴(recursion)</code>簡單來說就是函式會一直重複呼叫本身直到達成條件，<br>假如定義一個輸入值為<code>digital_root(666)</code><br>第一次的結果為<code>6 + 6 + 6 = 18</code>，但值還沒有達到條件的<code>n &lt; 10</code>，<br>所以會再重複呼叫一次，此時<code>n = 18</code>，<code>1 + 8 = 9</code>，<br>已經達到<code>n &lt; 10</code>的條件，因此會回傳<code>9</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法二</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>)<br>  n.zero? ? <span class="hljs-number">0</span> : (n - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>解法二就是之前常說的：如果在看到題目前多想一點，可以讓程式效率更高。<br>因為此字根是使用<code>10進位制</code>，每個字根都是<code>過9進位</code>，<code>數字和 &gt; 9</code>時就要再重複相加，因此這裡的<code>% 9</code>就是簡化重複相加的步驟，以下舉例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span>% <span class="hljs-number">9</span> = <span class="hljs-number">1</span><br><span class="hljs-symbol">100 </span>% <span class="hljs-number">9</span> = <span class="hljs-number">1</span><br><span class="hljs-symbol">1000 </span>% <span class="hljs-number">9</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>這樣看來應該<code>% 9</code>就可以得到答案，為什麼答案會是<code>n.zero? ? 0 : (n - 1) % 9 + 1</code>呢？</p><p>第一個是因為如果輸入值剛好是0的話，應該直接返回<code>0</code>，因此在前面加了判斷式。</p><p>第二個是因為<code>% 9</code>遇到<code>9的倍數</code>就會出錯，為了避免這個情況，會需要先將<code>n-1</code>，<code>%9</code>後再<code>+1</code>，這樣遇到9的倍數答案也能正確～</p><h2 id="2024-02-21更新"><a href="#2024-02-21更新" class="headerlink" title="2024&#x2F;02&#x2F;21更新"></a>2024&#x2F;02&#x2F;21更新</h2><p>這幾天去面試收到的反饋，既然已經知道會有遇到<code>9的倍數</code>就出錯的問題，怎麼不直接寫在程式碼裡呢？因此就出現了<code>解法三</code>，看起來更清楚！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法三</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>)<br>  <span class="hljs-keyword">case</span><br>  <span class="hljs-keyword">when</span> n.zero?<br>    <span class="hljs-number">0</span><br>  <span class="hljs-keyword">when</span> n % <span class="hljs-number">9</span> == <span class="hljs-number">0</span><br>    <span class="hljs-number">9</span><br>  <span class="hljs-keyword">else</span><br>    n % <span class="hljs-number">9</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>其實本題目也和鼎鼎大名的費氏列數解法相關，也有用到遞迴的概念，解法也一併補充在這裡：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>)<br>  n &lt;= <span class="hljs-number">1</span> ? n : fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>後面<code>Python</code>的解法和<code>JS</code>解法大致相同，只有寫法不同而已：</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">else</span> digital_root(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(digit) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(n)))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (n - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n % <span class="hljs-number">9</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n % <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">digitalRoot</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">10</span> ? n : <span class="hljs-title function_">digitalRoot</span>([...n.<span class="hljs-title function_">toString</span>()].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, digit</span>) =&gt;</span> sum + <span class="hljs-built_in">parseInt</span>(digit), <span class="hljs-number">0</span>));<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">digitalRoot2</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n === <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : (n - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">digitalRoot</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">case</span> n === <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">case</span> n % <span class="hljs-number">9</span> === <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> n % <span class="hljs-number">9</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這也是這幾天遇到程式的面試題目，一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/541c8630095125aba6000c00&quot;&gt;Codewars&lt;/a&gt;&lt;br&gt;一樣會用&lt;code&gt;Ruby&lt;/cod</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="sum of digits" scheme="http://adora-xu.com/tags/sum-of-digits/"/>
    
    <category term="digital root" scheme="http://adora-xu.com/tags/digital-root/"/>
    
    <category term="遞迴" scheme="http://adora-xu.com/tags/%E9%81%9E%E8%BF%B4/"/>
    
    <category term="recursion" scheme="http://adora-xu.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: credit card mask</title>
    <link href="http://adora-xu.com/2024/02/16/codewars-credit-card-mask/"/>
    <id>http://adora-xu.com/2024/02/16/codewars-credit-card-mask/</id>
    <published>2024-02-16T08:05:11.000Z</published>
    <updated>2024-09-20T07:07:57.149Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/5412509bd436bd33920011bc">Codewars</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/codewar-credit-card-mask/1.png"></p><p>如果有像是銀行卡號、銀行帳號等等機密訊息需要加密，可以使用此方法，僅顯示最後四碼，如果總數小於四碼就顯示所有內容。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maskify</span>(<span class="hljs-params">cc</span>)<br>  cc.size &gt; <span class="hljs-number">4</span> ? <span class="hljs-string">&quot;#&quot;</span> * (cc.size - <span class="hljs-number">4</span>) + cc[-<span class="hljs-number">4</span>..-<span class="hljs-number">1</span>] : cc<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby可以使用三元運算子來解，首先判斷數入的值長度<code>cc.size</code>是否大於4碼，因為最後面4碼要顯示，所以如果大於4碼，就將前面四碼的長度<code>cc.size</code>扣掉<code>4碼</code> * <code>#</code>，再使用<code>cc[-4..-1]</code>顯示倒數四位～倒數最後一位。</p><p>如果沒有大於4碼，就直接顯示<code>cc</code>即可 ٩(^ᴗ^)۶</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maskify</span>(<span class="hljs-params">cc</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span> * (<span class="hljs-built_in">len</span>(cc)-<span class="hljs-number">4</span>) + cc[-<span class="hljs-number">4</span>:]<br></code></pre></td></tr></table></figure><p>Python比較特別，如果字串<code>*</code>小於等於零的數字，會返還空值。<br>所以這裡不需要使用判斷式就可以完成o(^▽^)o</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">maskify</span>(<span class="hljs-params">cc</span>) &#123;<br>    <span class="hljs-keyword">return</span> cc.<span class="hljs-property">length</span> &gt; <span class="hljs-number">4</span> ? <span class="hljs-string">&quot;#&quot;</span>.<span class="hljs-title function_">repeat</span>(cc.<span class="hljs-property">length</span> - <span class="hljs-number">4</span>) + cc.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">4</span>) : cc<br>&#125;<br></code></pre></td></tr></table></figure><p>JS和Ruby的解法邏輯一樣，使用三元運算子判斷長度<code>cc.length</code>是否 &gt; 4，如果大於的話則返回扣掉4個長度的<code> &quot;#&quot;.repeat(cc.length - 4)</code>+最後四碼<code>cc.slice(-4)</code>，如果小於4直接返還<code>cc</code></p><p>Codewars 7kyu的題目和leetcode easy相比稍微簡單一點，很適合練習不同程式的基本用法～很可惜前幾天的Leetcode挑戰斷在Day 15，接下來繼續努力o(^∀^*)o</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/5412509bd436bd33920011bc&quot;&gt;Codewars&lt;/a&gt;&lt;br&gt;一樣會用&lt;code&gt;Ruby&lt;/c</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="credit card mask" scheme="http://adora-xu.com/tags/credit-card-mask/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day15 excel sheet column title</title>
    <link href="http://adora-xu.com/2024/02/13/leetcode-excel-sheet-column-title/"/>
    <id>http://adora-xu.com/2024/02/13/leetcode-excel-sheet-column-title/</id>
    <published>2024-02-13T15:45:41.000Z</published>
    <updated>2024-09-20T07:07:57.154Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十五天，讓我們開始吧！</p><img src="/images/leetcode-excel-sheet-column-title/0213.png"><p>題目來源：<a href="https://leetcode.com/problems/length-of-last-word/description/">leetcode</a></p><p>這次的題目蠻有趣的，是給予Excel的欄位將數換為數字，Excel欄位的慣例為：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean">A -&gt; <span class="hljs-number">1</span><br>B -&gt; <span class="hljs-number">2</span><br>C -&gt; <span class="hljs-number">3</span><br>...<br>Z -&gt; <span class="hljs-number">26</span><br>AA -&gt; <span class="hljs-number">27</span><br>AB -&gt; <span class="hljs-number">28</span> <br>...<br></code></pre></td></tr></table></figure><p>A<del>Z是1</del>26，27是AA,28是AB，依序下去，等於是滿<code>26</code>後會進位。<br>這樣來看，其實Excel欄位和26進位蠻像的，轉換需要 &#x2F; 26後的餘數對應到相應的字母即可（和十進位轉二進位有點像），因為剛好對應的是字母，可以將其轉換為<code>ASCII</code>碼，在<code>ASCII</code>裡，<code>A</code>為<code>065</code>、<code>B</code>為<code>066</code>….依序排序，排序到<code>Z</code>為<code>090</code>。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_to_title</span>(<span class="hljs-params">column_number</span>)<br>  result = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#利用空字串來儲存結果</span><br>  <span class="hljs-keyword">while</span> column_number &gt; <span class="hljs-number">0</span><br>    column_number -= <span class="hljs-number">1</span> <span class="hljs-comment"># 減去1，這樣1就對應到&#x27;A&#x27;</span><br>    result = (<span class="hljs-string">&#x27;A&#x27;</span>.ord + column_number % <span class="hljs-number">26</span>).chr + result<br>    <span class="hljs-comment"># 取得對應字母，加到結果字串的最前面</span><br>    column_number /= <span class="hljs-number">26</span><br>    <span class="hljs-comment"># 將 column_number 除以 26，以處理下一位數字</span><br>  <span class="hljs-keyword">end</span><br>  result<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>column_number -= 1</code><br>此方法是利用<code>餘數</code>先取<code>個位數</code>的字母，再<code>/26</code>取得接下來的數字字母，會需要先<code>-1</code>，這樣<code>1</code>才能對應到<code>A</code></p><p><code>result = (&#39;A&#39;.ord + column_number % 26).chr + result</code><br>這段的<code>ord</code>是將字母轉換為<code>ASCII</code>，因為每個字母都是按照順序排序，所以中間的差數就是<code>&#39;A&#39;.ord</code>，最後再使用<code>.chr</code>轉為數字，最後 <code>+ result</code>更新<code>result</code>的數，並確保下一個<code>result</code>會放在前面</p><p>接著最後再將輸入值<code>/26</code>來處理下一位數（真的和十進位轉二進位蠻像的～）</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertToTitle</span>(<span class="hljs-params">self, columnNumber: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        result = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> columnNumber:<br>            columnNumber -= <span class="hljs-number">1</span><br>            result = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + columnNumber % <span class="hljs-number">26</span>) + result<br>            columnNumber //= <span class="hljs-number">26</span><br>        <span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure><p>Python和Ruby的解法相同，只要改變寫法即可！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertToTitle</span>(<span class="hljs-params">columnNumber</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (columnNumber &gt; <span class="hljs-number">0</span>) &#123;<br>        columnNumber--;<br>        result = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-string">&#x27;A&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) + columnNumber % <span class="hljs-number">26</span>) + result;<br>        columnNumber = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(columnNumber / <span class="hljs-number">26</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>JS也和Ruby的解法相同，只要改變寫法即可！<br>今天就到這裡～明天繼續加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十五天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="excel sheet column title" scheme="http://adora-xu.com/tags/excel-sheet-column-title/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day14 sqrtx</title>
    <link href="http://adora-xu.com/2024/02/12/leetcode-sqrtx/"/>
    <id>http://adora-xu.com/2024/02/12/leetcode-sqrtx/</id>
    <published>2024-02-12T14:36:08.000Z</published>
    <updated>2024-09-20T07:07:57.159Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十四天，讓我們開始吧！</p><img src="/images/sqrtx/1.png"><p>題目來源：<a href="https://leetcode.com/problems/sqrtx/">leetcode</a></p><p>今天的題目是尋找平方根，但是不能用內建的數學方法來找，題目解釋如下：</p><p>在给定一个非負整數 x 的情况下，返回四捨五入到最接近整数的 x 的平方根。返回的整數也應為非負整数。</p><p>不得使用任何内置指数函数或运算符。<br>例如，請勿在 c++ 中使用 pow(x, 0.5) 或在 python 中使用 x ** 0.5。</p><p>題目還算單純，因為僅要四捨五入到整數位即可，也可以使用昨天用到的<code>二分法</code>，從中間切一半開始測試，這樣很快就可以找到了！</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_sqrt</span>(<span class="hljs-params">x</span>)<br>  <span class="hljs-comment"># 左右邊界為0...x</span><br>  left, right = <span class="hljs-number">0</span>, x<br><br>  <span class="hljs-keyword">while</span> left &lt;= right<br>    mid = (left + right) / <span class="hljs-number">2</span>  <span class="hljs-comment"># 計算中間值</span><br>    mid_squared = mid * mid  <span class="hljs-comment"># 計算中間值的平方</span><br><br>    <span class="hljs-keyword">if</span> mid_squared == x<br>      <span class="hljs-keyword">return</span> mid.to_i  <span class="hljs-comment"># 如果中間值的平方等於 x，返回中間值（轉換為整數形式）</span><br>    <span class="hljs-keyword">elsif</span> mid_squared &lt; x<br>      left = mid + <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方小於 x，就使用mid+1...x來比較，因此調整left的值</span><br>    <span class="hljs-keyword">else</span><br>      right = mid - <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方大於 x，就使用left...mid-1來比較，因此調整right的值</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">return</span> right.to_i  <span class="hljs-comment"># 當 left &gt; right 時，right 就是小於或等於平方根的整數值，因此要向下取整，所以返回右邊界（轉換為整數形式）</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 左右邊界為0...x</span><br>        left, right = <span class="hljs-number">0</span>, x<br><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span>  <span class="hljs-comment"># 計算中間值</span><br>            mid_squared = mid * mid  <span class="hljs-comment"># 計算中間值的平方</span><br><br>            <span class="hljs-keyword">if</span> mid_squared == x:<br>                <span class="hljs-keyword">return</span> mid  <span class="hljs-comment"># 如果中間值的平方等於 x，返回中間值</span><br>            <span class="hljs-keyword">elif</span> mid_squared &lt; x:<br>                left = mid + <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方小於 x，調整左邊界</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid - <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方大於 x，調整右邊界</span><br><br>        <span class="hljs-keyword">return</span> right  <span class="hljs-comment"># 因為要向下取整，所以返回右邊界</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> right = x;<br>  <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((left + right) / <span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">const</span> midSquared = mid * mid;<br>  <br>      <span class="hljs-keyword">if</span> (midSquared === x) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midSquared &lt; x) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> right;<br>  &#125;<br></code></pre></td></tr></table></figure><p>雖然如果使用內建的方法超快就可以解出來了，但學習使用二分法也能夠在其他的條件下應用！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十四天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="sqrtx" scheme="http://adora-xu.com/tags/sqrtx/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day13 search insert position</title>
    <link href="http://adora-xu.com/2024/02/11/search-insert-position/"/>
    <id>http://adora-xu.com/2024/02/11/search-insert-position/</id>
    <published>2024-02-11T14:09:20.000Z</published>
    <updated>2024-09-20T07:07:57.161Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十三天，讓我們開始吧！</p><img src="/images/search-insert-position/1.png"><p>題目來源：<a href="https://leetcode.com/problems/search-insert-position/description/">leetcode</a></p><p>一開始看到題目原本想說，把數字插入陣列中排序後再返還索引值就好，但實際執行卻發現效率很差ʘ‿ʘ。</p><p>後來想到可以使用二分法，先取中間的數字與target比較，分成兩邊，這樣最多就只要比較陣列一半的數量就好，會比較有效率，就像是猜數字，如果一開始就對半猜，猜到數字的機率也會快很多。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_insert</span>(<span class="hljs-params">nums, target</span>)<br>  left, right = <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">while</span> left &lt;= right<br>    mid = (left + right) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> nums[mid] == target<br>      <span class="hljs-keyword">return</span> mid<br>    <span class="hljs-keyword">elsif</span> nums[mid] &lt; target<br>      left = mid + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span><br>      right = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">return</span> left<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>這裡的<code>left</code>是指陣列的起始索引值，為<code>0</code>，<code>right</code>是陣列的結束值，為<code>nums.length - 1</code>，<code>mid</code>就是中間的索引值<code>(left+right)/2</code></p><p>如果照排序看可以這樣理解：<br><code>left</code>,<code>mid</code>,<code>right</code></p><p>一開始先猜中間，如果運氣好就是中間值，可直接返還<code>mid</code>。</p><p>如果<code>target</code>比較大，即縮小<code>left</code>的範圍為<code>mid + 1</code>，比較數字的範圍也到了右半邊，接著會繼續新的迴圈，再繼續對半切取新的<code>mid</code>值比較。</p><p>如果<code>target</code>比較小，則縮小<code>right</code>的範圍為<code>mid - 1</code>，比較數字在左半邊，繼續新的迴圈，再繼續對半切取新的<code>mid</code>值比較。</p><p>直到<code>nums[mid] = target</code>，即會返還<code>mid</code>，也就是索引值。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchInsert</span>(<span class="hljs-params">self, nums, target</span>):<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid - <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure><p><code>python</code>也是一樣邏輯，只是部分寫法不同</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchInsert = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((left + right) / <span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> left;<br>  &#125;;<br></code></pre></td></tr></table></figure><p><code>js</code>也是相同，不過需要添加<code>Math.floor</code>讓<code>mid</code>值為無條件捨去</p><p>這就是今天的解題了～其實不管什麼題目都可以用最笨的方法解，但是如果在讀題目時多想一點，就能讓程式碼效率更高！接下來幾天繼續加油🙌</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十三天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="search insert position" scheme="http://adora-xu.com/tags/search-insert-position/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day12 plus one</title>
    <link href="http://adora-xu.com/2024/02/10/leetcode-plus-one/"/>
    <id>http://adora-xu.com/2024/02/10/leetcode-plus-one/</id>
    <published>2024-02-10T12:05:07.000Z</published>
    <updated>2024-09-20T07:07:57.157Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十二天，讓我們開始吧！</p><img src="/images/leetcode-plus-one/0210.png"><p>題目來源：<a href="https://leetcode.com/problems/plus-one/">leetcode</a></p><p>這題題目很簡單，只要會使用將數字陣列轉為整數再加一，接著再轉回數字陣列就可以得到答案～</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">plus_one</span>(<span class="hljs-params">digits</span>)<br>  (digits.join(<span class="hljs-string">&#x27;&#x27;</span>).to_i + <span class="hljs-number">1</span>).to_s.chars.map(&amp;<span class="hljs-symbol">:to_i</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>.map(&amp;:to_i)</code>原始的寫法為<code>.map&#123; |num| num.to_i &#125;</code></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plusOne</span>(<span class="hljs-params">self, digits</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(digit) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, digits))) + <span class="hljs-number">1</span>)]<br></code></pre></td></tr></table></figure><p>Python轉換型態都是包一個括號在外面，<code>int(&#39;&#39;.join(map(str, digits)))</code>為將陣列內每一字連接為字串最後轉為整數，而後<code>+1</code>，再利用<code>str()</code>轉為字串。</p><p>最後將每一字轉為整數陣列回傳。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> plusOne = <span class="hljs-keyword">function</span>(<span class="hljs-params">digits</span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-title class_">BigInt</span>(digits.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)) + <span class="hljs-number">1n</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>);<br>  &#125;;<br></code></pre></td></tr></table></figure><p>在<code>js</code>比較特別，使用<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>，BigInt 是一個內建的物件，提供了表示大於 2^53 的整數的功能 (2^53 是 JavaScript 原生的Number能夠表示的最大值)，因為使用<code>BigInt</code>型態，所以<code>+1</code>要使用<code>+1n</code>，才能得到加一後的結果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十二天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="plus one" scheme="http://adora-xu.com/tags/plus-one/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day11 single number</title>
    <link href="http://adora-xu.com/2024/02/09/leetcode-single-number/"/>
    <id>http://adora-xu.com/2024/02/09/leetcode-single-number/</id>
    <published>2024-02-09T02:50:44.000Z</published>
    <updated>2024-09-20T07:07:57.159Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十一天，讓我們開始吧！</p><img src="/images/leetcode-single-number/1.png"><p>題目來源：<a href="https://leetcode.com/problems/single-number">leetcode</a></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">single_number</span>(<span class="hljs-params">nums</span>)<br>  nums.reduce(<span class="hljs-symbol">:^</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>這次用到<code>XOR</code>符號<code>^</code>，這是種運算邏輯，用於對兩個二進制數的對應位進行比較，規則如下：兩個對應位數字不同，會回傳<code>1</code>，兩個對應位不同則會回傳<code>0</code>，用此來找出只出現一次的數字。</p><p>範例如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-number">0</span> xor <span class="hljs-number">0</span> = <span class="hljs-number">0</span><br><span class="hljs-number">0</span> xor <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br><span class="hljs-number">1</span> xor <span class="hljs-number">0</span> = <span class="hljs-number">1</span><br><span class="hljs-number">1</span> xor <span class="hljs-number">1</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果我們傳入<code>[4, 1, 2, 1, 2]</code>呢？根據<code>reduce(:^)</code>會這樣運算<code>4 ^ 1 ^ 2 ^ 1 ^ 2</code>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby">  <span class="hljs-number">4</span>:  <span class="hljs-number">100</span><br>  <span class="hljs-number">1</span>:  <span class="hljs-number">001</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">101</span>  <br><br>  <span class="hljs-number">5</span>:  <span class="hljs-number">101</span><br>  <span class="hljs-number">2</span>:  <span class="hljs-number">010</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">111</span> <br><br>  <span class="hljs-number">7</span>:  <span class="hljs-number">111</span><br>  <span class="hljs-number">1</span>:  <span class="hljs-number">001</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">110</span> <br><br>  <span class="hljs-number">6</span>:  <span class="hljs-number">110</span><br>  <span class="hljs-number">2</span>:  <span class="hljs-number">010</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>也可以用另外一個方法理解，<code>1 ^ 1 = 0</code>, <code>2 ^ 2 = 0</code>, <code>0 ^ 4 = 4</code><br>只要有不同於其他的數，就會被留下來，這樣答案就出來了！</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x, y: x ^ y, nums)<br></code></pre></td></tr></table></figure><p>Python也是一樣邏輯，只不過<code>reduce</code>寫法不同，可以參考：<a href="https://docs.python.org/3.0/library/functools.html">reduce</a></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> singleNumber = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, num</span>) =&gt;</span> acc ^ num, <span class="hljs-number">0</span>);<br>  &#125;;<br></code></pre></td></tr></table></figure><p>JS也是一樣邏輯，只不過<code>reduce</code>寫法不同，可以參考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十一天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="single number" scheme="http://adora-xu.com/tags/single-number/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day10 valid palindrome</title>
    <link href="http://adora-xu.com/2024/02/08/leetcode-valid-palindrome/"/>
    <id>http://adora-xu.com/2024/02/08/leetcode-valid-palindrome/</id>
    <published>2024-02-08T15:03:06.000Z</published>
    <updated>2024-09-20T07:07:57.159Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十天，終於完成1&#x2F;3了，讓我們開始吧！</p><img src="/images/leetcode-valid-palindrome/banner.png"><p>題目來源：<a href="https://leetcode.com/problems/valid-palindrome">leetcode</a></p><p>這個問題要求判斷句子是否為回文。在進行比較時，會需要先將所有字母轉換為小寫，並去除所有非字母和數字。然後，比較處理過的字串是否和它的反轉相等。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_palindrome</span>(<span class="hljs-params">s</span>)<br>  clean_s = s.downcase.gsub(<span class="hljs-regexp">/[^a-z0-9]/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  clean_s == clean_s.reverse<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>使用<code>downcase</code>將字符轉換為小寫，再使用<code>gsub</code>去除非字母和數字的字，最後比較反轉是否相同就完成了～</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_palindrome</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 將字符轉換為小寫，去除非字母和數字的字</span><br>    clean_s = <span class="hljs-string">&#x27;&#x27;</span>.join(char.lower() <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> char.isalnum())<br>    <span class="hljs-comment"># 比較處理過的字串和它的反轉是否相等</span><br>    <span class="hljs-keyword">return</span> clean_s == clean_s[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><code>isalnum()</code>方法用於檢查字符串中的所有字是否都是字母和數字。如果是，該方法返回 True，表示所有字符均為字母（a-z、A-Z）和數字（0-9）。反之，如果字符串中包含非字母和非數字的字符，例如空格、驚嘆號、井號、百分號、和問號等，該方法將返回 False。</p><p>使用這個方法就不用使用<code>gsub</code>取代了，因為只有是字母和數字才會放進<code>clean_s</code>裡</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-comment">// 將字串轉換為小寫，去除非字母和數字</span><br>  <span class="hljs-keyword">const</span> cleanS = s.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^a-z0-9]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">// 比較處理過的字串和它的反轉是否相等</span><br>  <span class="hljs-keyword">return</span> cleanS === cleanS.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十天，終於完成1&amp;#x2F;3了，讓我們開始吧！&lt;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="valid palindrome" scheme="http://adora-xu.com/tags/valid-palindrome/"/>
    
  </entry>
  
</feed>
