<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adora&#39;s Blog</title>
  
  
  <link href="http://adora-xu.com/atom.xml" rel="self"/>
  
  <link href="http://adora-xu.com/"/>
  <updated>2024-03-14T03:08:32.655Z</updated>
  <id>http://adora-xu.com/</id>
  
  <author>
    <name>Adora Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>職涯: 五倍紅寶石轉職之旅</title>
    <link href="http://adora-xu.com/2024/03/14/from-relationshop-manager-to-software-engineer/"/>
    <id>http://adora-xu.com/2024/03/14/from-relationshop-manager-to-software-engineer/</id>
    <published>2024-03-14T00:58:49.000Z</published>
    <updated>2024-03-14T03:08:32.655Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/from-relationshop-manager-to-software-engineer/01.JPG"><p>沒想到也輪到我分享轉職成功心得了！</p><p>在做出轉職決定之前，我參考了許多人的轉職經驗，學長姐們分享的成功轉職故事，不僅鞏固了我的信心，也讓我受益匪淺。</p><p>現在，我想分享我的轉職歷程，希望能幫助更多的人。</p><p>轉職前的工作是外商銀行的客戶關係經理，感謝這份經歷讓我對金融環境有更多的認識、也增進了應對進退與溝通能力。也許是金融經驗的增加，對市場瞭解得愈多，愈發現金融市場的變化莫測，也發現自己對於販賣金融商品始終無法產生熱情。</p><p>因此在經過深思熟慮之後，我選擇了轉職軟體工程師。</p><h2 id="轉職前準備"><a href="#轉職前準備" class="headerlink" title="轉職前準備"></a>轉職前準備</h2><p>為了讓自己確定轉職的決心，我先給自己一個月的時間自習線上課程，每天規定自己進度和要完成的事項，最後也順利完成進度。</p><p>不過僅靠線上課程並不完全適合我，我還是希望能有同伴能夠一起討論、製作專題，並且希望有業界經驗的老師引路，提供正確的學習方法。</p><p>諮詢過多個機構後，因為師資透明、教學內容貼近業界等因素，我最後選擇了ASTRO X 五倍紅寶石・五倍學院全端工程師培訓課。</p><h2 id="踏上轉職之路"><a href="#踏上轉職之路" class="headerlink" title="踏上轉職之路"></a>踏上轉職之路</h2><p>在報名完課程之後，五倍會寄送線上先修教材，為了在正式上課時能夠順利銜接，我在拿到先修課程後便規劃自己每日的進度、有時間的話也會跟著實作。</p><p>在五倍上課，學了HTML, CSS, JS, Ruby on Rails, Git等課程，五倍的師資很優秀，能夠從原理講解，能更清楚地講解<strong>為什麼做？這樣做有什麼好處？還有什麼其他的做法？利弊又是什麼？</strong>，而不是僅是單純地教「做出東西來」，也秉持著「有問題盡量問」，每天課堂結束也有助教時間提供學生詢問，讓同學們不要帶著問題回家，因此這三個月的過程很精實。</p><p>龍哥也很鼓勵同學們寫部落格，因為新的知識理解吸收後，再透過自己整理、寫成文章，能夠加深印象並梳理邏輯。</p><p>另外五倍還有許軟軟性課程，透過產品開發課、簡報表達課、企業參訪課以及組員協作製作實體專案，了解業界實體的開發過程，完成後也和組員們一同製作專題。<p></p><h2 id="心態"><a href="#心態" class="headerlink" title="心態"></a>心態</h2><p>這次的轉職經驗讓我發現，正確的心態很重要，因為轉職的路上不免會遇到許多的挫折，除了可以多加利用五倍提供的資源（老師、助教、課務組等），我覺得最重要的還是要「相信自己並付諸行動」。</p><p>我是一個很容易多想的人，因此在轉職時我時常鼓勵自己，只要一感到焦慮就去開電腦、寫code、寫部落格、刷leetcode、刷codewar、看教學影片，久而久之心中的焦慮會逐漸轉化為平靜和自信。</p><h2 id="未來"><a href="#未來" class="headerlink" title="未來"></a>未來</h2><p>完成五倍的課程還不是轉職之路的結束，只是開始而已，但透過這三個月的課程，因為有五倍的老師、助教、課務組的正確引導，讓我的轉職之路有了好的開始。</p><p>在課程結束一個月左右，我拿到了多個軟體工程師offer，這是在轉職前我絕對想不到的。</p><p>目前的自己還有很多的不足，但就像學習程式的過程一樣，知道自己哪裡不足就加強哪裡，終究會離自己的目標更進一步。</p><p>如果你還在猶豫不決，可以報名<a href="https://5xcampus.com/camp/">ASTRO Camp的說明會</a>，課務組不會推銷、都很親切，會詳細解答你的所有問題～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/from-relationshop-manager-to-software-engineer/01.JPG&quot;&gt;

&lt;p&gt;沒想到也輪到我分享轉職成功心得了！&lt;/p&gt;
&lt;p&gt;在做出轉職決定之前，我參考了許多人的轉職經驗，學長姐們分享的成功轉職故事，</summary>
      
    
    
    
    <category term="職涯" scheme="http://adora-xu.com/categories/%E8%81%B7%E6%B6%AF/"/>
    
    
    <category term="轉職" scheme="http://adora-xu.com/tags/%E8%BD%89%E8%81%B7/"/>
    
    <category term="職涯" scheme="http://adora-xu.com/tags/%E8%81%B7%E6%B6%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python: PEP 8 程式碼風格指南 </title>
    <link href="http://adora-xu.com/2024/03/01/python-pep8-style-guide-for-python-code/"/>
    <id>http://adora-xu.com/2024/03/01/python-pep8-style-guide-for-python-code/</id>
    <published>2024-03-01T07:20:11.000Z</published>
    <updated>2024-03-01T07:35:10.527Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/python-pep8-style-guide-for-python-code/python-logo.png"><blockquote><p>圖片來源: <a href="https://www.python.org/community/logos/">Python.org</a></p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>自己在練習寫Python時，常覺得怪怪的，後來才發現，是因為我沒有了解Python的書寫風格。<br>就像練習寫作文要了解句讀的規則，寫程式一開始，也需要清楚該程式的書寫風格，才能夠在打好基礎架構下精進。</p><p>雖然目前有許多方便的小工具，能夠自動幫忙整理排版、縮排等等，但覺得自己應該要先知道為什麼，再利用工具，才能夠更順利～</p><p>Python有定義了PEP(Python Enhancement Proposal)，裡面有許多章節，而其中的<a href="https://peps.python.org/pep-0008/">PEP 8 – Style Guide for Python Code</a>，則可以解決我的煩惱，因為PEP 8的內容有很多，以下文章會分享自己覺得常用的規範。</p><h2 id="縮排-Indentation"><a href="#縮排-Indentation" class="headerlink" title="縮排 Indentation"></a><a href="https://peps.python.org/pep-0008/#indentation">縮排 Indentation</a></h2><ul><li>每行縮排4個空格</li><li>續行應該在括號內的垂直對齊：</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">foo = long_function_name(var_one, var_two,<br>                         var_three, var_four)<br></code></pre></td></tr></table></figure><p>❎錯誤示範</p><p>第一行若要保留參數的話，括號應該要垂直對齊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">foo = long_function_name(var_one, <br>var_two,var_three, var_four)<br></code></pre></td></tr></table></figure><ul><li>續行亦可使用懸掛縮排。在使用懸掛縮排時，應考慮以下幾點：第一行不應有參數（要按Enter換到下一行），應使用進一步的縮排來明確區分自己是一個續行：</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#懸掛縮排</span><br>foo = long_function_name(<br>    var_one, var_two,<br>    var_three, var_four)<br></code></pre></td></tr></table></figure><p>依據以上的規則，提供多一點示範：</p><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">context</span>(<span class="hljs-params">user, password, </span><br><span class="hljs-params">            timeout, command</span>):<br>    <span class="hljs-keyword">pass</span><br><br>user_list = [<br>    <span class="hljs-string">&#x27;user1&#x27;</span>,<br>    <span class="hljs-string">&#x27;user2&#x27;</span>,<br>    <span class="hljs-string">&#x27;user3&#x27;</span>,<br>    <span class="hljs-string">&#x27;user4&#x27;</span><br>]<br></code></pre></td></tr></table></figure><p>❎錯誤示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">context</span>(<span class="hljs-params">user, password, </span><br><span class="hljs-params">    timeout, command</span>):<br>    <span class="hljs-keyword">pass</span><br><br>user_list = [<br>    <span class="hljs-string">&#x27;user1&#x27;</span>,<br>    <span class="hljs-string">&#x27;user2&#x27;</span>,<br>    <span class="hljs-string">&#x27;user3&#x27;</span>,<br>    <span class="hljs-string">&#x27;user4&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="括號-brace-bracket-parenthesis"><a href="#括號-brace-bracket-parenthesis" class="headerlink" title="括號 brace&#x2F;bracket&#x2F;parenthesis"></a>括號 brace&#x2F;bracket&#x2F;parenthesis</h3><p>括號單獨一行，縮排 or 不縮排都可以</p><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>    <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>    ]<br>result = some_function_that_takes_arguments(<br>    <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>,<br>    )<br></code></pre></td></tr></table></figure><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<br>    <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>    <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>]<br>result = some_function_that_takes_arguments(<br>    <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>,<br>)<br></code></pre></td></tr></table></figure><ul><li>每行程式碼最長不要超過79個字：為什麼是79個字呢？因為當初定義PEP8時年代久遠，螢幕比較小，79剛好符合某種螢幕的寬度🤣，不過因為現在螢幕的寬度都做得比較大，因此此規範可以靈活應對。</li></ul><h2 id="空行-Blank-Lines"><a href="#空行-Blank-Lines" class="headerlink" title="空行 Blank Lines"></a><a href="https://peps.python.org/pep-0008/#blank-lines">空行 Blank Lines</a></h2><ul><li>寫多個函數，函數間要空兩個空行</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>在同一個class內的兩個method，method間要空一個空行</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_something</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a><a href="https://peps.python.org/pep-0008/#imports">Imports</a></h2><ul><li>導入通常應該在單獨的行上：</li></ul><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br></code></pre></td></tr></table></figure><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> Popen, PIPE<br></code></pre></td></tr></table></figure><p>❎錯誤示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, os<br></code></pre></td></tr></table></figure><h3 id="Import-Order"><a href="#Import-Order" class="headerlink" title="Import Order"></a>Import Order</h3><p>導入順序應該依照以下分組：</p><ol><li>Standard library imports.(Python內建Library)</li><li>Related third party imports.(第三方)</li><li>Local application&#x2F;library specific imports.(本地Module相互導入)</li></ol><p>應該在每組導入中間加一行空行</p><p>✅正確示範</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> abort<br><span class="hljs-keyword">from</span> werkzeug.security <span class="hljs-keyword">import</span> generate_password_hash, check_password_hash<br><br><span class="hljs-keyword">from</span> my_project.extensions <span class="hljs-keyword">import</span> database<br><span class="hljs-keyword">from</span> my_project.utils <span class="hljs-keyword">import</span> custom_function, custom_url<br></code></pre></td></tr></table></figure><h2 id="空格-White-Space"><a href="#空格-White-Space" class="headerlink" title="空格 White Space"></a><a href="https://peps.python.org/pep-0008/#whitespace-in-expressions-and-statements">空格 White Space</a></h2><h3 id="避免多餘空格"><a href="#避免多餘空格" class="headerlink" title="避免多餘空格"></a>避免多餘空格</h3><ul><li>括號與內容間不需要空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>spam(ham[<span class="hljs-number">1</span>], &#123;eggs: <span class="hljs-number">2</span>&#125;)<br><span class="hljs-comment"># Wrong:</span><br>spam( ham[ <span class="hljs-number">1</span> ], &#123; eggs: <span class="hljs-number">2</span> &#125; )<br></code></pre></td></tr></table></figure><ul><li>空格接在逗號、分號、冒號之後</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br><span class="hljs-keyword">if</span> x == <span class="hljs-number">4</span>: <span class="hljs-built_in">print</span>(x, y); x, y = y, x<br><span class="hljs-comment"># Wrong:</span><br><span class="hljs-keyword">if</span> x == <span class="hljs-number">4</span> : <span class="hljs-built_in">print</span>(x , y) ; x , y = y , x<br></code></pre></td></tr></table></figure><ul><li>但是，在切片中，冒號的作用類似於二元運算符，兩個冒號必須相同間距。例外：當省略切片參數時，空格也被省略：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>ham[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>], ham[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>:<span class="hljs-number">3</span>], ham[:<span class="hljs-number">9</span>:<span class="hljs-number">3</span>], ham[<span class="hljs-number">1</span>::<span class="hljs-number">3</span>], ham[<span class="hljs-number">1</span>:<span class="hljs-number">9</span>:]<br>ham[lower:upper], ham[lower:upper:], ham[lower::step]<br>ham[lower+offset : upper+offset]<br>ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]<br>ham[lower + offset : upper + offset]<br></code></pre></td></tr></table></figure><ul><li>左括號前方不需要有空格：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>dct[<span class="hljs-string">&#x27;key&#x27;</span>] = lst[index]<br><span class="hljs-comment"># Wrong:</span><br>dct [<span class="hljs-string">&#x27;key&#x27;</span>] = lst [index]<br></code></pre></td></tr></table></figure><ul><li>變數等號左右各一個空格、但不需要強制對齊：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Correct:</span><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">2</span><br>long_variable = <span class="hljs-number">3</span><br><br><span class="hljs-comment"># Wrong:</span><br>x             = <span class="hljs-number">1</span><br>y             = <span class="hljs-number">2</span><br>long_variable = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="注釋-Comments"><a href="#注釋-Comments" class="headerlink" title="注釋 Comments"></a><a href="https://peps.python.org/pep-0008/#comments">注釋 Comments</a></h2><ul><li><strong><a href="https://peps.python.org/pep-0008/#block-comments">Block Comments</a></strong></li><li><strong><a href="https://peps.python.org/pep-0008/#inline-comments">Inline Comments</a></strong><ul><li><code>#</code>後隔一個空格，注釋與程式碼間至少要隔兩個空格：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = x + <span class="hljs-number">1</span>                 <span class="hljs-comment"># Compensate for border</span><br></code></pre></td></tr></table></figure><ul><li><strong><a href="https://peps.python.org/pep-0008/#documentation-strings">Documentation Strings</a></strong><ul><li>應該出現在def之後</li><li>結束的<code>“”“</code>應該要單獨占一行</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_numbers</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    這是一個加法函數，用於將兩個數字相加。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    參數：</span><br><span class="hljs-string">    a (int): 第一個數字</span><br><span class="hljs-string">    b (int): 第二個數字</span><br><span class="hljs-string"></span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">    int: 兩個數字的和</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br></code></pre></td></tr></table></figure><h2 id="命名規則-Naming-Conventions"><a href="#命名規則-Naming-Conventions" class="headerlink" title="命名規則 Naming Conventions"></a><a href="https://peps.python.org/pep-0008/#naming-conventions">命名規則 <strong>Naming Conventions</strong></a></h2><p>以下為常見的命名方式：</p><ul><li><code>b</code>（單個小寫字母）</li><li><code>B</code>（單一大寫字母）</li><li><code>lowercase</code></li><li><code>lower_case_with_underscores</code></li><li><code>UPPERCASE</code></li><li><code>UPPER_CASE_WITH_UNDERSCORES</code></li><li><code>CapitalizedWords</code> （也是駝峰式命名法 CapWords, or CamelCase）</li><li><code>mixedCase</code>（與 CatalizedWords 的區別在於首字母小寫）</li></ul><h3 id="Class-Name"><a href="#Class-Name" class="headerlink" title="Class Name"></a><a href="https://peps.python.org/pep-0008/#class-names">Class Name</a></h3><p>使用駝峰命名法，範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCar</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make, self.model, self.year, self.odometer_reading = make, model, year, <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">full_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.year&#125;</span> <span class="hljs-subst">&#123;self.make&#125;</span> <span class="hljs-subst">&#123;self.model&#125;</span>&quot;</span><br><br>my_car = MyCar(<span class="hljs-string">&quot;Toyota&quot;</span>, <span class="hljs-string">&quot;Camry&quot;</span>, <span class="hljs-number">2022</span>)<br><span class="hljs-built_in">print</span>(my_car.full_name())<br></code></pre></td></tr></table></figure><h3 id="Package-and-Module-Names"><a href="#Package-and-Module-Names" class="headerlink" title="Package and Module Names"></a><strong><a href="https://peps.python.org/pep-0008/#package-and-module-names">Package and Module Names</a></strong></h3><ul><li>模組(Module)應該有短的、全小寫的名稱。如果可以提高可讀性，可以在模組名稱中使用底線 _</li><li>套件(Package)也應該有短的、全小寫的名稱，儘管不鼓勵使用底線</li></ul><h3 id="Function-and-Variable-Names"><a href="#Function-and-Variable-Names" class="headerlink" title="Function and Variable Names"></a><strong><a href="https://peps.python.org/pep-0008/#function-and-variable-names">Function and Variable Names</a></strong></h3><ul><li>函數(function)名稱應小寫，必要時用底線分隔單字以提高可讀性</li><li>變數(variable)與函數遵循相同規定</li></ul><h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a><strong><a href="https://peps.python.org/pep-0008/#constants">Constants</a></strong></h3><ul><li>常數通常在模組層級定義，並全部用大寫字母書寫，並用下劃線分隔單字。例如：MAX_OVERFLOW 和 TOTAL。</li></ul><h2 id="命名整理"><a href="#命名整理" class="headerlink" title="命名整理"></a>命名整理</h2><table><thead><tr><th></th><th>命名規則</th></tr></thead><tbody><tr><td>Class Name</td><td>CapitalizedWords</td></tr><tr><td>Package and Module Names</td><td>lower_case_with_underscores</td></tr><tr><td>Function and Variable Names</td><td>lower_case_with_underscores</td></tr><tr><td>Constants</td><td>UPPER_CASE_WITH_UNDERSCORES</td></tr></tbody></table><p>透過閱讀PEP 8，也為編寫Python之路打下了良好的基礎，因為PEP8的內容很多，這裡只有舉比較常見的範例，細節還是可以去官方文件查看，分享給各位～</p><p>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://peps.python.org/pep-0008/">PEP 8 – Style Guide for Python Code</a></p></blockquote><blockquote><p><a href="https://www.udemy.com/course/python3-tips/">Udemy - Python 3 编程技巧汇总</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/python-pep8-style-guide-for-python-code/python-logo.png&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;圖片來源: &lt;a href=&quot;https://www.python.org/community</summary>
      
    
    
    
    <category term="Python" scheme="http://adora-xu.com/categories/Python/"/>
    
    
    <category term="python" scheme="http://adora-xu.com/tags/python/"/>
    
    <category term="pep8" scheme="http://adora-xu.com/tags/pep8/"/>
    
    <category term="style guide" scheme="http://adora-xu.com/tags/style-guide/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode: happy number</title>
    <link href="http://adora-xu.com/2024/02/26/leetcode-happy-number/"/>
    <id>http://adora-xu.com/2024/02/26/leetcode-happy-number/</id>
    <published>2024-02-26T03:26:48.000Z</published>
    <updated>2024-02-26T03:34:17.003Z</updated>
    
    <content type="html"><![CDATA[<style>  .em-div{  background-color: #d4a373;  color: white;  padding: 10px;  margin: 10px;  border-radius: 5px;  }</style><p>為了加強自己的程式能力，因此開始記錄刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題</p><img src="/images/leetcode-happy-number/happy-number.png"><p>題目來源：<a href="https://leetcode.com/problems/happy-number/description/">leetcode</a></p><p>其實這題和之前解過的<a href="https://adora-xu.com/2024/02/20/codewars-square-every-digit/">square every digit</a>蠻像的，都要將個別的數字平方，不過這裡多了判斷加總是否等於1的步驟。</p><p>其實到這步就可以寫出程式碼，利用不斷迭代加上判斷式，判斷是否為快樂數。<br>以Ruby示範可以這樣寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>)<br><span class="hljs-comment"># 解法一</span><br>  <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span><br>    n = n.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span> &#125;.sum<br>  <span class="hljs-keyword">end</span><br>  n == <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>但如果想要程式碼效率更高一點呢？</p><p>就需要更了解快樂數一點，關於快樂數的介紹，可以參考維基百科：<a href="https://zh.wikipedia.org/zh-tw/%E5%BF%AB%E6%A8%82%E6%95%B8">快樂數</a></p><p>其中有提到：</p><div class="em-div">不是快樂數的數稱為不快樂數（英語：unhappy number），所有不快樂數的數位平方和計算，最後都會進入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循環中。</div><p>因此，如果數字有<code>4</code>可以先排除，因為會進到無限循環中，這時程式碼可以寫成這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法二</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>)<br>  <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span> &amp;&amp; n != <span class="hljs-number">4</span><br>    n = n.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span> &#125;.sum<br>  <span class="hljs-keyword">end</span><br>  n == <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>也可以把循環的數字，製作成一個<code>set</code>，避掉所有不快樂數無限循環的可能：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法三</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>)<br>  cycle_set = <span class="hljs-title class_">Set</span>.new([<span class="hljs-number">4</span>, <span class="hljs-number">16</span>, <span class="hljs-number">37</span>, <span class="hljs-number">58</span>, <span class="hljs-number">89</span>, <span class="hljs-number">145</span>, <span class="hljs-number">42</span>, <span class="hljs-number">20</span>])<br><br>  <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span> &amp;&amp; !cycle_set.<span class="hljs-keyword">include</span>?(n)<br>    n = n.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span> &#125;.sum<br>  <span class="hljs-keyword">end</span><br><br>  n == <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>因為覺得第二種解法比較直觀，效率也比較好，因此<code>python</code> &amp; <code>js</code>我都使用第二種寫法：</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_happy</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> n != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> n != <span class="hljs-number">4</span>:<br>        n = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(digit) ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(n))<br>    <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isHappy</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">while</span> (n !== <span class="hljs-number">1</span> &amp;&amp; n !== <span class="hljs-number">4</span>) &#123;<br>        n = <span class="hljs-title class_">String</span>(n).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, digit</span>) =&gt;</span> sum + digit ** <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n === <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
&lt;/style&gt;
&lt;p&gt;為了加強自</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="happy number" scheme="http://adora-xu.com/tags/happy-number/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: highest and lowest</title>
    <link href="http://adora-xu.com/2024/02/21/codewars-highest-and-lowest/"/>
    <id>http://adora-xu.com/2024/02/21/codewars-highest-and-lowest/</id>
    <published>2024-02-21T05:15:26.000Z</published>
    <updated>2024-02-21T05:30:53.813Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/554b4ac871d6813a03000035">Codewars - Highest and Lowest</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/codewars-highest-and-lowest/0221.png"></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">high_and_low</span>(<span class="hljs-params">numbers</span>)<br>  numbers.split.map(&amp;<span class="hljs-symbol">:to_i</span>).minmax.reverse.join(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby有一個蠻好用的方法，<a href="https://rubyapi.org/3.3/o/s?q=minmax">Array#minmax</a>，可以回傳陣列的最小值和最大值，範例如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>].minmax <span class="hljs-comment"># =&gt; [0, 2]</span><br></code></pre></td></tr></table></figure><p>但題目是<code>high_and_low</code>，所以需要<code>reverse</code>，並使用<code>.join(&#39; &#39;)</code>將陣列轉為字串。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">high_and_low</span>(<span class="hljs-params">numbers</span>):<br>    numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, numbers.split()))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">max</span>(numbers)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">min</span>(numbers)&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p><code>f&quot;&#123;max(numbers)&#125; &#123;min(numbers)&#125;&quot;</code>這裡使用<a href="https://docs.python.org/zh-tw/3/tutorial/inputoutput.html">f-string</a>將最大值和最小值插入到字符串中</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">highAndLow</span>(<span class="hljs-params">numbers</span>) &#123;<br>    <span class="hljs-keyword">const</span> nums = numbers.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.max(...nums)&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.min(...nums)&#125;</span>`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>JS和Python也是用類似方法～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/554b4ac871d6813a03000035&quot;&gt;Codewars - Highest and Lowest&lt;/a&gt;</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="highest and lowest" scheme="http://adora-xu.com/tags/highest-and-lowest/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: square every digit</title>
    <link href="http://adora-xu.com/2024/02/20/codewars-square-every-digit/"/>
    <id>http://adora-xu.com/2024/02/20/codewars-square-every-digit/</id>
    <published>2024-02-20T08:38:52.000Z</published>
    <updated>2024-02-21T05:30:59.611Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/546e2562b03326a88e000020">Codewars - Square Every Digit</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/codewars-square-every-digit/0220_2.png"></p><p>這次的題目就是將輸入的內容拆開為陣列，各別平方後，再加入組合起來就能得到答案了٩(^ᴗ^)۶</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_digits</span>(<span class="hljs-params">num</span>)<br>  num.to_s.chars.map &#123; |<span class="hljs-params">digit</span>| digit.to_i ** <span class="hljs-number">2</span>&#125;.join.to_i<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>聽到<code>各別</code>兩個字，腦中一定會自動聯想到<code>map</code>，這題也是使用<code>map</code>個字平方後再使用<code>join</code>組合成字串後，再使用<code>to_i</code>返還數字</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_digits</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(digit)**<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num)))<br></code></pre></td></tr></table></figure><p><code>python</code>則是寫法稍微不同，可以使用<code>for digit in str(num)</code>即可</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">squareDigits</span>(<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(num.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">digit</span> =&gt;</span> <span class="hljs-built_in">parseInt</span>(digit)**<span class="hljs-number">2</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>), <span class="hljs-number">10</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/546e2562b03326a88e000020&quot;&gt;Codewars - Square Every Digit&lt;/a&gt;</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="square every digit" scheme="http://adora-xu.com/tags/square-every-digit/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: sum of a sequence</title>
    <link href="http://adora-xu.com/2024/02/20/codewars-sum-of-a-sequence/"/>
    <id>http://adora-xu.com/2024/02/20/codewars-sum-of-a-sequence/</id>
    <published>2024-02-20T08:27:22.000Z</published>
    <updated>2024-02-21T05:31:03.842Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/586f6741c66d18c22800010a">Codewars - Sum of a sequence</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/Sum-of-a-sequence/0220.png"></p><p>這個題目也蠻有趣的，會給三個值<code>(begin,end,step)</code>，如果<code>begin &gt; end</code>則回傳<code>0</code>，沒有的話就以<code>step</code>為差，由<code>begin</code>加總至<code>end</code>，只要讀懂了題目依序寫成程式碼答案就出來了୧☉□☉୨</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_sum</span>(<span class="hljs-params">begin_number, end_number, step</span>)<br>  (begin_number..end_number).step(step).sum<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby的<code>step</code>有一個有趣的地方，只要範圍不對的話，就會回傳0，<br>所以如果<code>begin_number</code>&gt;<code>end_number</code>，即會回傳0，而不需要多加判斷</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_sum</span>(<span class="hljs-params">begin_number, end_number, step</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(begin_number, end_number + <span class="hljs-number">1</span>, step))<br></code></pre></td></tr></table></figure><p>和<code>ruby</code>不一樣的地方是，<code>python</code>的<code>Range</code>如果是<code>range(1,4)</code>，出現的結果會是<code>[1,2,3]</code>並不會包含最後一位數，所以這裡需要<code>+1</code></p><p>而Python和Ruby一樣，如果加總的範圍不對的話會回傳<code>0</code>，因此不需要額外填寫判斷式。<br>可以參考範例:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sequence_sum</span>(<span class="hljs-params">begin_number, end_number, step</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">range</span>(begin_number, end_number + <span class="hljs-number">1</span>, step))<br><br><span class="hljs-comment"># 範例</span><br><span class="hljs-built_in">print</span>(sequence_sum(<span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>))   <span class="hljs-comment"># 輸出: 0</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sequenceSum</span>(<span class="hljs-params">begin, end, step</span>) &#123;<br>    <span class="hljs-keyword">if</span> (begin &gt; end) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; <span class="hljs-attr">length</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((end - begin) / step) + <span class="hljs-number">1</span> &#125;, <span class="hljs-function">(<span class="hljs-params">_, i</span>) =&gt;</span> begin + i * step).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, num</span>) =&gt;</span> sum + num, <span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>JS就沒那麼多好用的方法，但因為加總的公式也不複雜，這裡就使用判斷式+加總的公式解，效率也比較高～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/586f6741c66d18c22800010a&quot;&gt;Codewars - Sum of a sequence&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="Sum of a sequence" scheme="http://adora-xu.com/tags/Sum-of-a-sequence/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: sum of digits / digital root（02/21更新）</title>
    <link href="http://adora-xu.com/2024/02/18/codewars-sum-of-digits-digital-root/"/>
    <id>http://adora-xu.com/2024/02/18/codewars-sum-of-digits-digital-root/</id>
    <published>2024-02-18T08:33:13.000Z</published>
    <updated>2024-02-21T03:15:46.134Z</updated>
    
    <content type="html"><![CDATA[<p>這也是這幾天遇到程式的面試題目，一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/541c8630095125aba6000c00">Codewars</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！</p><img src="/images/codewars-digital-root/0218.png"><p>今天解的是<code>6kyu</code>的難度，做這個題目前想到<code>生命靈數</code>也是這樣取的，把自己的西元出生年月日依序加起來，得到的個位數就是自己的<code>生命靈數</code>。</p><p>可以使用<code>兩種</code>方法來解，一種是<code>遞迴</code>，一種經由<code>公式推導</code>計算式，解法如下：</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法一</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>)<br>  n &lt; <span class="hljs-number">10</span> ? n : digital_root(n.digits.sum)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>遞迴(recursion)</code>簡單來說就是函式會一直重複呼叫本身直到達成條件，<br>假如定義一個輸入值為<code>digital_root(666)</code><br>第一次的結果為<code>6 + 6 + 6 = 18</code>，但值還沒有達到條件的<code>n &lt; 10</code>，<br>所以會再重複呼叫一次，此時<code>n = 18</code>，<code>1 + 8 = 9</code>，<br>已經達到<code>n &lt; 10</code>的條件，因此會回傳<code>9</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法二</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>)<br>  n.zero? ? <span class="hljs-number">0</span> : (n - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>解法二就是之前常說的：如果在看到題目前多想一點，可以讓程式效率更高。<br>因為此字根是使用<code>10進位制</code>，每個字根都是<code>過9進位</code>，<code>數字和 &gt; 9</code>時就要再重複相加，因此這裡的<code>% 9</code>就是簡化重複相加的步驟，以下舉例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span>% <span class="hljs-number">9</span> = <span class="hljs-number">1</span><br><span class="hljs-symbol">100 </span>% <span class="hljs-number">9</span> = <span class="hljs-number">1</span><br><span class="hljs-symbol">1000 </span>% <span class="hljs-number">9</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>這樣看來應該<code>% 9</code>就可以得到答案，為什麼答案會是<code>n.zero? ? 0 : (n - 1) % 9 + 1</code>呢？</p><p>第一個是因為如果輸入值剛好是0的話，應該直接返回<code>0</code>，因此在前面加了判斷式。</p><p>第二個是因為<code>% 9</code>遇到<code>9的倍數</code>就會出錯，為了避免這個情況，會需要先將<code>n-1</code>，<code>%9</code>後再<code>+1</code>，這樣遇到9的倍數答案也能正確～</p><h2 id="2024-02-21更新"><a href="#2024-02-21更新" class="headerlink" title="2024&#x2F;02&#x2F;21更新"></a>2024&#x2F;02&#x2F;21更新</h2><p>這幾天去面試收到的反饋，既然已經知道會有遇到<code>9的倍數</code>就出錯的問題，怎麼不直接寫在程式碼裡呢？因此就出現了<code>解法三</code>，看起來更清楚！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#解法三</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>)<br>  <span class="hljs-keyword">case</span><br>  <span class="hljs-keyword">when</span> n.zero?<br>    <span class="hljs-number">0</span><br>  <span class="hljs-keyword">when</span> n % <span class="hljs-number">9</span> == <span class="hljs-number">0</span><br>    <span class="hljs-number">9</span><br>  <span class="hljs-keyword">else</span><br>    n % <span class="hljs-number">9</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>其實本題目也和鼎鼎大名的費氏列數解法相關，也有用到遞迴的概念，解法也一併補充在這裡：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>)<br>  n &lt;= <span class="hljs-number">1</span> ? n : fibonacci(n - <span class="hljs-number">1</span>) + fibonacci(n - <span class="hljs-number">2</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>後面<code>Python</code>的解法和<code>JS</code>解法大致相同，只有寫法不同而已：</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span> <span class="hljs-keyword">else</span> digital_root(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>(digit) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(n)))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (n - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">digital_root</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n % <span class="hljs-number">9</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n % <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">digitalRoot</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">10</span> ? n : <span class="hljs-title function_">digitalRoot</span>([...n.<span class="hljs-title function_">toString</span>()].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum, digit</span>) =&gt;</span> sum + <span class="hljs-built_in">parseInt</span>(digit), <span class="hljs-number">0</span>));<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">digitalRoot2</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n === <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : (n - <span class="hljs-number">1</span>) % <span class="hljs-number">9</span> + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">digitalRoot</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">case</span> n === <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">case</span> n % <span class="hljs-number">9</span> === <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> n % <span class="hljs-number">9</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這也是這幾天遇到程式的面試題目，一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/541c8630095125aba6000c00&quot;&gt;Codewars&lt;/a&gt;&lt;br&gt;一樣會用&lt;code&gt;Ruby&lt;/cod</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="sum of digits" scheme="http://adora-xu.com/tags/sum-of-digits/"/>
    
    <category term="digital root" scheme="http://adora-xu.com/tags/digital-root/"/>
    
    <category term="遞迴" scheme="http://adora-xu.com/tags/%E9%81%9E%E8%BF%B4/"/>
    
    <category term="recursion" scheme="http://adora-xu.com/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>CodeWars: credit card mask</title>
    <link href="http://adora-xu.com/2024/02/16/codewars-credit-card-mask/"/>
    <id>http://adora-xu.com/2024/02/16/codewars-credit-card-mask/</id>
    <published>2024-02-16T08:05:11.000Z</published>
    <updated>2024-02-18T08:39:32.564Z</updated>
    
    <content type="html"><![CDATA[<p>這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶<br>題目：<a href="https://www.codewars.com/kata/5412509bd436bd33920011bc">Codewars</a><br>一樣會用<code>Ruby</code>、<code>Python</code>和<code>JavaScript</code>三個語言來解題，讓我們開始吧！<br><img src="/images/codewar-credit-card-mask/1.png"></p><p>如果有像是銀行卡號、銀行帳號等等機密訊息需要加密，可以使用此方法，僅顯示最後四碼，如果總數小於四碼就顯示所有內容。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maskify</span>(<span class="hljs-params">cc</span>)<br>  cc.size &gt; <span class="hljs-number">4</span> ? <span class="hljs-string">&quot;#&quot;</span> * (cc.size - <span class="hljs-number">4</span>) + cc[-<span class="hljs-number">4</span>..-<span class="hljs-number">1</span>] : cc<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby可以使用三元運算子來解，首先判斷數入的值長度<code>cc.size</code>是否大於4碼，因為最後面4碼要顯示，所以如果大於4碼，就將前面四碼的長度<code>cc.size</code>扣掉<code>4碼</code> * <code>#</code>，再使用<code>cc[-4..-1]</code>顯示倒數四位～倒數最後一位。</p><p>如果沒有大於4碼，就直接顯示<code>cc</code>即可 ٩(^ᴗ^)۶</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maskify</span>(<span class="hljs-params">cc</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span> * (<span class="hljs-built_in">len</span>(cc)-<span class="hljs-number">4</span>) + cc[-<span class="hljs-number">4</span>:]<br></code></pre></td></tr></table></figure><p>Python比較特別，如果字串<code>*</code>小於等於零的數字，會返還空值。<br>所以這裡不需要使用判斷式就可以完成o(^▽^)o</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">maskify</span>(<span class="hljs-params">cc</span>) &#123;<br>    <span class="hljs-keyword">return</span> cc.<span class="hljs-property">length</span> &gt; <span class="hljs-number">4</span> ? <span class="hljs-string">&quot;#&quot;</span>.<span class="hljs-title function_">repeat</span>(cc.<span class="hljs-property">length</span> - <span class="hljs-number">4</span>) + cc.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">4</span>) : cc<br>&#125;<br></code></pre></td></tr></table></figure><p>JS和Ruby的解法邏輯一樣，使用三元運算子判斷長度<code>cc.length</code>是否 &gt; 4，如果大於的話則返回扣掉4個長度的<code> &quot;#&quot;.repeat(cc.length - 4)</code>+最後四碼<code>cc.slice(-4)</code>，如果小於4直接返還<code>cc</code></p><p>Codewars 7kyu的題目和leetcode easy相比稍微簡單一點，很適合練習不同程式的基本用法～很可惜前幾天的Leetcode挑戰斷在Day 15，接下來繼續努力o(^∀^*)o</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這幾天遇到程式的面試題目，想說也可以一併將解法分享٩(^ᴗ^)۶&lt;br&gt;題目：&lt;a href=&quot;https://www.codewars.com/kata/5412509bd436bd33920011bc&quot;&gt;Codewars&lt;/a&gt;&lt;br&gt;一樣會用&lt;code&gt;Ruby&lt;/c</summary>
      
    
    
    
    <category term="codewars" scheme="http://adora-xu.com/categories/codewars/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="codewars" scheme="http://adora-xu.com/tags/codewars/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="credit card mask" scheme="http://adora-xu.com/tags/credit-card-mask/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day15 excel sheet column title</title>
    <link href="http://adora-xu.com/2024/02/13/leetcode-excel-sheet-column-title/"/>
    <id>http://adora-xu.com/2024/02/13/leetcode-excel-sheet-column-title/</id>
    <published>2024-02-13T15:45:41.000Z</published>
    <updated>2024-02-13T15:50:12.541Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十五天，讓我們開始吧！</p><img src="/images/leetcode-excel-sheet-column-title/0213.png"><p>題目來源：<a href="https://leetcode.com/problems/length-of-last-word/description/">leetcode</a></p><p>這次的題目蠻有趣的，是給予Excel的欄位將數換為數字，Excel欄位的慣例為：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean">A -&gt; <span class="hljs-number">1</span><br>B -&gt; <span class="hljs-number">2</span><br>C -&gt; <span class="hljs-number">3</span><br>...<br>Z -&gt; <span class="hljs-number">26</span><br>AA -&gt; <span class="hljs-number">27</span><br>AB -&gt; <span class="hljs-number">28</span> <br>...<br></code></pre></td></tr></table></figure><p>A<del>Z是1</del>26，27是AA,28是AB，依序下去，等於是滿<code>26</code>後會進位。<br>這樣來看，其實Excel欄位和26進位蠻像的，轉換需要 &#x2F; 26後的餘數對應到相應的字母即可（和十進位轉二進位有點像），因為剛好對應的是字母，可以將其轉換為<code>ASCII</code>碼，在<code>ASCII</code>裡，<code>A</code>為<code>065</code>、<code>B</code>為<code>066</code>….依序排序，排序到<code>Z</code>為<code>090</code>。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_to_title</span>(<span class="hljs-params">column_number</span>)<br>  result = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#利用空字串來儲存結果</span><br>  <span class="hljs-keyword">while</span> column_number &gt; <span class="hljs-number">0</span><br>    column_number -= <span class="hljs-number">1</span> <span class="hljs-comment"># 減去1，這樣1就對應到&#x27;A&#x27;</span><br>    result = (<span class="hljs-string">&#x27;A&#x27;</span>.ord + column_number % <span class="hljs-number">26</span>).chr + result<br>    <span class="hljs-comment"># 取得對應字母，加到結果字串的最前面</span><br>    column_number /= <span class="hljs-number">26</span><br>    <span class="hljs-comment"># 將 column_number 除以 26，以處理下一位數字</span><br>  <span class="hljs-keyword">end</span><br>  result<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>column_number -= 1</code><br>此方法是利用<code>餘數</code>先取<code>個位數</code>的字母，再<code>/26</code>取得接下來的數字字母，會需要先<code>-1</code>，這樣<code>1</code>才能對應到<code>A</code></p><p><code>result = (&#39;A&#39;.ord + column_number % 26).chr + result</code><br>這段的<code>ord</code>是將字母轉換為<code>ASCII</code>，因為每個字母都是按照順序排序，所以中間的差數就是<code>&#39;A&#39;.ord</code>，最後再使用<code>.chr</code>轉為數字，最後 <code>+ result</code>更新<code>result</code>的數，並確保下一個<code>result</code>會放在前面</p><p>接著最後再將輸入值<code>/26</code>來處理下一位數（真的和十進位轉二進位蠻像的～）</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">convertToTitle</span>(<span class="hljs-params">self, columnNumber: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        result = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> columnNumber:<br>            columnNumber -= <span class="hljs-number">1</span><br>            result = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + columnNumber % <span class="hljs-number">26</span>) + result<br>            columnNumber //= <span class="hljs-number">26</span><br>        <span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure><p>Python和Ruby的解法相同，只要改變寫法即可！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertToTitle</span>(<span class="hljs-params">columnNumber</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (columnNumber &gt; <span class="hljs-number">0</span>) &#123;<br>        columnNumber--;<br>        result = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-string">&#x27;A&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) + columnNumber % <span class="hljs-number">26</span>) + result;<br>        columnNumber = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(columnNumber / <span class="hljs-number">26</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>JS也和Ruby的解法相同，只要改變寫法即可！<br>今天就到這裡～明天繼續加油！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十五天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="excel sheet column title" scheme="http://adora-xu.com/tags/excel-sheet-column-title/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day14 sqrtx</title>
    <link href="http://adora-xu.com/2024/02/12/leetcode-sqrtx/"/>
    <id>http://adora-xu.com/2024/02/12/leetcode-sqrtx/</id>
    <published>2024-02-12T14:36:08.000Z</published>
    <updated>2024-02-12T14:43:24.573Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十四天，讓我們開始吧！</p><img src="/images/sqrtx/1.png"><p>題目來源：<a href="https://leetcode.com/problems/sqrtx/">leetcode</a></p><p>今天的題目是尋找平方根，但是不能用內建的數學方法來找，題目解釋如下：</p><p>在给定一个非負整數 x 的情况下，返回四捨五入到最接近整数的 x 的平方根。返回的整數也應為非負整数。</p><p>不得使用任何内置指数函数或运算符。<br>例如，請勿在 c++ 中使用 pow(x, 0.5) 或在 python 中使用 x ** 0.5。</p><p>題目還算單純，因為僅要四捨五入到整數位即可，也可以使用昨天用到的<code>二分法</code>，從中間切一半開始測試，這樣很快就可以找到了！</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_sqrt</span>(<span class="hljs-params">x</span>)<br>  <span class="hljs-comment"># 左右邊界為0...x</span><br>  left, right = <span class="hljs-number">0</span>, x<br><br>  <span class="hljs-keyword">while</span> left &lt;= right<br>    mid = (left + right) / <span class="hljs-number">2</span>  <span class="hljs-comment"># 計算中間值</span><br>    mid_squared = mid * mid  <span class="hljs-comment"># 計算中間值的平方</span><br><br>    <span class="hljs-keyword">if</span> mid_squared == x<br>      <span class="hljs-keyword">return</span> mid.to_i  <span class="hljs-comment"># 如果中間值的平方等於 x，返回中間值（轉換為整數形式）</span><br>    <span class="hljs-keyword">elsif</span> mid_squared &lt; x<br>      left = mid + <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方小於 x，就使用mid+1...x來比較，因此調整left的值</span><br>    <span class="hljs-keyword">else</span><br>      right = mid - <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方大於 x，就使用left...mid-1來比較，因此調整right的值</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">return</span> right.to_i  <span class="hljs-comment"># 當 left &gt; right 時，right 就是小於或等於平方根的整數值，因此要向下取整，所以返回右邊界（轉換為整數形式）</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 左右邊界為0...x</span><br>        left, right = <span class="hljs-number">0</span>, x<br><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span>  <span class="hljs-comment"># 計算中間值</span><br>            mid_squared = mid * mid  <span class="hljs-comment"># 計算中間值的平方</span><br><br>            <span class="hljs-keyword">if</span> mid_squared == x:<br>                <span class="hljs-keyword">return</span> mid  <span class="hljs-comment"># 如果中間值的平方等於 x，返回中間值</span><br>            <span class="hljs-keyword">elif</span> mid_squared &lt; x:<br>                left = mid + <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方小於 x，調整左邊界</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid - <span class="hljs-number">1</span>  <span class="hljs-comment"># 如果中間值的平方大於 x，調整右邊界</span><br><br>        <span class="hljs-keyword">return</span> right  <span class="hljs-comment"># 因為要向下取整，所以返回右邊界</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mySqrt</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> right = x;<br>  <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((left + right) / <span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">const</span> midSquared = mid * mid;<br>  <br>      <span class="hljs-keyword">if</span> (midSquared === x) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (midSquared &lt; x) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> right;<br>  &#125;<br></code></pre></td></tr></table></figure><p>雖然如果使用內建的方法超快就可以解出來了，但學習使用二分法也能夠在其他的條件下應用！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十四天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="sqrtx" scheme="http://adora-xu.com/tags/sqrtx/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day13 search insert position</title>
    <link href="http://adora-xu.com/2024/02/11/search-insert-position/"/>
    <id>http://adora-xu.com/2024/02/11/search-insert-position/</id>
    <published>2024-02-11T14:09:20.000Z</published>
    <updated>2024-02-11T14:15:28.360Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十三天，讓我們開始吧！</p><img src="/images/search-insert-position/1.png"><p>題目來源：<a href="https://leetcode.com/problems/search-insert-position/description/">leetcode</a></p><p>一開始看到題目原本想說，把數字插入陣列中排序後再返還索引值就好，但實際執行卻發現效率很差ʘ‿ʘ。</p><p>後來想到可以使用二分法，先取中間的數字與target比較，分成兩邊，這樣最多就只要比較陣列一半的數量就好，會比較有效率，就像是猜數字，如果一開始就對半猜，猜到數字的機率也會快很多。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_insert</span>(<span class="hljs-params">nums, target</span>)<br>  left, right = <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">while</span> left &lt;= right<br>    mid = (left + right) / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> nums[mid] == target<br>      <span class="hljs-keyword">return</span> mid<br>    <span class="hljs-keyword">elsif</span> nums[mid] &lt; target<br>      left = mid + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span><br>      right = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">return</span> left<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>這裡的<code>left</code>是指陣列的起始索引值，為<code>0</code>，<code>right</code>是陣列的結束值，為<code>nums.length - 1</code>，<code>mid</code>就是中間的索引值<code>(left+right)/2</code></p><p>如果照排序看可以這樣理解：<br><code>left</code>,<code>mid</code>,<code>right</code></p><p>一開始先猜中間，如果運氣好就是中間值，可直接返還<code>mid</code>。</p><p>如果<code>target</code>比較大，即縮小<code>left</code>的範圍為<code>mid + 1</code>，比較數字的範圍也到了右半邊，接著會繼續新的迴圈，再繼續對半切取新的<code>mid</code>值比較。</p><p>如果<code>target</code>比較小，則縮小<code>right</code>的範圍為<code>mid - 1</code>，比較數字在左半邊，繼續新的迴圈，再繼續對半切取新的<code>mid</code>值比較。</p><p>直到<code>nums[mid] = target</code>，即會返還<code>mid</code>，也就是索引值。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">searchInsert</span>(<span class="hljs-params">self, nums, target</span>):<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] == target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">elif</span> nums[mid] &lt; target:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid - <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> left<br></code></pre></td></tr></table></figure><p><code>python</code>也是一樣邏輯，只是部分寫法不同</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> searchInsert = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      <span class="hljs-keyword">let</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((left + right) / <span class="hljs-number">2</span>);<br>      <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> left;<br>  &#125;;<br></code></pre></td></tr></table></figure><p><code>js</code>也是相同，不過需要添加<code>Math.floor</code>讓<code>mid</code>值為無條件捨去</p><p>這就是今天的解題了～其實不管什麼題目都可以用最笨的方法解，但是如果在讀題目時多想一點，就能讓程式碼效率更高！接下來幾天繼續加油🙌</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十三天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="search insert position" scheme="http://adora-xu.com/tags/search-insert-position/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day12 plus one</title>
    <link href="http://adora-xu.com/2024/02/10/leetcode-plus-one/"/>
    <id>http://adora-xu.com/2024/02/10/leetcode-plus-one/</id>
    <published>2024-02-10T12:05:07.000Z</published>
    <updated>2024-02-10T12:08:03.288Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十二天，讓我們開始吧！</p><img src="/images/leetcode-plus-one/0210.png"><p>題目來源：<a href="https://leetcode.com/problems/plus-one/">leetcode</a></p><p>這題題目很簡單，只要會使用將數字陣列轉為整數再加一，接著再轉回數字陣列就可以得到答案～</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">plus_one</span>(<span class="hljs-params">digits</span>)<br>  (digits.join(<span class="hljs-string">&#x27;&#x27;</span>).to_i + <span class="hljs-number">1</span>).to_s.chars.map(&amp;<span class="hljs-symbol">:to_i</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>.map(&amp;:to_i)</code>原始的寫法為<code>.map&#123; |num| num.to_i &#125;</code></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">plusOne</span>(<span class="hljs-params">self, digits</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(digit) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, digits))) + <span class="hljs-number">1</span>)]<br></code></pre></td></tr></table></figure><p>Python轉換型態都是包一個括號在外面，<code>int(&#39;&#39;.join(map(str, digits)))</code>為將陣列內每一字連接為字串最後轉為整數，而後<code>+1</code>，再利用<code>str()</code>轉為字串。</p><p>最後將每一字轉為整數陣列回傳。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> plusOne = <span class="hljs-keyword">function</span>(<span class="hljs-params">digits</span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-title class_">BigInt</span>(digits.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)) + <span class="hljs-number">1n</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>);<br>  &#125;;<br></code></pre></td></tr></table></figure><p>在<code>js</code>比較特別，使用<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>，BigInt 是一個內建的物件，提供了表示大於 2^53 的整數的功能 (2^53 是 JavaScript 原生的Number能夠表示的最大值)，因為使用<code>BigInt</code>型態，所以<code>+1</code>要使用<code>+1n</code>，才能得到加一後的結果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十二天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="plus one" scheme="http://adora-xu.com/tags/plus-one/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day11 single number</title>
    <link href="http://adora-xu.com/2024/02/09/leetcode-single-number/"/>
    <id>http://adora-xu.com/2024/02/09/leetcode-single-number/</id>
    <published>2024-02-09T02:50:44.000Z</published>
    <updated>2024-02-09T02:55:35.510Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十一天，讓我們開始吧！</p><img src="/images/leetcode-single-number/1.png"><p>題目來源：<a href="https://leetcode.com/problems/single-number">leetcode</a></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">single_number</span>(<span class="hljs-params">nums</span>)<br>  nums.reduce(<span class="hljs-symbol">:^</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>這次用到<code>XOR</code>符號<code>^</code>，這是種運算邏輯，用於對兩個二進制數的對應位進行比較，規則如下：兩個對應位數字不同，會回傳<code>1</code>，兩個對應位不同則會回傳<code>0</code>，用此來找出只出現一次的數字。</p><p>範例如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-number">0</span> xor <span class="hljs-number">0</span> = <span class="hljs-number">0</span><br><span class="hljs-number">0</span> xor <span class="hljs-number">1</span> = <span class="hljs-number">1</span><br><span class="hljs-number">1</span> xor <span class="hljs-number">0</span> = <span class="hljs-number">1</span><br><span class="hljs-number">1</span> xor <span class="hljs-number">1</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果我們傳入<code>[4, 1, 2, 1, 2]</code>呢？根據<code>reduce(:^)</code>會這樣運算<code>4 ^ 1 ^ 2 ^ 1 ^ 2</code>：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby">  <span class="hljs-number">4</span>:  <span class="hljs-number">100</span><br>  <span class="hljs-number">1</span>:  <span class="hljs-number">001</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">101</span>  <br><br>  <span class="hljs-number">5</span>:  <span class="hljs-number">101</span><br>  <span class="hljs-number">2</span>:  <span class="hljs-number">010</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">111</span> <br><br>  <span class="hljs-number">7</span>:  <span class="hljs-number">111</span><br>  <span class="hljs-number">1</span>:  <span class="hljs-number">001</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">110</span> <br><br>  <span class="hljs-number">6</span>:  <span class="hljs-number">110</span><br>  <span class="hljs-number">2</span>:  <span class="hljs-number">010</span><br><span class="hljs-variable constant_">XOR</span>:  <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>也可以用另外一個方法理解，<code>1 ^ 1 = 0</code>, <code>2 ^ 2 = 0</code>, <code>0 ^ 4 = 4</code><br>只要有不同於其他的數，就會被留下來，這樣答案就出來了！</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">singleNumber</span>(<span class="hljs-params">self, nums</span>):<br>        <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x, y: x ^ y, nums)<br></code></pre></td></tr></table></figure><p>Python也是一樣邏輯，只不過<code>reduce</code>寫法不同，可以參考：<a href="https://docs.python.org/3.0/library/functools.html">reduce</a></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> singleNumber = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, num</span>) =&gt;</span> acc ^ num, <span class="hljs-number">0</span>);<br>  &#125;;<br></code></pre></td></tr></table></figure><p>JS也是一樣邏輯，只不過<code>reduce</code>寫法不同，可以參考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">reduce</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十一天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="single number" scheme="http://adora-xu.com/tags/single-number/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day10 valid palindrome</title>
    <link href="http://adora-xu.com/2024/02/08/leetcode-valid-palindrome/"/>
    <id>http://adora-xu.com/2024/02/08/leetcode-valid-palindrome/</id>
    <published>2024-02-08T15:03:06.000Z</published>
    <updated>2024-02-09T02:54:01.809Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第十天，終於完成1&#x2F;3了，讓我們開始吧！</p><img src="/images/leetcode-valid-palindrome/banner.png"><p>題目來源：<a href="https://leetcode.com/problems/valid-palindrome">leetcode</a></p><p>這個問題要求判斷句子是否為回文。在進行比較時，會需要先將所有字母轉換為小寫，並去除所有非字母和數字。然後，比較處理過的字串是否和它的反轉相等。</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_palindrome</span>(<span class="hljs-params">s</span>)<br>  clean_s = s.downcase.gsub(<span class="hljs-regexp">/[^a-z0-9]/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  clean_s == clean_s.reverse<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>使用<code>downcase</code>將字符轉換為小寫，再使用<code>gsub</code>去除非字母和數字的字，最後比較反轉是否相同就完成了～</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_palindrome</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 將字符轉換為小寫，去除非字母和數字的字</span><br>    clean_s = <span class="hljs-string">&#x27;&#x27;</span>.join(char.lower() <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s <span class="hljs-keyword">if</span> char.isalnum())<br>    <span class="hljs-comment"># 比較處理過的字串和它的反轉是否相等</span><br>    <span class="hljs-keyword">return</span> clean_s == clean_s[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><code>isalnum()</code>方法用於檢查字符串中的所有字是否都是字母和數字。如果是，該方法返回 True，表示所有字符均為字母（a-z、A-Z）和數字（0-9）。反之，如果字符串中包含非字母和非數字的字符，例如空格、驚嘆號、井號、百分號、和問號等，該方法將返回 False。</p><p>使用這個方法就不用使用<code>gsub</code>取代了，因為只有是字母和數字才會放進<code>clean_s</code>裡</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-comment">// 將字串轉換為小寫，去除非字母和數字</span><br>  <span class="hljs-keyword">const</span> cleanS = s.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[^a-z0-9]/g</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>  <span class="hljs-comment">// 比較處理過的字串和它的反轉是否相等</span><br>  <span class="hljs-keyword">return</span> cleanS === cleanS.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第十天，終於完成1&amp;#x2F;3了，讓我們開始吧！&lt;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="valid palindrome" scheme="http://adora-xu.com/tags/valid-palindrome/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day09 length of last word</title>
    <link href="http://adora-xu.com/2024/02/07/leetcode-length-of-last-word/"/>
    <id>http://adora-xu.com/2024/02/07/leetcode-length-of-last-word/</id>
    <published>2024-02-07T11:23:24.000Z</published>
    <updated>2024-02-13T15:46:20.790Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第九天，讓我們開始吧！</p><img src="/images/leetcode-length-of-last-word/1.png"><p>題目來源：<a href="https://leetcode.com/problems/length-of-last-word/description/">leetcode</a></p><p>因為題目前後會有空格，所以會需要刪除頭尾的空白後，再依據內容拆分為陣列，取出陣列最後一個的長度即可。</p><p>這個題目不會再取用原始給予的<code>input</code>值，所以不需要考慮使否會回傳新的值或是更改原值，就變得比較單純一點～</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">length_of_last_word</span>(<span class="hljs-params">s</span>)<br>  s.strip.split(<span class="hljs-string">&#x27; &#x27;</span>).last.length<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby可以使用<a href="https://rubyapi.org/3.3/o/s?q=strip">strip</a>去除前後的空格，接著使用<code>split(&#39; &#39;)</code>將空格拆分為陣列，取出<code>last.length</code>就找出答案了～</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLastWord</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(s.strip().split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>Python也是使用<a href="https://docs.python.org/3/library/stdtypes.html">strip</a>，接著使用<code>split(&#39; &#39;)</code>拆分為陣列，這個和Ruby相同。最後使用<code>[-1]</code>取出最後一位數，再使用<code>len()</code>包住取出長度即可～</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLastWord = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-property">length</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>JS去除前後的空格使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trim">trim()</a>，接著一樣使用<code>split(&#39; &#39;)</code>拆分為陣列，並使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">pop()</a>取出陣列最後一位數，再使用<code>lenght</code>取長度即可～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第九天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="length of last word" scheme="http://adora-xu.com/tags/length-of-last-word/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day08 majority element</title>
    <link href="http://adora-xu.com/2024/02/06/leetcode-majority-element/"/>
    <id>http://adora-xu.com/2024/02/06/leetcode-majority-element/</id>
    <published>2024-02-06T10:23:43.000Z</published>
    <updated>2024-02-07T05:10:21.437Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第八天，讓我們開始吧！</p><img src="/images/leetcode-majority-element/0206.png"><p>題目來源：<a href="https://leetcode.com/problems/majority-element/?envType=study-plan-v2&envId=top-interview-150">leetcode</a></p><p>在讀題目的時候，發現有一個小細節，題目寫要找出出現次數大於<code>[n/2]</code>的數字，且假定這個數字一定存在Array中。那也就代表，只要找出最常出現的數就可以了，因為陣列中只要其中一個數出現的數量大於<code>[n/2]</code>，剩下的數出現次數就不會大於<code>[n/2]</code>，可以想像成，西瓜被挖走一半多一點，剩下的西瓜再怎麼分都沒辦法大於一半。</p><p>所以這題只要找出，出現次數最多的數字即可！讓我們開始解題吧～</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">majority_element</span>(<span class="hljs-params">nums</span>)<br>  nums.tally.max_by &#123;|<span class="hljs-params">key, value</span>| value &#125;[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>這裡使用了<a href="https://rubyapi.org/3.3/o/s?q=tally">tally</a></p><p>在Ruby API的解釋為：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Enumerable<span class="hljs-comment">#tally</span><br>Returns a hash containing <span class="hljs-keyword">the</span> counts <span class="hljs-keyword">of</span> <span class="hljs-keyword">equal</span> elements:<br>Each key <span class="hljs-keyword">is</span> an element <span class="hljs-keyword">of</span> self.<br>Each value <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> elements <span class="hljs-keyword">equal</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">that</span> key.<br></code></pre></td></tr></table></figure><p>意思就是建立一個hash，key是<code>self</code>，value是出現的次數，簡單的範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">result = <span class="hljs-string">%w[a b c b c a c b]</span>.tally<br>puts result<br><span class="hljs-comment"># =&gt; &#123;&quot;a&quot;=&gt;2, &quot;b&quot;=&gt;3, &quot;c&quot;=&gt;3&#125;</span><br></code></pre></td></tr></table></figure><p>建立了hash之後，即可以使用<a href="https://rubyapi.org/3.3/o/s?q=max_by">max_by</a>，<code>max_by</code>，<code>max_by</code>允許輸入值為{}，會返還{}內最大的值，因為返還的會是<code>Array</code>，來看一下範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">result = &#123;<span class="hljs-symbol">foo:</span> <span class="hljs-number">1</span>, <span class="hljs-symbol">bar:</span> <span class="hljs-number">10</span>, <span class="hljs-symbol">baz:</span> <span class="hljs-number">8</span>&#125;.max_by &#123;|<span class="hljs-params">key, value</span>| value &#125;<br>puts result<br><span class="hljs-comment">#[:bar, 10]</span><br></code></pre></td></tr></table></figure><p>如果只要取出key呢？可以使用<code>[0]</code>來取出Array的第一個數，也是<code>Array</code>內最常出現的<code>key</code>:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">result = &#123;<span class="hljs-symbol">foo:</span> <span class="hljs-number">1</span>, <span class="hljs-symbol">bar:</span> <span class="hljs-number">10</span>, <span class="hljs-symbol">baz:</span> <span class="hljs-number">8</span>&#125;.max_by &#123;|<span class="hljs-params">key, value</span>| value &#125;[<span class="hljs-number">0</span>]<br>puts result<br><span class="hljs-comment">#10</span><br></code></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">majorityElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> Counter(nums).most_common(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>在python計算數量可以使用<a href="https://docs.python.org/zh-tw/3/library/collections.html#collections.Counter">Counter()物件</a>，來看看範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br>words = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br>cnt = Counter()<br>cnt.update(words)<br><br><span class="hljs-built_in">print</span>(cnt)<br><span class="hljs-comment">#Counter(&#123;&#x27;blue&#x27;: 3, &#x27;red&#x27;: 2, &#x27;green&#x27;: 1&#125;)</span><br></code></pre></td></tr></table></figure><p>接著可以使用<code>.most_common(1)[0][0]</code>，<code>(1)</code>代表取出第一個結果，這時輸出的值會是<code>[(3, 2)]</code>，因此還必須要使用<code>[0][0]</code>代表取出第一組Array的第一個數才會得到解答！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">majorityElement</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> majority;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> nums) &#123;<br>        <span class="hljs-keyword">if</span> (count === <span class="hljs-number">0</span>) &#123;<br>            majority = num;<br>        &#125;<br><br>        count += (num === majority) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> majority;<br>&#125;<br></code></pre></td></tr></table></figure><p>JS我採用的是<a href="https://zh.wikipedia.org/zh-tw/%E5%A4%9A%E6%95%B0%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95">摩爾投票法</a>，消除不同元素之間的票數，最終保留的就是可能的主要元素。</p><p>一開始先把<code>count</code>設定為0，如果接下來遇到的數字相同<code>count + 1</code>，不同<code>count - 1</code>，如果<code>count</code>又變回 0（代表刪掉一樣數量的a &amp; b），這時就會更改<code>majority = num</code>，最後殘存活下來的就是<code>majority</code>了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第八天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="majority element" scheme="http://adora-xu.com/tags/majority-element/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day07 remove duplicates from sorted array</title>
    <link href="http://adora-xu.com/2024/02/05/leetcode-remove-duplicates-from-sorted-array/"/>
    <id>http://adora-xu.com/2024/02/05/leetcode-remove-duplicates-from-sorted-array/</id>
    <published>2024-02-05T15:52:44.000Z</published>
    <updated>2024-02-05T16:05:36.856Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用<code>Ruby</code>、<code>python</code>和<code>JavaScript</code>三個語言來解題，今天是第七天，讓我們開始吧！</p><img src="/images/leetcode-remove-duplicates-from-sorted-array/1.png"><p>題目來源：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">leetcode</a></p><p>此題目雖然看似簡單，但需要注意一個小細節，除了最後回傳不重複的數有幾個外，原始傳入的<code>nums</code>也需要改變，這樣才會通過測驗！</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_duplicates</span>(<span class="hljs-params">nums</span>)<br>  nums.uniq!<br>  nums.size<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>見證Ruby黑魔法的時刻٩(^ᴗ^)۶，這邊特別注意的是，<code>uniq!</code>為什麼要使用驚嘆號<code>!</code>呢？因為使用驚嘆號才能更改原始的<code>nums</code>，如果使用<code>uniq</code>則是回傳新的Array</p><p>詳情可見Ruby API <a href="https://rubyapi.org/3.3/o/s?q=uniq!">uniq!</a>, <a href="https://rubyapi.org/3.3/o/s?q=uniq">uniq</a></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        nums[:] = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(nums))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)<br></code></pre></td></tr></table></figure><p>Python的話可以使用<code>set(nums)</code>，set 是一組無序且沒有重複的元素，所以我外面使用了<code>sorted</code>排序。</p><p>因為要改變<code>nums</code>的值，所以使用<code>nums[:]</code></p><p>詳情可參考：<a href="https://docs.python.org/zh-tw/3/tutorial/datastructures.html">Python docs</a></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">nums</span>) &#123;<br>    nums.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, nums.<span class="hljs-property">length</span>, ...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(nums));<br>    <span class="hljs-keyword">return</span> nums.<span class="hljs-property">length</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>JS定義<code>set</code>為：<code>集合（set）中的元素只会出现一次，即集合中的元素是唯一的。</code>，可以參考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN</a>，但因為要改變<code>nums</code>的數，因此需要使用<code>splice</code>，移除或者替换已存在的元素和&#x2F;或添加新元素就地改變一个Array的内容。</p><p>最後答案就出來了！</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://rubyapi.org/3.3/o/s?q=uniq!">Ruby API</a></li><li><a href="https://docs.python.org/zh-tw/3/tutorial/datastructures.html">Python docs</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此開始記錄每天刷leetcode的解法+說明，會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;JavaScript&lt;/code&gt;三個語言來解題，今天是第七天，讓我們開始吧！&lt;/p&gt;
&lt;img src=&quot;/</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="remove duplicates from sorted array" scheme="http://adora-xu.com/tags/remove-duplicates-from-sorted-array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day06 valid parentheses</title>
    <link href="http://adora-xu.com/2024/02/04/leetcode-valid-parentheses/"/>
    <id>http://adora-xu.com/2024/02/04/leetcode-valid-parentheses/</id>
    <published>2024-02-04T14:28:52.000Z</published>
    <updated>2024-02-05T07:54:00.247Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此記錄每天刷leetcode的解法+說明，今天會用<code>Ruby</code>、<code>Python</code>、<code>JavaScript</code>來解題，今天來到第六天，讓我們繼續吧！</p><img src="/images/leetcode-valid-parentheses/0204.png"><p>題目來源：<a href="https://leetcode.com/problems/valid-parentheses/">leetcode</a></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid</span>(<span class="hljs-params">s</span>)<br>  stack = []<br>  mapping = &#123; <span class="hljs-string">&#x27;)&#x27;</span> =&gt; <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span> =&gt; <span class="hljs-string">&#x27;[&#x27;</span> &#125;<br><br>  s.each_char <span class="hljs-keyword">do</span> |<span class="hljs-params">char</span>|<br>    <span class="hljs-keyword">if</span> mapping.key?(char)<br>      top_element = stack.pop |<span class="hljs-params"></span>| <span class="hljs-string">&#x27;#&#x27;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">if</span> mapping[char] != top_element<br>    <span class="hljs-keyword">else</span><br>      stack.push(char)<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  stack.empty?<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>先設定一個名為<code>stack</code>的空陣列，還有左括號的hash，<br>因為key為右括號，所以第一次的左括號都無懸念地進入<code>stack</code>，第二次迴圈，<code>top_element</code>則取出上一次放進去的左括號，並去比對是否和第二次迴圈對應到的左括號相符。</p><p>如果不符合即會回傳<code>false</code>，如果所有的括號都成對，即<code>stack</code>為空</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        stack = []<br>        mapping = &#123;<span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>: <span class="hljs-string">&#x27;[&#x27;</span>&#125;<br><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> mapping:<br>                top_element = stack.pop() <span class="hljs-keyword">if</span> stack <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;#&#x27;</span><br>                <span class="hljs-keyword">if</span> mapping[char] != top_element:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                stack.append(char)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> stack<br></code></pre></td></tr></table></figure><p><code>python</code>使用一樣的方式，不過因為<code>python</code>的添加<code>list</code>使用的是<code>append</code>，所以這裡我改用<code>stack.append(char)</code> </p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isValid = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> stack = [];<br>    <span class="hljs-keyword">const</span> mapping = &#123; <span class="hljs-string">&#x27;)&#x27;</span>: <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>: <span class="hljs-string">&#x27;[&#x27;</span> &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> char <span class="hljs-keyword">of</span> s) &#123;<br>        <span class="hljs-keyword">if</span> (mapping[char]) &#123;<br>            <span class="hljs-keyword">const</span> topElement = stack.<span class="hljs-title function_">pop</span>() || <span class="hljs-string">&#x27;#&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (mapping[char] !== topElement) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack.<span class="hljs-title function_">push</span>(char);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> !stack.<span class="hljs-property">length</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>JS也是依樣畫葫蘆！只要稍微改寫一下寫法即可</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>參考資料：<br><a href="https://docs.python.org/zh-tw/3/tutorial/datastructures.html">Python手冊</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此記錄每天刷leetcode的解法+說明，今天會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;來解題，今天來到第六天，讓我們繼續吧！&lt;/p&gt;
&lt;img src=&quot;/ima</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="longest common prefix" scheme="http://adora-xu.com/tags/longest-common-prefix/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day05 longest common prefix</title>
    <link href="http://adora-xu.com/2024/02/03/leetcode-longest-common-prefix/"/>
    <id>http://adora-xu.com/2024/02/03/leetcode-longest-common-prefix/</id>
    <published>2024-02-03T12:58:13.000Z</published>
    <updated>2024-02-03T13:07:08.698Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此記錄每天刷leetcode的解法+說明，今天會用<code>Ruby</code>、<code>Python</code>、<code>JavaScript</code>來解題，今天來到第五天，讓我們繼續吧！</p><img src="/images/leetcode-longest-common-prefix/1.png"><p>題目來源：<a href="https://leetcode.com/problems/longest-common-prefix/">leetcode</a></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">longest_common_prefix</span>(<span class="hljs-params">strs</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">if</span> strs.empty?<br><br>  common_prefix = <span class="hljs-string">&quot;&quot;</span><br>  first_str = strs.first<br><br>  first_str.chars.each_with_index <span class="hljs-keyword">do</span> |<span class="hljs-params">char, i</span>|<br>    <span class="hljs-keyword">break</span> <span class="hljs-keyword">unless</span> strs.all? &#123; |<span class="hljs-params">str</span>| str[i] == char &#125;<br>    common_prefix += char<br>  <span class="hljs-keyword">end</span><br><br>  common_prefix<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>先從陣列中取出第一個數為<code>first_str</code>，作為比較的基準，接著使用<code>.chars.each_with_index</code>對第一個詞每個字母做迭代，並返回索引值<code>i</code>。</p><p><code>.all</code>是來檢查<code>array</code>中的所有元素是否都符合给定的條件，這裡的條件就是<code>str[i] == char</code>，如果有不同即停止。</p><p><code>common_prefix</code>即記錄<code>array</code>中相同的字</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> strs:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br>        common_prefix = <span class="hljs-string">&quot;&quot;</span><br>        first_str = strs[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(first_str):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(i &gt;= <span class="hljs-built_in">len</span>(s) <span class="hljs-keyword">or</span> s[i] != char <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strs):<br>                <span class="hljs-keyword">break</span><br>            common_prefix += char<br><br>        <span class="hljs-keyword">return</span> common_prefix<br></code></pre></td></tr></table></figure><p><code>enumerate</code>會回傳字串的<code>index</code>，以下是範例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>seasons = [<span class="hljs-string">&#x27;Spring&#x27;</span>, <span class="hljs-string">&#x27;Summer&#x27;</span>, <span class="hljs-string">&#x27;Fall&#x27;</span>, <span class="hljs-string">&#x27;Winter&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(<span class="hljs-built_in">enumerate</span>(seasons))<br>[(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Spring&#x27;</span>), (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Summer&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Fall&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Winter&#x27;</span>)]<br></code></pre></td></tr></table></figure><p><code>s[i]</code>則是代表<code>str</code>內的<code>i</code>位置的字母，基本上和ruby邏輯一樣，只是寫法不同而已！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">strs</span>) &#123;<br>    <span class="hljs-keyword">if</span> (strs.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> commonPrefix = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">const</span> firstStr = strs[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; firstStr.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> char = firstStr[i];<br>        <span class="hljs-keyword">if</span> (!strs.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">str</span> =&gt;</span> str[i] === char)) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        commonPrefix += char;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> commonPrefix;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>JS</code>的寫法和<code>Ruby</code>差不多，可以使用<code>.every</code>來確保是否為相同字母，其他解法就和<code>Ruby</code>和<code>Python</code>類似，差別在使用<code>for (let i = 0; i &lt; firstStr.length; i++)</code>迴圈，並使用<code>str[i]</code>來比對文字是否相符，最後也完成解答！</p><p>這幾天寫下來Ruby看起來還是最簡潔優雅٩(●˙▿˙●)۶，看起來好舒服</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此記錄每天刷leetcode的解法+說明，今天會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;來解題，今天來到第五天，讓我們繼續吧！&lt;/p&gt;
&lt;img src=&quot;/ima</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="longest common prefix" scheme="http://adora-xu.com/tags/longest-common-prefix/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode挑戰: Day04 roman to integer</title>
    <link href="http://adora-xu.com/2024/02/02/leetcode-roman-to-integer/"/>
    <id>http://adora-xu.com/2024/02/02/leetcode-roman-to-integer/</id>
    <published>2024-02-02T15:36:56.000Z</published>
    <updated>2024-02-02T15:43:36.818Z</updated>
    
    <content type="html"><![CDATA[<p>為了加強自己的程式能力，因此記錄每天刷leetcode的解法+說明，今天會用<code>Ruby</code>、<code>Python</code>、<code>JavaScript</code>來解題，今天來到第四天，讓我們繼續吧！</p><img src="/images/leetcode-roman-to-integer/1.png"><p>題目來源：<a href="https://leetcode.com/problems/roman-to-integer">leetcode</a></p><p>羅馬數字的解釋:<a href="https://zh.wikipedia.org/zh-tw/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97">羅馬數字</a></p><p>羅馬數字共有7個，即Ⅰ（1）、Ⅴ（5）、Ⅹ（10）、Ⅼ（50）、Ⅽ（100）、Ⅾ（500）和Ⅿ（1000）。另外因為羅馬數字有<code>左加右減</code>的特性，代表說大的數字在左邊就往右加，大的數字在右邊就往左減。</p><p>像是<code>MCMXCIV</code>的羅馬數字為何？可以依序先把他們變成阿拉伯數字，再從個位數開始往左邊遵循左加右減的規則，就可以得到答案了：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">M</span>(<span class="hljs-number">1000</span>),C(<span class="hljs-number">100</span>),M(<span class="hljs-number">1000</span>),X(<span class="hljs-number">10</span>),C(<span class="hljs-number">100</span>),I(<span class="hljs-number">1</span>),V(<span class="hljs-number">5</span>)<br><span class="hljs-attribute">1000</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">4</span>(-<span class="hljs-number">1</span> + <span class="hljs-number">5</span>)<br><span class="hljs-attribute">1000</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10</span>, <span class="hljs-number">104</span>(<span class="hljs-number">100</span> + <span class="hljs-number">4</span>)<br><span class="hljs-attribute">1000</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">94</span>(-<span class="hljs-number">10</span> + <span class="hljs-number">104</span>)<br><span class="hljs-attribute">1000</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1094</span> (<span class="hljs-number">1000</span> + <span class="hljs-number">94</span>)<br><span class="hljs-attribute">1000</span>, <span class="hljs-number">994</span>(-<span class="hljs-number">100</span> + <span class="hljs-number">1094</span>) <br><span class="hljs-attribute">1994</span> (<span class="hljs-number">1000</span>+<span class="hljs-number">994</span>)<br></code></pre></td></tr></table></figure><p>其實規則蠻單純的，遵循左加右減即可，這樣就可以把它改寫成程式了：</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">roman_to_int</span>(<span class="hljs-params">s</span>)<br>  roman_num = &#123;<span class="hljs-string">&#x27;I&#x27;</span>=&gt;<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;V&#x27;</span>=&gt;<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;X&#x27;</span>=&gt;<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>=&gt;<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;C&#x27;</span>=&gt;<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;D&#x27;</span>=&gt;<span class="hljs-number">500</span>, <span class="hljs-string">&#x27;M&#x27;</span>=&gt;<span class="hljs-number">1000</span>&#125;<br>  result = <span class="hljs-number">0</span><br>  prev_value = <span class="hljs-number">0</span><br><br>  s.chars.reverse_each <span class="hljs-keyword">do</span> |<span class="hljs-params">char</span>|<br>    value = roman_num[char]<br>    result += (value &lt; prev_value) ? -value : value<br>    prev_value = value<br>  <span class="hljs-keyword">end</span><br><br>  result<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>先把羅馬數字的七個數做成<code>hash</code>，接著設定<code>result</code> <code>pre_value</code>為<code>0</code>，再使用<code>reverse_each</code>，把值從個位數丟進去，轉換為阿拉伯數字後，比較<code>prev_value</code>，因為<code>prev_value</code>恆在右邊，所以如果<code>value</code>比較小，<code>value</code>則為<code>-</code></p><p>這邊要特別注意，因為每次比較的值是要比較原始的<code>value</code>，所以會需要<code>prev_value</code>來儲存上一次的值，而不是和<code>result</code>比較。</p><h2 id="Pyton"><a href="#Pyton" class="headerlink" title="Pyton"></a>Pyton</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        roman_num = &#123;<span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">1000</span>&#125;<br>        result = <span class="hljs-number">0</span><br>        prev_value = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(s):<br>            value = roman_num[char]<br>            result += -value <span class="hljs-keyword">if</span> value &lt; prev_value <span class="hljs-keyword">else</span> value<br>            prev_value = value<br><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>因為基本的邏輯架構和<code>Ruby</code>一樣，這邊只有改變寫法而已</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">romanToInt</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> romanNum = &#123;<span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">1000</span>&#125;;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> prevValue = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">const</span> char = s[i];<br>        <span class="hljs-keyword">const</span> value = romanNum[char];<br>        result += (value &lt; prevValue) ? -value : value;<br>        prevValue = value;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>因為JS沒有<code>reverse</code>，所以我使用最原始的方法，利用<code>索引值</code>，<code>i</code>起始值設為<code>s.length - 1</code>，就可以反向丟入羅馬字，再利用<code>hash</code>轉換為數字即可，接下來的邏輯都和<code>Ruby</code>一樣，只不過變數慣例寫不一樣而已！</p><p>今天的題目比較難的在前面轉換的邏輯，理清之後轉換成程式碼就簡單多了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;為了加強自己的程式能力，因此記錄每天刷leetcode的解法+說明，今天會用&lt;code&gt;Ruby&lt;/code&gt;、&lt;code&gt;Python&lt;/code&gt;、&lt;code&gt;JavaScript&lt;/code&gt;來解題，今天來到第四天，讓我們繼續吧！&lt;/p&gt;
&lt;img src=&quot;/ima</summary>
      
    
    
    
    <category term="leetcode" scheme="http://adora-xu.com/categories/leetcode/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://adora-xu.com/tags/Python/"/>
    
    <category term="leetcode" scheme="http://adora-xu.com/tags/leetcode/"/>
    
    <category term="roman to integer" scheme="http://adora-xu.com/tags/roman-to-integer/"/>
    
  </entry>
  
</feed>
