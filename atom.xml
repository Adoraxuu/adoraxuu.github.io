<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adora&#39;s Blog</title>
  
  
  <link href="http://adora-xu.com/atom.xml" rel="self"/>
  
  <link href="http://adora-xu.com/"/>
  <updated>2024-01-07T08:21:32.936Z</updated>
  <id>http://adora-xu.com/</id>
  
  <author>
    <name>Adora Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ruby on Rails : ActiveStorage連線Amazon S3</title>
    <link href="http://adora-xu.com/2024/01/07/active-storage-amazon-s3/"/>
    <id>http://adora-xu.com/2024/01/07/active-storage-amazon-s3/</id>
    <published>2024-01-07T07:12:39.000Z</published>
    <updated>2024-01-07T08:21:32.936Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/active-storage-amazon-s3/01.avif"><blockquote><p>圖片來源<a href="https://unsplash.com/photos/black-samsung-galaxy-smartphone-displaying-amazon-logo-rymh7EZPqRs">Usplash</a></p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>在使用Ruby on Rails製作網頁的時候，常常會使用Rails的 <a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Active Storage</a>來儲存圖片，<br>讓網頁內容更加豐富٩(●˙▿˙●)۶…⋆ฺ主要使用方法可以參考 <a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Rails Guide</a>的介紹</p><p>本篇主要介紹如何把Active Storage的資料儲存在Amazon S3，</p><p>因為網站常常有許多動態增長的檔案，最常見的就是使用者上傳的照片。<br>因為檔案很多很複雜，要處理這些檔案是一大難題。<br>我們可以利用上傳檔案到S3，來輕鬆的處理～<br>也能夠降低資料保存的風險（雞蛋不要放在同一個籃子的概念）</p><p>在找關於連接Amazon S3的資料時，其實花了一段時間，<br>這是目前覺得教學最詳細的是這個影片：<br><a href="https://www.youtube.com/watch?v=UOLpv2f8mz8">Build a Blog with Rails Part 17: Handling File Uploads with ActiveStorage &amp; Amazon S3</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/UOLpv2f8mz8?si=eEjG_z97PKTQvtWR" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>本篇文章也會參考此影片來編寫，好的就讓我們開始吧 (^・ω・^ )</p><ul><li><p>先到<a href="https://aws.amazon.com/tw/pm/serv-s3/">AWS S3</a>註冊帳號</p></li><li><p>接著到S3 創建存放資料的地方，點選Create Bucket</p><img src="/images/active-storage-amazon-s3/03.png"></li><li><p>選擇Bucket的所在地＆Bucket Name</p><img src="/images/active-storage-amazon-s3/04.png"></li></ul><p>依個人喜好而定，通常選離大部分使用者較近的位置，讀取速度會快一咪咪</p><ul><li><p>ACLs enabled<br>這個視需求而定而勾選，意思是說此Bucket的物件可以被其他 AWS 帳戶所擁有，並且可以透過 ACLs 來指定對該Bucket及其內部物件的訪問權限。<br>這意味著可以使用 ACLs 來管理誰可以讀取、寫入或刪除該儲存桶中的檔案，以及這些權限的具體配置。</p></li><li><p>存取權限 Access Settings</p></li></ul><img src="/images/active-storage-amazon-s3/05.png"><p>這部分是寫入資料的還有訪問的權限，因為能夠開放讓使用者上傳圖片，<br>所以我只勾選了下面兩項。</p><ul><li>設定CORS<br>在Bucket的頁面點選Permission拉到最下面<br>可以直接複製Rails Guids上面的資料，並將網址改成本次測試的網址，<br>如果你有正式發佈的網址，也能講網址填寫在這裡<img src="/images/active-storage-amazon-s3/CORS.png"></li><li>接著到<a href="https://aws.amazon.com/tw/iam/">I AM</a> 建造使用者並新增Policy，為了設置訪問的權限及得到密鑰<img src="/images/active-storage-amazon-s3/07.png"></li></ul><p>選擇S3，並在下面勾選</p><ul><li>List : ListBucket</li><li>Read: GetObj</li><li>Write: PutObj,DeleteObj</li><li>Permission management: PutObjAcl</li></ul><p>這部分是參考<a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Rails Guide- Active Storage Overview</a>的建議</p><img src="/images/active-storage-amazon-s3/08.png"><p>Resource &gt; Bucket 點選Add ARNs，填寫你剛剛創建的Bucket Name，讓Policy發揮效用<br>這邊我填寫兩個，除了這個bucket還有這個bucket之下的檔案都發揮效用</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">adora-bucket<br><span class="hljs-strong">*adora-bucket/*</span><br></code></pre></td></tr></table></figure><p>接著下一頁填寫完policy名稱，按create policy，Policy就設定完成了！！🤩</p><ul><li>創建使用者，並選擇剛剛選好的Policy</li><li>進入使用者頁面，點選Security credential，創建Access Key，讓我們的網站能夠透過此密鑰上傳圖片到S3</li><li>選擇可以在AWS以外使用<img src="/images/active-storage-amazon-s3/09.png"></li><li>進入金鑰頁面</li></ul><p>把金鑰儲存起來（id和secret_key都要），之後就不能訪問這個頁面，<br>所以很重要一定要存，接著前置步驟就大公告成了🤗</p><ul><li><p>回到我們的專案，將storage.yml內，關於amazon的註解解掉，並輸入你的資料</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#storage.yml</span><br><span class="hljs-symbol">amazon:</span><br>  <span class="hljs-symbol">service:</span> <span class="hljs-variable constant_">S3</span><br>  <span class="hljs-symbol">access_key_id:</span> &lt;%= <span class="hljs-title class_">Rails</span>.application.credentials.dig(<span class="hljs-symbol">:aws</span>, <span class="hljs-symbol">:access_key_id</span>) %&gt;<br>  <span class="hljs-symbol">secret_access_key:</span> &lt;%= <span class="hljs-title class_">Rails</span>.application.credentials.dig(<span class="hljs-symbol">:aws</span>, <span class="hljs-symbol">:secret_access_key</span>) %&gt;<br>  <span class="hljs-symbol">region:</span> us-east-<span class="hljs-number">1</span>&lt;替換成你的區域&gt;<br>  <span class="hljs-symbol">bucket:</span> adora-bucket&lt;替換成的你的名稱&gt;<br></code></pre></td></tr></table></figure></li><li><p>接著在終端機輸入</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">EDITOR</span>=<span class="hljs-string">&quot;code --wait&quot;</span> rails <span class="hljs-symbol">credentials:</span>edit<br></code></pre></td></tr></table></figure><p>會開啟一個檔案檔名為crendentials.yml，可以將密鑰寫在這裡，必須要有相對應的master.key才能開啟這個檔案，github設定不會將master.key上傳～如果這個更動要分享給組員，將master.key私下傳給團隊成員，請他放在config資料夾底下即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">aws:</span><br>  <span class="hljs-symbol">access_key_id:</span> &lt;你的key_id&gt;<br>  <span class="hljs-symbol">secret_access_key:</span> &lt;你的密鑰&gt;<br></code></pre></td></tr></table></figure><ul><li>#development.rb設定將active_storage從:local改為:amazon</li></ul><p>(如果要在正式環境使用，則需要更改production.rb)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#development.rb</span><br>config.active_storage.service = <span class="hljs-symbol">:amazon</span><br></code></pre></td></tr></table></figure><p>下載AWS S3的Gem</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#gemfile</span><br>gem <span class="hljs-string">&quot;aws-sdk-s3&quot;</span>, <span class="hljs-symbol">require:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>執行bundle i</p><p>這樣就大功告成了！！！<br>試著上傳圖片，可以看到後台顯示照片傳到s3</p><img src="/images/active-storage-amazon-s3/12.png"><p>看s3的後台也看到圖片檔案<br><img src="/images/active-storage-amazon-s3/11.png"></p><p>終於完成這篇了⸍⚙̥ꇴ⚙̥⸌應該是我史上圖片最多的一篇，<br>結果在上傳之後14張照片就消失了( ͒˃⌂˂ ͒)，<br>原來我不小心放在Public資料夾，而且下了Hexo cl指令  ◴_◶<br>可能老天爺想要我多熟練一點點，只好認命重新截圖…也刪除了一些不必要的圖片</p><p>最後希望這篇文章有幫助到你！有任何問題歡迎回覆，<br>本篇文章是我由以下參考資料整理而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://www.youtube.com/watch?v=UOLpv2f8mz8">Build a Blog with Rails Part 17: Handling File Uploads with ActiveStorage &amp; Amazon S3</a></p></blockquote><blockquote><p><a href="https://edgeguides.rubyonrails.org/active_storage_overview.html#s3-service-amazon-s3-and-s3-compatible-apis">Rails Guide- Active Storage Overview</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/active-storage-amazon-s3/01.avif&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;圖片來源&lt;a href=&quot;https://unsplash.com/photos/black-samsung-galaxy-smartpho</summary>
      
    
    
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/categories/Ruby-on-Rails/"/>
    
    
    <category term="AWS" scheme="http://adora-xu.com/tags/AWS/"/>
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/tags/Ruby-on-Rails/"/>
    
    <category term="active stroage" scheme="http://adora-xu.com/tags/active-stroage/"/>
    
    <category term="amazon" scheme="http://adora-xu.com/tags/amazon/"/>
    
    <category term="s3" scheme="http://adora-xu.com/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails: 用Devise10分鐘製作管理者後台版面</title>
    <link href="http://adora-xu.com/2023/12/24/rails-admin-layout-devise/"/>
    <id>http://adora-xu.com/2023/12/24/rails-admin-layout-devise/</id>
    <published>2023-12-24T04:03:04.000Z</published>
    <updated>2023-12-24T04:22:27.735Z</updated>
    
    <content type="html"><![CDATA[<style>.em-div{background-color: #d4a373;color: white;padding: 10px;margin: 10px;border-radius: 5px;}.em-div2{border:2px #d4a373 solid;margin:5px;padding:10px 2px 2px 2px;border-style:dashed;}.image-container {  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 陰影效果 */  border-radius: 10px; /* 圓角效果 */  overflow: hidden; /* 超出部分隱藏 */  margin: 5px; /* 留白效果 */}</style><h3 id=""><a href="#" class="headerlink" title=""></a></h3><div class="image-container"><img src="/images/rails_admin_layout_devise/banner.png"></div><p>這篇是個實作範例 ٩(●˙▿˙●)۶…⋆ฺ</p><p>主要內容都是參考以下影片而成，如果要了解更多可以看：</p><blockquote><p><a href="https://www.youtube.com/watch?v=SxwFyK9OtfY">Layouts For Admin Users with Devise in Ruby on Rails 7</a></p></blockquote><p>今天使用Rails來的<a href="https://rubygems.org/gems/devise/versions/4.2.0?locale=zh-TW">Devise</a>套件來製作管理者後台版面</p><p>以下為實作步驟：</p><ul><li>new一個新專案，我名稱設為blog，也可以設定別的</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails new blog<br></code></pre></td></tr></table></figure><ul><li>在Gemfile資料夾安裝devise，並執行<code>bundle install</code></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#Gemfile</span><br>gem <span class="hljs-string">&#x27;devise&#x27;</span>, <span class="hljs-string">&#x27;~&gt; 4.2&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>bundle install<br></code></pre></td></tr></table></figure><ul><li>新增pages_controller＆home.html.erb</li></ul><p>這裡也可以設定別的主題，只不過為了示範所以選擇這個，</p><p>這個指令會生出Pages的controller，裡面有home方法，view有home.html.erb頁面，routes也會幫忙長好pages&#x2F;home，蠻方便的٩(๑❛ᴗ❛๑)۶</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g controller pages home<br></code></pre></td></tr></table></figure><ul><li>利用scaffold做CRUD的流程</li></ul><p>用scaffold可以省掉好多步驟(´∀&#96;)懶人救星</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g scaffold post title <span class="hljs-symbol">body:</span>text<br></code></pre></td></tr></table></figure><div class="image-container"><img src="/images/rails_admin_layout_devise/01.png"></div><ul><li>設定routes</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#routes.rb</span><br>root <span class="hljs-string">&#x27;pages#home&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>安裝Devise &amp; 生成使用者</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g <span class="hljs-symbol">devise:</span>install<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g devise user<br></code></pre></td></tr></table></figure><p>devise會自動幫你增加檔案，真的很方便</p><div class="image-container"><img src="/images/rails_admin_layout_devise/02.png"></div><ul><li>生一個migration，增加role欄位到User資料表</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>rails g migration <span class="hljs-title class_">AddRoleToUsers</span> <span class="hljs-symbol">role:</span>integer<br></code></pre></td></tr></table></figure><ul><li>到User model增加角色，其中角色的名稱都可以自己定義，我使用admin</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#user.rb</span><br>enum <span class="hljs-symbol">role:</span>[<span class="hljs-symbol">:general</span>, <span class="hljs-symbol">:admin</span>]<br></code></pre></td></tr></table></figure><ul><li>接著就可以到application_controller.rb，設置判斷使用者登入的layout頁面的<code>set_layout</code>方法</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#controller&gt;application_controller</span><br>layout <span class="hljs-symbol">:set_layout</span> <span class="hljs-comment"># 設置判斷登入的使用者layout頁面</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_layout</span><br>    <span class="hljs-keyword">if</span> current_user&amp;.admin?<br>      <span class="hljs-string">&#x27;admin&#x27;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-string">&#x27;application&#x27;</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><code>current_user&amp;.admin?</code></p><p>這行原本是這樣寫：<code>if current_user &amp;&amp; current_user.admin == true</code></p><p>可以用 &amp;. 簡化</p><p>如果current_user存在（也就是有登入）以及 登入的角色是admin的話，layout就使用admin</p><p>如果不是的話， layout就使用預設導入application</p><ul><li>接著到layout資料夾下，手動新增一個admin.html.erb，內容可以隨自己喜好調整</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#views&gt;layout</span><br>新增 <span class="hljs-comment">#admin.html.erb</span><br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;<span class="hljs-title class_">Blog</span>&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br><span class="hljs-regexp">    &lt;%= csrf_meta_tags %&gt;</span><br><span class="hljs-regexp">    &lt;%= csp_meta_tag %&gt;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">    &lt;%= stylesheet_link_tag &quot;application&quot;, &quot;data-turbo-track&quot;: &quot;reload&quot; %&gt;</span><br><span class="hljs-regexp">    &lt;%= javascript_importmap_tags %&gt;</span><br><span class="hljs-regexp">  &lt;/head</span>&gt;<br><br>  &lt;body&gt;<br>    &lt;h2&gt;此為管理者介面&lt;<span class="hljs-regexp">/h2&gt;</span><br><span class="hljs-regexp">    &lt;%= yield %&gt;</span><br><span class="hljs-regexp">  &lt;/body</span>&gt;<br>&lt;<span class="hljs-regexp">/html&gt;</span><br></code></pre></td></tr></table></figure><p>接著可以到home.html.erb頁面，寫跳轉的判斷</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#home.html.erb</span><br>      &lt;%<span class="hljs-comment">#是否轉為店家後台判斷%&gt;</span><br>      &lt;% <span class="hljs-keyword">if</span> current_user %&gt;<br>        &lt;%= current_user.role %&gt;<br>          &lt;%= link_to <span class="hljs-string">&quot;logout&quot;</span>, destroy_user_session_path, <span class="hljs-symbol">method:</span> <span class="hljs-symbol">:delete</span>, <span class="hljs-symbol">data:</span> &#123; <span class="hljs-symbol">turbo_method:</span> <span class="hljs-symbol">:delete</span>&#125; %&gt;<br>      &lt;% <span class="hljs-keyword">else</span> %&gt;<br>          &lt;%= link_to <span class="hljs-string">&quot;log_in&quot;</span>, new_user_session_path %&gt;<br>      &lt;% <span class="hljs-keyword">end</span> %&gt;<br></code></pre></td></tr></table></figure><p>這個寫的地方可以自由選擇，如果要做個網站有很多頁面的話，</p><p>我也有嘗試放在_navbar.html.bar，讓整個網頁都可以套用此設定</p><p>接著就大功告成了！！</p><p>這是剛剛步驟做出的首頁</p><div class="image-container"><img src="/images/rails_admin_layout_devise/03.png"></div><p>登入頁面</p><div class="image-container"><img src="/images/rails_admin_layout_devise/04.png"></div><p>因為還沒設定current_user.role所以在html.erb頁面放<code>&lt;% console %&gt;</code>程式碼，</p><p>搭配指令，來快速指定某使用者的role</p><div class="image-container"><img src="/images/rails_admin_layout_devise/05.png"></div><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">current_user<br><br>current_user.role = <span class="hljs-title class_">User</span>.roles[<span class="hljs-symbol">:admin</span>]<br><br>current_user.save<br><br>current_user.admin?<br></code></pre></td></tr></table></figure><p>登入成功後，就有管理者的介面了！！</p><div class="image-container"><img src="/images/rails_admin_layout_devise/06.png"></div><p>實際應用的時候，可以把只有管理者知道的連結&amp;資訊放在這，</p><p>讓他的介面看起來和一般使用者有區隔</p><p>使用Devise套件真的好方便٩(●˙▿˙●)۶…⋆ฺ 我原本想說自己刻好麻煩，</p><p>這整個步驟大約10分鐘就可以完成了！！</p><p>有興趣也可以試看看～～</p><hr><p>本篇文章是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://www.youtube.com/watch?v=SxwFyK9OtfY">Layouts For Admin Users with Devise in Ruby on Rails 7</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 s</summary>
      
    
    
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/categories/Ruby-on-Rails/"/>
    
    
    <category term="devise" scheme="http://adora-xu.com/tags/devise/"/>
    
    <category term="rails7" scheme="http://adora-xu.com/tags/rails7/"/>
    
    <category term="rails" scheme="http://adora-xu.com/tags/rails/"/>
    
    <category term="layout" scheme="http://adora-xu.com/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>Advent of code 2023 —Day 01</title>
    <link href="http://adora-xu.com/2023/12/17/AOC-day01/"/>
    <id>http://adora-xu.com/2023/12/17/AOC-day01/</id>
    <published>2023-12-17T01:30:16.000Z</published>
    <updated>2023-12-17T01:45:17.181Z</updated>
    
    <content type="html"><![CDATA[<style>.em-div{background-color: #d4a373;color: white;padding: 10px;margin: 10px;border-radius: 5px;}.em-div2{border:2px #d4a373 solid;margin:5px;padding:10px 2px 2px 2px;border-style:dashed;}</style><h3 id="關於Advent-of-code"><a href="#關於Advent-of-code" class="headerlink" title="關於Advent of code"></a>關於Advent of code</h3><blockquote><p><a href="https://adventofcode.com/">“Advent of code”</a>是一年一度的以聖誕節為主題的計算機程式挑戰。自2015年以來一直在運行。程式難題涵蓋各種技能集和技能級別，可以使用任何編程語言來解決。參與者還可以在全球和私人排行榜上根據速度進行競爭。該活動由軟件工程師Eric Wastl創立並維護。</p></blockquote><p>來源：<a href="https://en.wikipedia.org/wiki/Advent_of_Code">維基百科</a></p><h3 id="Day-1-part-1"><a href="#Day-1-part-1" class="headerlink" title="Day 1 - part.1"></a>Day 1 - part.1</h3><p>今年第一次來參與Advent of code，順便把我的解題過程也記錄下來٩(^ᴗ^)۶</p><p>這是第一天 Part 1的題目：</p><img src="/images/AOC/01.png"><p>第一部分比較簡單，只要透過gsub就可以解決！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_input</span>(<span class="hljs-params">input_array</span>)<br>  results = []<br><span class="hljs-comment">#設定一個空陣列</span><br><br><span class="hljs-comment"># 使用each do將陣列裡的數丟出處理並替換</span><br>  input_array.each <span class="hljs-keyword">do</span> |<span class="hljs-params">input_string</span>|<br>    digits = input_string.gsub(<span class="hljs-regexp">/\D/</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    result = <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;digits[<span class="hljs-number">0</span>]&#125;</span><span class="hljs-subst">#&#123;digits[-<span class="hljs-number">1</span>]&#125;</span>&quot;</span><br><span class="hljs-comment">#利用字串將首位數+尾數串起來，如果只有一個數字則重複</span><br>    results.push(result)<br><span class="hljs-comment">#將結果推進result裡</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-comment"># 計算結果陣列中數字的總和 #利用.map(&amp;:to_i)將陣列裡的字串轉為數字才可以相加</span><br>  sum_result = results.map(&amp;<span class="hljs-symbol">:to_i</span>).sum<br><br>  <span class="hljs-comment"># 輸出結果</span><br>  puts sum_result<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="Day1-Part-2"><a href="#Day1-Part-2" class="headerlink" title="Day1 Part.2"></a>Day1 Part.2</h3><p>第二部分我整個大卡關(ᗒᗣᗕ)՞</p><img src="/images/AOC/02.png"><p>有想出說做出一個hash，將”one” &#x3D;&gt; “1”依序輸入進去，<br>接著使用each+gsub將將裡面的數字替換掉，<br>但遇到eightwothree，輸出的結果卻是eigh23….</p><p>最後上網找了<a href="https://www.youtube.com/@cjav_dev">CJ Avilla</a>分享的解法，<br>來源： <a href="https://www.youtube.com/watch?v=lrJfC2dF84k&list=PLS6F722u-R6KYlGyUv65EFpGKl2Esmurr&index=15">Match and Scan - Day 01 - Advent of Code 2023</a></p><p>原來使用match方法就可以了ʕ •̀ o •́ ʔ</p><p>關於match，<a href="https://rubyapi.org/3.2/o/s?q=match">Ruby API</a>是這樣解釋：<br><strong><strong><a href="https://rubyapi.org/3.2/o/string#method-i-match">String#match</a></strong></strong></p><div class="em-div2">Returns a MatchData object (or `nil`) based on `self` and the given `pattern`.Note: also updates [Special global variables at `Regexp`](https://rubyapi.org/3.2/o/regexp#class-Regexp-label-Special+global+variables). Computes `regexp` by converting `pattern` (if not already a Regexp).</div>match會回傳符合內容的物件，看起來像這個樣子```'foo'.match('f') # => #<MatchData "f">```<p>另外可以使用常規表達法轉換，所以解法可以這樣寫：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs ruby">input = <span class="hljs-string">&lt;&lt;~INPUT</span><br><span class="hljs-string">two1nine</span><br><span class="hljs-string">eightwothree</span><br><span class="hljs-string">abcone2threexyz</span><br><span class="hljs-string">xtwone3four</span><br><span class="hljs-string">4nineeightseven2</span><br><span class="hljs-string">zoneight234</span><br><span class="hljs-string">7pqrstsixteen</span><br><span class="hljs-string">INPUT</span><br><br>replacement = &#123;<br>  <span class="hljs-string">&quot;one&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;two&quot;</span> =&gt; <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-string">&quot;three&quot;</span> =&gt; <span class="hljs-string">&quot;3&quot;</span>,<br>  <span class="hljs-string">&quot;four&quot;</span> =&gt; <span class="hljs-string">&quot;4&quot;</span>,<br>  <span class="hljs-string">&quot;five&quot;</span> =&gt; <span class="hljs-string">&quot;5&quot;</span>,<br>  <span class="hljs-string">&quot;six&quot;</span> =&gt; <span class="hljs-string">&quot;6&quot;</span>,<br>  <span class="hljs-string">&quot;seven&quot;</span> =&gt; <span class="hljs-string">&quot;7&quot;</span>,<br>  <span class="hljs-string">&quot;eight&quot;</span> =&gt; <span class="hljs-string">&quot;8&quot;</span>,<br>  <span class="hljs-string">&quot;nine&quot;</span> =&gt; <span class="hljs-string">&quot;9&quot;</span>,<br>  <span class="hljs-string">&quot;1&quot;</span> =&gt; <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-string">&quot;2&quot;</span> =&gt; <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-string">&quot;3&quot;</span> =&gt; <span class="hljs-string">&quot;3&quot;</span>,<br>  <span class="hljs-string">&quot;4&quot;</span> =&gt; <span class="hljs-string">&quot;4&quot;</span>,<br>  <span class="hljs-string">&quot;5&quot;</span> =&gt; <span class="hljs-string">&quot;5&quot;</span>,<br>  <span class="hljs-string">&quot;6&quot;</span> =&gt; <span class="hljs-string">&quot;6&quot;</span>,<br>  <span class="hljs-string">&quot;7&quot;</span> =&gt; <span class="hljs-string">&quot;7&quot;</span>,<br>  <span class="hljs-string">&quot;8&quot;</span> =&gt; <span class="hljs-string">&quot;8&quot;</span>,<br>  <span class="hljs-string">&quot;9&quot;</span> =&gt; <span class="hljs-string">&quot;9&quot;</span>,<br>  <span class="hljs-string">&quot;0&quot;</span> =&gt; <span class="hljs-string">&quot;0&quot;</span><br>&#125;<br>result = input.each_line.map <span class="hljs-keyword">do</span> |<span class="hljs-params">line</span>|<br>  digits = line.match(<span class="hljs-regexp">/(<span class="hljs-subst">#&#123;replacement.keys.join(<span class="hljs-string">&#x27;|&#x27;</span>)&#125;</span>)/</span>, <span class="hljs-number">0</span>)<br><span class="hljs-comment">#匹配hash的key，並將所有keys用|(or)隔開，一個符合即可，後面的0為從最左邊最一開始匹配</span><br>  first = replacement[digits[<span class="hljs-number">0</span>]]<br><br>  digits = line.reverse.match(<span class="hljs-regexp">/(<span class="hljs-subst">#&#123;replacement.keys.map(&amp;<span class="hljs-symbol">:reverse</span>).join(<span class="hljs-string">&#x27;|&#x27;</span>)&#125;</span>)/</span>, <span class="hljs-number">0</span>)<br>  last = replacement[digits[<span class="hljs-number">0</span>].reverse]<br><span class="hljs-comment">#使用反轉搜索最後一個數</span><br><br>  (first+last).to_i<br><span class="hljs-keyword">end</span>.sum<br><br>p result<br></code></pre></td></tr></table></figure><p>輸入結果最後拿到星星了(´∀&#96;)（有點心虛）</p><img src="/images/AOC/03.png"><p>不過在挑戰的過程中，感覺自己又進步了一些ヾ(*´∇&#96;)ﾉ</p><p>最後真的很感謝<a href="https://www.youtube.com/@cjav_dev">CJ Avilla</a>大神能夠提供解法！</p><p>如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p><a href="https://www.youtube.com/watch?v=lrJfC2dF84k&list=PLS6F722u-R6KYlGyUv65EFpGKl2Esmurr&index=15">Match and Scan - Day 01 - Advent of Code 2023</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
.em-div{
background-color: #d4a373;
color: white;
padding: 10px;
margin: 10px;
border-radius: 5px;
}

.em-div2{
border:2px #d4a373 s</summary>
      
    
    
    
    <category term="Ruby" scheme="http://adora-xu.com/categories/Ruby/"/>
    
    
    <category term="AOC" scheme="http://adora-xu.com/tags/AOC/"/>
    
    <category term="Advent of code" scheme="http://adora-xu.com/tags/Advent-of-code/"/>
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails: MVC是什麼?</title>
    <link href="http://adora-xu.com/2023/12/02/MVC/"/>
    <id>http://adora-xu.com/2023/12/02/MVC/</id>
    <published>2023-12-02T06:11:56.000Z</published>
    <updated>2023-12-02T17:05:25.031Z</updated>
    
    <content type="html"><![CDATA[<style>  .em-div{  background-color: #d4a373;  color: white;  padding: 10px;  margin: 10px;  border-radius: 5px;  }  .em-div2{    border:2px #d4a373 solid;    margin:5px;    padding:10px 2px 2px 2px;    border-style:dashed;  }</style><img src="/images/MVC/banner.png" alt=""><h3 id="MVC-定義："><a href="#MVC-定義：" class="headerlink" title="MVC 定義："></a>MVC 定義：</h3><p>依據<a href="https://zh.wikipedia.org/zh-tw/MVC">維基百科</a>的介紹：</p><div class="em-div2">MVC模式（Model–view–controller）是軟體工程中的一種軟體架構模式，把軟體系統分為三個基本部分：模型（Model）、視圖（View）和控制器（Controller）。</div><p>MVC 模式最早由 Trygve Reenskaug 在 1978 年提出，是全錄帕羅奧多研究中心（Xerox PARC）在 20 世紀 80 年代為程式語言 Smalltalk 發明的一種軟體架構。</p><p>我們今天使用的網站是很複雜的應用程序( ˘•ω•˘ )，為了簡化程式碼並使其更方便使用，許多工程師選擇使用<strong>MVC</strong>來佈局他們的專案。</p><p>將大型應用程式分解為較小的部分，再各自負責專門的事 o(<em>^▽^</em>)o</p><h2 id="MVC-各自負責什麼？"><a href="#MVC-各自負責什麼？" class="headerlink" title="MVC 各自負責什麼？"></a>MVC 各自負責什麼？</h2><p>理解完 MVC 的背景了，接下來看看，MVC 各自負責什麼工作內容：</p><ul><li>模型（Model） - 程式設計師編寫程式應有的功能（實現演算法等等）、資料庫專家進行資料管理和資料庫設計(可以實現具體的功能)。</li><li>視圖（View） - 介面設計人員進行圖形介面設計。</li><li>控制器（Controller）- 負責轉發請求，對請求進行處理。</li></ul><p>參考資料：<a href="https://zh.wikipedia.org/zh-tw/MVC">維基百科 MVC</a></p><h2 id="MVC-當前趨勢"><a href="#MVC-當前趨勢" class="headerlink" title="MVC 當前趨勢"></a>MVC 當前趨勢</h2><p>MVC 架構已經變得如此流行，以至於現在大多數流行的框架都遵循 MVC 設計模式來開發應用程式。</p><p>目前 MVC 設計模式的流行框架有： <img src="/images/MVC/mvcframwork2.png" alt=""></p><h2 id="Ruby-on-Rails-的-MVC-架構"><a href="#Ruby-on-Rails-的-MVC-架構" class="headerlink" title="Ruby on Rails 的 MVC 架構"></a>Ruby on Rails 的 MVC 架構</h2><p>看完了以上三項解釋，應該還是很難明白到底 MVC 的實際應用，以下將用 Ruby on Rails 裡的Ｍ運作流程，搭配圖片來講解 d(&#96;･∀･)b</p><p>可以透過以下圖片來理解： <img src="/images/MVC/01.png" alt=""></p><h3 id="1-Routes"><a href="#1-Routes" class="headerlink" title="1. Routes"></a>1. Routes</h3> <!-- <img src="/images/MVC/02.png" alt=""> --><p>當有使用者輸入網址，連到網站的時候，第一關會遇到的是 routes Rails 會根據使用者輸入的網址及參數，去尋找相對應 Controller 上的 Action。</p><h3 id="2-Controller"><a href="#2-Controller" class="headerlink" title="2. Controller"></a>2. Controller</h3><!-- <img src="/images/MVC/03.png" alt=""> --><p>可以想像成控制處理中心 or 指揮官， Controller 會和 model 要資料、View 要畫面，最後提供給 routes，再讓使用者看到網頁畫面。 Controller 通常會有一個以上的 Action，這些 Action 就是 Ruby 裡的方法（method）。</p><h3 id="3-Model"><a href="#3-Model" class="headerlink" title="3. Model"></a>3. Model</h3><!-- <img src="/images/MVC/04.png" alt=""> --><p>Model 本身並不是資料庫，你可以把它想像成翻譯官，它可以幫你把你跟 Model 說的「人話」轉成資料庫看得懂的資料庫查詢語言（Structured Query Language，簡稱 SQL），透過 SQL，Model 可以跟資料庫取得你想要的資料。</p><h3 id="4-View"><a href="#4-View" class="headerlink" title="4. View"></a>4. View</h3><!-- <img src="/images/MVC/05.png" alt=""> --><p>View 為使用者最後看到的畫面，雖然 Controller&#x2F;Action 拿到資料了，但目前這包東西還沒美化、整理過，還不適合給使用者看，所以 Controller&#x2F;Action 還需要跟 View 借一下畫面，讓資料更適合使用者閱讀。</p><p>通常畫面的呈現會寫在這裡，使用的是<code>.html.erb</code>檔案。</p><p>詳細內容可以參考龍哥的<a href="https://railsbook.tw/chapters/10-mvc#mvc-flow">為你自己學 Ruby on Rails</a></p><hr><p>本篇文章是參考以下資料，透過自己繪圖+整理而成，如果有什麼問題歡迎與我討論！(<em>^▽^</em>)</p><div class="em-div2">參考資料：<p><a href="https://railsbook.tw/chapters/10-mvc#mvc-flow">為你自己學 Ruby on Rails</a></p><p><a href="https://zh.wikipedia.org/zh-tw/MVC">維基百科 MVC</a></p><p><a href="https://www.interviewbit.com/blog/mvc-architecture/">MVC Architecture – Detailed Explanation</a></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }

  .em-div2{
    </summary>
      
    
    
    
    <category term="Ruby on Rails" scheme="http://adora-xu.com/categories/Ruby-on-Rails/"/>
    
    
    <category term="Ruby" scheme="http://adora-xu.com/tags/Ruby/"/>
    
    <category term="Rails" scheme="http://adora-xu.com/tags/Rails/"/>
    
    <category term="MVC" scheme="http://adora-xu.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: 變數提升 hoisting 到底是什麼？</title>
    <link href="http://adora-xu.com/2023/11/18/hoisting/"/>
    <id>http://adora-xu.com/2023/11/18/hoisting/</id>
    <published>2023-11-18T13:58:00.000Z</published>
    <updated>2023-11-21T14:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<style>  .em-div{  background-color: #d4a373;  color: white;  padding: 10px;  margin: 10px;  border-radius: 5px;  }  .em-div2{    border:2px #d4a373 solid;    margin:5px;    padding:10px 2px 2px 2px;    border-style:dashed;  }</style><img src="/images/hoisting/banner.png">之前在<a href="https://adora-xu.com/2023/11/15/var-let-const/">使用var, let, const宣告究竟差在哪呢？</a>，裡面有談到變數提升(Hoisting)。<p>變數提升(hoisting)是在 ECMAScript® 2015 Language Specification 裡面找不到的專有名詞，<br>它是一種釐清 JaveScript 在執行階段內文如何運行的思路（尤其是在創建和執行階段）。</p><p>究竟hoisting 是什麼呢？讓我們來一探究竟 ٩(๑❛ᴗ❛๑)۶</p><p>首先先來看看<a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN</a>解釋<strong>hoisting</strong>的重點</p><p>這段話裡面有幾個重點：</p><div class="em-div2"><ol><li><p>hosting 是一種釐清 JaveScript 在執行階段內文<code>如何運行的思路</code>（尤其是在創建和執行階段）。</p></li><li><p><code>並非</code>單純地將變數和函式宣告，移動到程式的區塊頂端</p></li><li><p>變數和函數的宣告會在<code>編譯階段就被放入記憶體</code>，但實際位置和程式碼中完全一樣。</p></div></li></ol><h2 id="JavaScript-執行過程的兩大階段"><a href="#JavaScript-執行過程的兩大階段" class="headerlink" title="JavaScript 執行過程的兩大階段"></a>JavaScript 執行過程的兩大階段</h2><p>要理解 Hoisting，首先先知道 JavaScript 執行兩大階段：</p><img src="/images/hoisting/01.png"><div class="em-div2"><ul><li><p>Creation Phase</p><ul><li>註冊名稱(Declaration)</li><li>初始化（Initialisation）</li></ul></li><li><p>Execution Phase</p><ul><li>賦值(Assignment) &amp; 執行</li></ul></li></ul></div><hr><p>這樣就能夠很清楚解釋以下例子：</p><img src="/images/hoisting/02.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><div class="em-div">undefined</div><p>解釋：</p><ul><li>在 Creation Phase，會進行變數的註冊名稱和 undefined 的初始化。</li><li>在 Execution Phase，當程式碼逐行執行時，undefined 被印出。然後賦值 a &#x3D; 1 。</li></ul><h2 id="let-const-的變數提升"><a href="#let-const-的變數提升" class="headerlink" title="let &amp; const 的變數提升"></a>let &amp; const 的變數提升</h2><p>但這個情況在 let 宣告和 const 宣告時，卻變得不一樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><div class="em-div">ReferenceError: Cannot access 'a' before initialization</div>備註：const宣告的結果和let一樣<p>這時我們來看看 let &amp; const 宣告時，JS 的兩階段圖釋： <img src="/images/hoisting/03.png"></p><p>解釋：</p><ul><li>在使用 let &amp; const 宣告的變數直到初始化前，都會將變數存在 TDZ 暫時死區中</li><li>如果在初始化＆賦值前取得此變數時，便會收到錯誤</li></ul><p>透過以上圖片解釋，應該更好地理解之前提到的狀況 ٩(●˙▿˙●)۶，本篇文章都是參考以下資料整理+自己繪圖而成，如果有任何想法，歡迎留言給我！</p><div class="em-div2">參考資料：<p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN - Hoisting</a></p><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/let">MDN - let</a></p><p><a href="https://www.scaler.com/topics/hoisting-in-javascript/">Hoisting in Javascript</a></p><p><a href="https://www.youtube.com/watch?v=EvfRXyKa_GI">JavaScript Tutorial #20 | Variable &amp; Function Hoisting in JavaScript </a></p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }

  .em-div2{
    </summary>
      
    
    
    
    <category term="JavaScript" scheme="http://adora-xu.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="hoisting" scheme="http://adora-xu.com/tags/hoisting/"/>
    
    <category term="變數提升" scheme="http://adora-xu.com/tags/%E8%AE%8A%E6%95%B8%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: 使用 var, let, const 宣告究竟差在哪呢？</title>
    <link href="http://adora-xu.com/2023/11/15/var-let-const/"/>
    <id>http://adora-xu.com/2023/11/15/var-let-const/</id>
    <published>2023-11-15T07:29:55.000Z</published>
    <updated>2023-11-22T04:10:49.000Z</updated>
    
    <content type="html"><![CDATA[<style>  .em-div{  background-color: #d4a373;  color: white;  padding: 10px;  margin: 10px;  border-radius: 5px;  }  .em-div2{    border:2px #d4a373 solid;    margin:5px;    padding:10px 2px 2px 2px;    border-style:dashed;  }</style><h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/var-let-const/banner.png"><p>在 JavaScript 中，經常使用<code>var</code>, <code>let</code>, <code>const</code>這三個數來宣告，究竟這三個有什麼不同呢？下面來詳細說明(^_^)</p><div class="em-div2">註：此篇文章有多個程式碼輔助解釋，篇幅較長，您也可以拉到最底部看比較表格。</div><h2 id="由來"><a href="#由來" class="headerlink" title="由來"></a>由來</h2><blockquote><p><code>var</code>, <code>let</code>, 以及 <code>const</code> 都是在 JavaScript 用來做變數宣告的保留字，在 JavaScript 早期只有 <code>var</code>，直到 ES2015 (ES6) 時才加入了 <code>let</code> 與 <code>const</code> 。</p></blockquote><h2 id="關於-var"><a href="#關於-var" class="headerlink" title="關於 var"></a>關於 var</h2><h3 id="重點"><a href="#重點" class="headerlink" title="重點"></a>重點</h3><div class="em-div2"><ul><li><code>var</code>為<strong>函數作用域(function scope)<strong>，若在函數外宣告則為</strong>全作用域(global scope)</strong></li><li>僅有 function scope 能夠關住 var（容易污染）</li><li>var 宣告的變數，可以重新被宣告 &amp; 賦值</li><li>有<a href="https://adora-xu.com/2023/11/18/hoisting/">變數提升</a>，若先提取變數，再使用 var 宣告，會出現 undefined</div></li></ul><p>接著會用四個範例題目，來幫助解釋這四個重點 ٩(ˊᗜˋ )و</p><h3 id="var-為全作用域"><a href="#var-為全作用域" class="headerlink" title="var 為全作用域"></a>var 為全作用域</h3><p><code>var</code>可以為<strong>全作用域（global scope）</strong>或<strong>函數作用域（function scope）</strong>。這代表在函式<strong>外面</strong>定義的變數可以<strong>全域訪問</strong>，在特定函數內部定義的變數可以在函數內部存取。(補充：未宣告的變數也會放在全域變數)</p><ul><li>範例 1：全域宣告變數<code>a</code>，我們可以在程式的<strong>任何地方</strong>抓到<code>a</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output:1010</div><ul><li>範例 2：僅有 function scope 能夠關住 var，變數“a”在函數內使用 var 宣告。如果使用者在函數之外存取，則會顯示<code>ReferenceError: a is not defined</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//var無法在function外被存取;</span><br></code></pre></td></tr></table></figure><div class="em-div">output：10 <br>ReferenceError: a is not defined</div><ul><li>範例 3：var 宣告的變數，可以重新被宣告&amp;賦值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">8</span>;<br>a = <span class="hljs-number">7</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output: 7</div><ul><li>範例 4：如果使用者在宣告之前使用 var 變數，因為<a href="https://adora-xu.com/2023/11/18/hoisting/">變數提升（Hosting）</a>的關係。在執行函數之前，會優先將 var 變數放入記憶體。要注意的是：這只是在記憶體有這變數的空間，但<strong>尚未初始化</strong>。這也是為何會拿到 undefined 的原因。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><div class="em-div">output: undefined</div><h2 id="關於-let"><a href="#關於-let" class="headerlink" title="關於 let"></a>關於 let</h2><h3 id="重點-1"><a href="#重點-1" class="headerlink" title="重點"></a>重點</h3><div class="em-div2"><ul><li><code>let</code>為<b>區塊作用域(block scoped)</b>，無法在<code>&#123;block&#125;</code>之外存取它</li><li>有<a href="https://adora-xu.com/2023/11/18/hoisting/">變數提升（Hosting）</a>，但因為 let 不會幫忙初始化，而是存在<strong>暫時執行死區（TDZ）</strong>，因此<code>let</code>不能在宣告前使用，不能多次宣告。</div></li><li>範例 1：正常運行的樣子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">f</span>();<br></code></pre></td></tr></table></figure><div class="em-div">output:9</br>10</div><ul><li>範例 2: <code>let</code>宣告無法在<code>&#123;block&#125;</code>之外存取變數<code>b</code>，因此會出現<code>ReferenceError: b is not defined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br></code></pre></td></tr></table></figure><div class="em-div">output:9</br>ReferenceError: b is not defined</div><ul><li>範例 3: <code>let</code>宣告的變數不能重複宣告，但可以改變其值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><div class="em-div">output:Identifier 'a' has already been declared</div><ul><li>範例 4: <code>let</code>宣告的變數不能重複宣告，但可以改變其值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>a = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output:2</div><ul><li>範例 5:<code>let</code>作用域僅在<code>&#123;block&#125;</code>內，因此在<code>&#123;block&#125;</code>外可以使用同個變數名稱宣告</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output:9</br>10</div><ul><li>範例 6: 在<code>let</code>宣告前先提取變數<code>a</code>，但因為<code>let</code>不會幫忙初始化，而是<strong>存在 TDZ</strong>，因此會出現<code>Cannot access &#39;a&#39; before initialization</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><div class="em-div">output: Cannot access 'a' before initialization</div><h2 id="關於-const"><a href="#關於-const" class="headerlink" title="關於 const"></a>關於 const</h2><blockquote><p>常數（constant）又稱定數，是指一個數值固定不變的數，例如圓周率，與之相反的是變數。</p></blockquote><h3 id="重點-2"><a href="#重點-2" class="headerlink" title="重點"></a>重點</h3><div class="em-div2"><ul><li><code>const</code>為<b>區塊作用域(block scoped)</b>，無法在<code>&#123;block&#125;</code>之外存取它</li><li>使用<code>const</code>宣告的變數不能改變，亦不能重複宣告。</li><li>若使用 <code>const</code> 宣告，不能改變其屬性，但能夠改變內含的東西。</div></li></ul><p>相對其他的宣告方式，<code>const</code>規定相對嚴格，所以不像<code>var</code>會有很多花裡胡哨的例外行為，是個很乖巧的好孩子呢(๑¯◡¯๑)。</p><ul><li>範例 1: 使用<code>const</code>宣告的<code>a</code>，不能夠重新賦值，會出現<code>TypeError</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  a = <span class="hljs-number">9</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><div class="em-div"> output: TypeError: Assignment to constant variable.</div><ul><li>範例 2: <code>const</code>同樣為<b>區塊作用域(block scoped)</b>，在<code>&#123;block&#125;</code>外不能存取，會出現 <code>ReferenceError: a is not defined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-number">9</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output:ReferenceError: a is not defined</div><ul><li>範例 3:使用 <code>const</code> 宣告，不能改變物件，但能夠替換物件內的東西。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">prop1</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">prop2</span>: <span class="hljs-number">9</span>,<br>&#125;;<br>a.<span class="hljs-property">prop1</span> = <span class="hljs-number">3</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output:{ prop1: 3, prop2: 9 }</div><ul><li>範例 4:<code>const</code>宣告不能改變物件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">prop1</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">prop2</span>: <span class="hljs-number">9</span>,<br>&#125;;<br><br>a = &#123;<br>  <span class="hljs-attr">prop1</span>: <span class="hljs-number">20</span>,<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><div class="em-div">output: TypeError: Assignment to constant variable.</div><p>範例 3 和 4 可以想像成，乖寶寶<code>const</code>宣告了 a 是一盒工具箱，你可以往裡面加把手、螺絲起子等等工具，也可以拿走裡面的工具，但你不能再說工具箱是醫藥箱，乖寶寶<code>const</code>宣告了醫藥箱就是醫藥箱！(除非被{…}包住了)</p><p>我自己是這樣記憶的，會比較好懂 ٩(ˊᗜˋ )و</p><hr><p>看了上面這麼多範例，感覺就缺少一個東西，那就是比較表格！我特別整理了一個表格給大家參考 o(^▽^)o</p><h3 id="var-let-const-比較表格"><a href="#var-let-const-比較表格" class="headerlink" title="var, let, const 比較表格"></a>var, let, const 比較表格</h3><img src="/images/var-let-const/table2.png"><h3 id="宣告準則（建議）"><a href="#宣告準則（建議）" class="headerlink" title="宣告準則（建議）"></a>宣告準則（建議）</h3><p>為了防其他的程式碼被宣告所污染到處都拿得到 var 宣告的變數，就像任何人都可以把警察局說成是教堂，把板手說成是棒棒糖，想起來有點可怕 ╰(°▽°)╯，所以建議的宣告順序如下：</p><ol><li>const</li><li>let</li><li>var</li></ol><p>當然實際還是依照需求而定，希望今天的文章有幫助到您！</p><p>另外在文章內提到的變數提升，也歡迎參考我另外一篇文章的解釋：<a href="https://adora-xu.com/2023/11/18/hoisting/">JavaScript: 變數提升 hoisting 到底是什麼？</a></p><p>文章內容是根據以下參考資料整理＋自己繪圖而得，如果有任何建議都歡迎提供唷 (´･∀･｀)</p><p>參考資料：</p><blockquote><p><a href="https://5xcampus.com/courses/js101">五倍學院 - 為你自己學 JavaScript 課程內容</a></p></blockquote><blockquote><p><a href="https://www.explainthis.io/zh-hant/swe/js-var-let-const-in-javascript">ExplainThis：在 JavaScript 中用 var, let, 以及 const 有什麼差別？什麼時候該用哪個？</a></p></blockquote><blockquote><p><a href="https://www.geeksforgeeks.org/difference-between-var-let-and-const-keywords-in-javascript/">Difference between var, let and const keywords in JavaScript</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }

  .em-div2{
    </summary>
      
    
    
    
    <category term="JavaScript" scheme="http://adora-xu.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="var" scheme="http://adora-xu.com/tags/var/"/>
    
    <category term="let" scheme="http://adora-xu.com/tags/let/"/>
    
    <category term="const" scheme="http://adora-xu.com/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: 究竟什麼是 Event Loop？</title>
    <link href="http://adora-xu.com/2023/11/08/javascript-event-loop/"/>
    <id>http://adora-xu.com/2023/11/08/javascript-event-loop/</id>
    <published>2023-11-08T03:22:00.000Z</published>
    <updated>2023-11-22T04:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<style>  .em-div{  background-color: #d4a373;  color: white;  padding: 10px;  margin: 10px;  border-radius: 5px;  }</style><h3 id=""><a href="#" class="headerlink" title=""></a></h3><img src="/images/eventLoop/blocks.jpg">JavaScript 是單執行緒又稱為單線程（Single Thread）的設計，它一次只能執行一個任務， 而「Event Loop」就是使 JavaScript 能夠處理多個任務的秘訣<p>其中包含了：Call Stack（呼叫堆疊）、Event Loop（事件循環）、Callback Queqe(回調佇列)，以下會逐步介紹。</p><h3 id="Call-Stack-呼叫堆疊"><a href="#Call-Stack-呼叫堆疊" class="headerlink" title="Call Stack 呼叫堆疊"></a>Call Stack 呼叫堆疊</h3><img src="/images/eventLoop/callstack.png"><ul>  <li>因為 JavaScript 為單執行緒的設計，**一次只能執行一個動作**，因此等待執行的任務會被放入 Call Stack。</li>  <li>準備執行的任務會像積木一樣，由下往上堆疊。</li>  <li>執行時，也像積木一樣，由上往下拿取，也稱為先進後出法（LIFO, Last in First out）</li></ul><div class="em-div">但如果出現像 SetTimeout()、fetch()等等運行時間較長的函數，該怎麼辦呢？這個時候 Web API 就派上用場了！</div><h3 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h3><img src="/images/eventLoop/webapis.png"><ul>  <li>每當呼叫非同步函數時，它都會被傳送到對應的瀏覽器 API，該 API 會等待完成函數延遲的操作後再傳回進行處理。</li>  <li>以 setTimeout()為例，當 Call Stack 執行時，setTimeout()會被傳送到 Web API，等待指定的時間完成再將該操作傳回進行處理。</li><div class="em-div">從 Web API 等時間跑完後，它將操作發送到哪裡？他們被發送到「事件佇列（Event Queue）」</div><h3 id="Event-Queue-事件佇列"><a href="#Event-Queue-事件佇列" class="headerlink" title="Event Queue 事件佇列"></a>Event Queue 事件佇列</h3><img src="/images/eventLoop/eventque.png"><ul>  <li>Event Queue 裡面是待執行的任務，其中每個訊息都與一個 function 相關聯。</li>  <li>當堆疊中有足夠空間時，會從 Event Queue 事件佇列拿取一個任務進行處理，處理過程包含了呼叫相關聯的 function。只有當堆疊清空時，該佇列才算是完成處理。</li></ul><div class="em-div">上面分別介紹了 Call Stack、Web APIs、Event Queue，接下來可以將他們組起來了！組起來後可以更好地理解 Event Loop。</div><h3 id="Event-Loop-事件循環"><a href="#Event-Loop-事件循環" class="headerlink" title="Event Loop 事件循環"></a>Event Loop 事件循環</h3><img src="/images/eventLoop/eventloop.png"><ul>  <li>Event Loop 它不斷檢查 Call Stack 呼叫堆疊是否為空。</li>  <li>如果為空：則從事件佇列 Event Queue 中新增函式至 Call Stack。</li>  <li>新增函式至 Call Stack 的步驟，又稱為非同步回調（asynchronous ）</li>  <li>如果不為空：處理 Call Stack 內的函數。</li></ul><h3 id="範例示意"><a href="#範例示意" class="headerlink" title="範例示意"></a>範例示意</h3><p>當然，如果僅以上介紹，無法完整了解，這班準備了幾個程式碼及搭配<a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>，讓讀者能夠更了解其運行步驟</p><p>可以按此<a href="http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIkhpIik7CnNldFRpbWVvdXQoZnVuY3Rpb24gY2IoKSB7CiAgY29uc29sZS5sb2coInRoZXJlIik7Cn0sIDUwMDApOwpjb25zb2xlLmxvZygiZW5kIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4=">loupe</a>了解 JavaScript 運行以上程式的步驟</p><h3 id="範例示範"><a href="#範例示範" class="headerlink" title="範例示範"></a>範例示範</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hi&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;there&quot;</span>);<br>&#125;, <span class="hljs-number">5000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br></code></pre></td></tr></table></figure><p>會得到以下結果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">Hi<br><span class="hljs-keyword">end</span><br>there<br></code></pre></td></tr></table></figure><h3 id="範例示範-2"><a href="#範例示範-2" class="headerlink" title="範例示範 2"></a>範例示範 2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><p>會得到以下結果：</p><img src="/images/eventLoop/pasted-0.png"><p>此又稱為<strong>Stack Overflow</strong>，當 Stack 不斷增長，直到瀏覽器記憶體耗盡。是瀏覽器在哀嚎的聲音 😂😂</p><p>以上是關於 Event Loop 的介紹，是我由以下參考資料整理+自己繪圖而成，如果您有興趣了解更多，請參考：</p><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><blockquote><p>What the heck is the event loop anyway? | Philip Roberts <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">https://www.youtube.com/watch?v=8aGhZQkoFbQ</a></p></blockquote><blockquote><p>請說明瀏覽器中的事件循環 (Event Loop) <a href="https://www.explainthis.io/zh-hant/swe/what-is-event-loop">https://www.explainthis.io/zh-hant/swe/what-is-event-loop</a></p></blockquote><blockquote><p>What is an event loop in JavaScript? <a href="https://www.educative.io/answers/what-is-an-event-loop-in-javascript">https://www.educative.io/answers/what-is-an-event-loop-in-javascript</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  .em-div{
  background-color: #d4a373;
  color: white;
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
  }
&lt;/style&gt;

&lt;h3 id=</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://adora-xu.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://adora-xu.com/tags/JavaScript/"/>
    
    <category term="Event Loop" scheme="http://adora-xu.com/tags/Event-Loop/"/>
    
  </entry>
  
</feed>
